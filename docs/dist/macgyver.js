(function (Vue$1, $) {
  'use strict';

  Vue$1 = Vue$1 && Vue$1.hasOwnProperty('default') ? Vue$1['default'] : Vue$1;
  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function _wrapRegExp(re, groups) {
    _wrapRegExp = function (re, groups) {
      return new BabelRegExp(re, undefined, groups);
    };

    var _RegExp = _wrapNativeSuper(RegExp);

    var _super = RegExp.prototype;

    var _groups = new WeakMap();

    function BabelRegExp(re, flags, groups) {
      var _this = _RegExp.call(this, re, flags);

      _groups.set(_this, groups || _groups.get(re));

      return _this;
    }

    _inherits(BabelRegExp, _RegExp);

    BabelRegExp.prototype.exec = function (str) {
      var result = _super.exec.call(this, str);

      if (result) result.groups = buildGroups(result, this);
      return result;
    };

    BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
      if (typeof substitution === "string") {
        var groups = _groups.get(this);

        return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
          return "$" + groups[name];
        }));
      } else if (typeof substitution === "function") {
        var _this = this;

        return _super[Symbol.replace].call(this, str, function () {
          var args = [];
          args.push.apply(args, arguments);

          if (typeof args[args.length - 1] !== "object") {
            args.push(buildGroups(args, _this));
          }

          return substitution.apply(this, args);
        });
      } else {
        return _super[Symbol.replace].call(this, str, substitution);
      }
    };

    function buildGroups(result, re) {
      var g = _groups.get(re);

      return Object.keys(g).reduce(function (groups, name) {
        groups[name] = result[g[name]];
        return groups;
      }, Object.create(null));
    }

    return _wrapRegExp.apply(this, arguments);
  }

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  var isArray_1 = isArray;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
  }

  var isSymbol_1 = isSymbol;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol_1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  var _isKey = isKey;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /* Built-in method references that are verified to be native. */
  var Map$1 = _getNative(_root, 'Map');

  var _Map = Map$1;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || _MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = _MapCache;

  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize_1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = _memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  var _stringToPath = stringToPath;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  var _arrayMap = arrayMap;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }
    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }
    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = _castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  var _arrayReduce = arrayReduce;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = _basePropertyOf(deburredLetters);

  var _deburrLetter = deburrLetter;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

  /** Used to compose unicode capture groups. */
  var rsCombo = '[' + rsComboRange + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr(string) {
    string = toString_1(string);
    return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange$1 = '\\u0300-\\u036f',
      reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$1 = '[' + rsComboRange$1 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo$1 + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords;

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words(string, pattern, guard) {
    string = toString_1(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
    }
    return string.match(pattern) || [];
  }

  var words_1 = words;

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos$1, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder(callback) {
    return function(string) {
      return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  var _baseSlice = baseSlice;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : _baseSlice(array, start, end);
  }

  var _castSlice = castSlice;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = '\\ud800-\\udfff',
      rsComboMarksRange$2 = '\\u0300-\\u036f',
      reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
      rsVarRange$1 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsZWJ$1 = '\\u200d';

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$2 + rsVarRange$1 + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = '\\ud800-\\udfff',
      rsComboMarksRange$3 = '\\u0300-\\u036f',
      reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange$2 + ']',
      rsCombo$2 = '[' + rsComboRange$3 + ']',
      rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
      rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$2 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  var _unicodeToArray = unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return _hasUnicode(string)
      ? _unicodeToArray(string)
      : _asciiToArray(string);
  }

  var _stringToArray = stringToArray;

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst(methodName) {
    return function(string) {
      string = toString_1(string);

      var strSymbols = _hasUnicode(string)
        ? _stringToArray(string)
        : undefined;

      var chr = strSymbols
        ? strSymbols[0]
        : string.charAt(0);

      var trailing = strSymbols
        ? _castSlice(strSymbols, 1).join('')
        : string.slice(1);

      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst;

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst = _createCaseFirst('toUpperCase');

  var upperFirst_1 = upperFirst;

  /**
   * Converts `string` to
   * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
   *
   * @static
   * @memberOf _
   * @since 3.1.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the start cased string.
   * @example
   *
   * _.startCase('--foo-bar--');
   * // => 'Foo Bar'
   *
   * _.startCase('fooBar');
   * // => 'Foo Bar'
   *
   * _.startCase('__FOO_BAR__');
   * // => 'FOO BAR'
   */
  var startCase = _createCompounder(function(result, word, index) {
    return result + (index ? ' ' : '') + upperFirst_1(word);
  });

  var startCase_1 = startCase;

  var defineProperty = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty$1 = defineProperty;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$1) {
      _defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = _createBaseFor();

  var _baseFor = baseFor;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$5.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$7;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && _baseFor(object, iteratee, keys_1);
  }

  var _baseForOwn = baseForOwn;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;

  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /** Built-in value references. */
  var Uint8Array = _root.Uint8Array;

  var _Uint8Array = Uint8Array;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$1 = '[object Error]',
      mapTag$1 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$1 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$1:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$1:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$1:
        return object.name == other.name && object.message == other.message;

      case regexpTag$1:
      case stringTag$1:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$1:
        var convert = _mapToArray;

      case setTag$1:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$1:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$a.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$7.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /* Built-in method references that are verified to be native. */
  var DataView = _getNative(_root, 'DataView');

  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set$1 = _getNative(_root, 'Set');

  var _Set = Set$1;

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$2 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$2 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
      (_Map && getTag(new _Map) != mapTag$2) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$2) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$2;
          case mapCtorString: return mapTag$2;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$2;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      objectTag$2 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$1 : _getTag(object),
        othTag = othIsArr ? arrayTag$1 : _getTag(other);

    objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
    othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

    var objIsObj = objTag == objectTag$2,
        othIsObj = othTag == objectTag$2,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$8.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$8.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, _isStrictComparable(value)];
    }
    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = _getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) &&
      (isArray_1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get_1(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn_1(object, path)
        : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity_1;
    }
    if (typeof value == 'object') {
      return isArray_1(value)
        ? _baseMatchesProperty(value[0], value[1])
        : _baseMatches(value);
    }
    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /**
   * Creates an object with the same keys as `object` and values generated
   * by running each own enumerable string keyed property of `object` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapKeys
   * @example
   *
   * var users = {
   *   'fred':    { 'user': 'fred',    'age': 40 },
   *   'pebbles': { 'user': 'pebbles', 'age': 1 }
   * };
   *
   * _.mapValues(users, function(o) { return o.age; });
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   *
   * // The `_.property` iteratee shorthand.
   * _.mapValues(users, 'age');
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   */
  function mapValues(object, iteratee) {
    var result = {};
    iteratee = _baseIteratee(iteratee);

    _baseForOwn(object, function(value, key, object) {
      _baseAssignValue(result, key, iteratee(value, key, object));
    });
    return result;
  }

  var mapValues_1 = mapValues;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$9.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject_1(object)) {
      return object;
    }
    path = _castPath(path, object);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = _toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject_1(objValue)
            ? objValue
            : (_isIndex(path[index + 1]) ? [] : {});
        }
      }
      _assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  var _baseSet = baseSet;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = _baseGet(object, path);

      if (predicate(value, path)) {
        _baseSet(result, _castPath(path, object), value);
      }
    }
    return result;
  }

  var _basePickBy = basePickBy;

  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$d.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$a.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$1(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn$1;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /**
   * Creates an object composed of the `object` properties `predicate` returns
   * truthy for. The predicate is invoked with two arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pickBy(object, _.isNumber);
   * // => { 'a': 1, 'c': 3 }
   */
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = _arrayMap(_getAllKeysIn(object), function(prop) {
      return [prop];
    });
    predicate = _baseIteratee(predicate);
    return _basePickBy(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }

  var pickBy_1 = pickBy;

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]',
      setTag$3 = '[object Set]';

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$e.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike_1(value) &&
        (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
          isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
      return !value.length;
    }
    var tag = _getTag(value);
    if (tag == mapTag$3 || tag == setTag$3) {
      return !value.size;
    }
    if (_isPrototype(value)) {
      return !_baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$b.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  var isEmpty_1 = isEmpty;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  var _arrayEach = arrayEach;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$f.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$c.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  var _initCloneArray = initCloneArray;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return _cloneArrayBuffer(object);

      case boolTag$2:
      case dateTag$2:
        return new Ctor(+object);

      case dataViewTag$3:
        return _cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$4:
        return new Ctor;

      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$2:
        return _cloneRegExp(object);

      case setTag$4:
        return new Ctor;

      case symbolTag$2:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$5;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

  var isMap_1 = isMap;

  /** `Object#toString` result references. */
  var setTag$5 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$5;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$6 = '[object Map]',
      numberTag$3 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$3 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
  cloneableTags[arrayBufferTag$3] = cloneableTags[dataViewTag$4] =
  cloneableTags[boolTag$3] = cloneableTags[dateTag$3] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$6] =
  cloneableTags[numberTag$3] = cloneableTags[objectTag$3] =
  cloneableTags[regexpTag$3] = cloneableTags[setTag$6] =
  cloneableTags[stringTag$3] = cloneableTags[symbolTag$3] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1(value)) {
      return value;
    }
    var isArr = isArray_1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$3 || tag == argsTag$3 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn : keys_1);

    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} findIndexFunc The function to find the collection index.
   * @returns {Function} Returns the new find function.
   */
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike_1(collection)) {
        var iteratee = _baseIteratee(predicate);
        collection = keys_1(collection);
        predicate = function(key) { return iteratee(iterable[key], key, iterable); };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  var _createFind = createFind;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  var _baseFindIndex = baseFindIndex;

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol_1(value)) {
      return NAN;
    }
    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var toNumber_1 = toNumber;

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber_1(value);
    if (value === INFINITY$2 || value === -INFINITY$2) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite_1(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  var toInteger_1 = toInteger;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger_1(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return _baseFindIndex(array, _baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  var find = _createFind(findIndex_1);

  var find_1 = find;

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_1(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  var _createBaseEach = createBaseEach;

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = _createBaseEach(_baseForOwn);

  var _baseEach = baseEach;

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike_1(collection) ? Array(collection.length) : [];

    _baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  var _baseMap = baseMap;

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayMap : _baseMap;
    return func(collection, _baseIteratee(iteratee));
  }

  var map_1 = map;

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$g.hasOwnProperty;

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty$d.call(object, key);
  }

  var _baseHas = baseHas;

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && _hasPath(object, path, _baseHas);
  }

  var has_1 = has;

  /** `Object#toString` result references. */
  var objectTag$4 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype,
      objectProto$h = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$h.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString$2.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$4) {
      return false;
    }
    var proto = _getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$e.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString$2.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject;

  /** `Object#toString` result references. */
  var stringTag$4 = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag$4);
  }

  var isString_1 = isString;

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  var _arrayEvery = arrayEvery;

  /**
   * The base implementation of `_.every` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    _baseEach(collection, function(value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  var _baseEvery = baseEvery;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike_1(object) && _isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq_1(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * Iteration is stopped once `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * **Note:** This method returns `true` for
   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
   * elements of empty collections.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.every(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, guard) {
    var func = isArray_1(collection) ? _arrayEvery : _baseEvery;
    if (guard && _isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, _baseIteratee(predicate));
  }

  var every_1 = every;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1;

  /**
   * Creates a function that performs a partial deep comparison between a given
   * object and `source`, returning `true` if the given object has equivalent
   * property values, else `false`.
   *
   * **Note:** The created function is equivalent to `_.isMatch` with `source`
   * partially applied.
   *
   * Partial comparisons will match empty array and empty object `source`
   * values against any array or object value, respectively. See `_.isEqual`
   * for a list of supported value comparisons.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 1, 'b': 2, 'c': 3 },
   *   { 'a': 4, 'b': 5, 'c': 6 }
   * ];
   *
   * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
   * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
   */
  function matches(source) {
    return _baseMatches(_baseClone(source, CLONE_DEEP_FLAG$2));
  }

  var matches_1 = matches;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax$1(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !_defineProperty$1 ? identity_1 : function(func, string) {
    return _defineProperty$1(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = _shortOut(_baseSetToString);

  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /** Used for built-in method references. */
  var objectProto$i = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$i.hasOwnProperty;

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var defaults = _baseRest(function(object, sources) {
    object = Object(object);

    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : undefined;

    if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }

    while (++index < length) {
      var source = sources[index];
      var props = keysIn_1(source);
      var propsIndex = -1;
      var propsLength = props.length;

      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object[key];

        if (value === undefined ||
            (eq_1(value, objectProto$i[key]) && !hasOwnProperty$f.call(object, key))) {
          object[key] = source[key];
        }
      }
    }

    return object;
  });

  var defaults_1 = defaults;

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  var typeChecker = function (type) {
      var typeString = "[object " + type + "]";
      return function (value) {
          return getClassName(value) === typeString;
      };
  };
  var getClassName = function (value) { return Object.prototype.toString.call(value); };
  var comparable = function (value) {
      if (value instanceof Date) {
          return value.getTime();
      }
      else if (isArray$1(value)) {
          return value.map(comparable);
      }
      else if (value && typeof value.toJSON === "function") {
          return value.toJSON();
      }
      return value;
  };
  var isArray$1 = typeChecker("Array");
  var isObject$1 = typeChecker("Object");
  var isFunction$1 = typeChecker("Function");
  var isVanillaObject = function (value) {
      return (value &&
          (value.constructor === Object ||
              value.constructor === Array ||
              value.constructor.toString() === "function Object() { [native code] }" ||
              value.constructor.toString() === "function Array() { [native code] }") &&
          !value.toJSON);
  };
  var equals = function (a, b) {
      if (a == null && a == b) {
          return true;
      }
      if (a === b) {
          return true;
      }
      if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {
          return false;
      }
      if (isArray$1(a)) {
          if (a.length !== b.length) {
              return false;
          }
          for (var i = 0, length_1 = a.length; i < length_1; i++) {
              if (!equals(a[i], b[i]))
                  return false;
          }
          return true;
      }
      else if (isObject$1(a)) {
          if (Object.keys(a).length !== Object.keys(b).length) {
              return false;
          }
          for (var key in a) {
              if (!equals(a[key], b[key]))
                  return false;
          }
          return true;
      }
      return false;
  };

  var __extends = (undefined && undefined.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  };
  /**
   * Walks through each value given the context - used for nested operations. E.g:
   * { "person.address": { $eq: "blarg" }}
   */
  var walkKeyPathValues = function (item, keyPath, next, depth, key, owner) {
      var currentKey = keyPath[depth];
      // if array, then try matching. Might fall through for cases like:
      // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].
      if (isArray$1(item) && isNaN(Number(currentKey))) {
          for (var i = 0, length_1 = item.length; i < length_1; i++) {
              // if FALSE is returned, then terminate walker. For operations, this simply
              // means that the search critera was met.
              if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {
                  return false;
              }
          }
      }
      if (depth === keyPath.length || item == null) {
          return next(item, key, owner);
      }
      return walkKeyPathValues(item[currentKey], keyPath, next, depth + 1, currentKey, item);
  };
  var BaseOperation = /** @class */ (function () {
      function BaseOperation(params, owneryQuery, options) {
          this.params = params;
          this.owneryQuery = owneryQuery;
          this.options = options;
          this.init();
      }
      BaseOperation.prototype.init = function () { };
      BaseOperation.prototype.reset = function () {
          this.done = false;
          this.success = false;
      };
      return BaseOperation;
  }());
  var GroupOperation = /** @class */ (function (_super) {
      __extends(GroupOperation, _super);
      function GroupOperation(params, owneryQuery, options, _children) {
          var _this = _super.call(this, params, owneryQuery, options) || this;
          _this._children = _children;
          return _this;
      }
      /**
       */
      GroupOperation.prototype.reset = function () {
          this.success = false;
          this.done = false;
          for (var i = 0, length_2 = this._children.length; i < length_2; i++) {
              this._children[i].reset();
          }
      };
      /**
       */
      GroupOperation.prototype.childrenNext = function (item, key, owner) {
          var done = true;
          var success = true;
          for (var i = 0, length_3 = this._children.length; i < length_3; i++) {
              var childOperation = this._children[i];
              childOperation.next(item, key, owner);
              if (!childOperation.success) {
                  success = false;
              }
              if (childOperation.done) {
                  if (!childOperation.success) {
                      break;
                  }
              }
              else {
                  done = false;
              }
          }
          this.done = done;
          this.success = success;
      };
      return GroupOperation;
  }(BaseOperation));
  var QueryOperation = /** @class */ (function (_super) {
      __extends(QueryOperation, _super);
      function QueryOperation() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       */
      QueryOperation.prototype.next = function (item, key, parent) {
          this.childrenNext(item, key, parent);
      };
      return QueryOperation;
  }(GroupOperation));
  var NestedOperation = /** @class */ (function (_super) {
      __extends(NestedOperation, _super);
      function NestedOperation(keyPath, params, owneryQuery, options, children) {
          var _this = _super.call(this, params, owneryQuery, options, children) || this;
          _this.keyPath = keyPath;
          /**
           */
          _this._nextNestedValue = function (value, key, owner) {
              _this.childrenNext(value, key, owner);
              return !_this.done;
          };
          return _this;
      }
      /**
       */
      NestedOperation.prototype.next = function (item, key, parent) {
          walkKeyPathValues(item, this.keyPath, this._nextNestedValue, 0, key, parent);
      };
      return NestedOperation;
  }(GroupOperation));
  var createTester = function (a, compare) {
      if (a instanceof Function) {
          return a;
      }
      if (a instanceof RegExp) {
          return function (b) { return typeof b === "string" && a.test(b); };
      }
      var comparableA = comparable(a);
      return function (b) { return compare(comparableA, comparable(b)); };
  };
  var EqualsOperation = /** @class */ (function (_super) {
      __extends(EqualsOperation, _super);
      function EqualsOperation() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EqualsOperation.prototype.init = function () {
          this._test = createTester(this.params, this.options.compare);
      };
      EqualsOperation.prototype.next = function (item, key, parent) {
          if (this._test(item, key, parent)) {
              this.done = true;
              this.success = true;
          }
      };
      return EqualsOperation;
  }(BaseOperation));
  var NopeOperation = /** @class */ (function (_super) {
      __extends(NopeOperation, _super);
      function NopeOperation() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      NopeOperation.prototype.next = function () {
          this.done = true;
          this.success = false;
      };
      return NopeOperation;
  }(BaseOperation));
  var numericalOperationCreator = function (createNumericalOperation) { return function (params, owneryQuery, options) {
      return params == null
          ? new NopeOperation(params, owneryQuery, options)
          : createNumericalOperation(params, owneryQuery, options);
  }; };
  var createOperation = function (name, params, parentQuery, options) {
      var operationCreator = options.operations[name];
      if (!operationCreator) {
          throw new Error("Unsupported operation: " + name);
      }
      return operationCreator(params, parentQuery, options);
  };
  var containsOperation = function (query) {
      for (var key in query) {
          if (key.charAt(0) === "$")
              return true;
      }
      return false;
  };
  var createNestedOperation = function (keyPath, nestedQuery, owneryQuery, options) {
      if (containsOperation(nestedQuery)) {
          var _a = createQueryOperations(nestedQuery, options), selfOperations = _a[0], nestedOperations = _a[1];
          if (nestedOperations.length) {
              throw new Error("Property queries must contain only operations, or exact objects.");
          }
          return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, selfOperations);
      }
      return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [
          new EqualsOperation(nestedQuery, owneryQuery, options)
      ]);
  };
  var createQueryOperation = function (query, owneryQuery, options) {
      var _a = createQueryOperations(query, options), selfOperations = _a[0], nestedOperations = _a[1];
      var ops = __spreadArrays([
          new NestedOperation([], query, owneryQuery, options, selfOperations)
      ], nestedOperations);
      if (ops.length === 1) {
          return ops[0];
      }
      return new QueryOperation(query, owneryQuery, options, ops);
  };
  var createQueryOperations = function (query, options) {
      var selfOperations = [];
      var nestedOperations = [];
      if (!isVanillaObject(query)) {
          selfOperations.push(new EqualsOperation(query, query, options));
          return [selfOperations, nestedOperations];
      }
      for (var key in query) {
          if (key.charAt(0) === "$") {
              var op = createOperation(key, query[key], query, options);
              // probably just a flag for another operation (like $options)
              if (op != null) {
                  selfOperations.push(op);
              }
          }
          else {
              nestedOperations.push(createNestedOperation(key.split("."), query[key], query, options));
          }
      }
      return [selfOperations, nestedOperations];
  };
  var createQueryTester = function (query, _a) {
      var _b = _a === void 0 ? {} : _a, compare = _b.compare, operations = _b.operations;
      var operation = createQueryOperation(query, null, {
          compare: compare || equals,
          operations: Object.assign({}, operations || {})
      });
      return function (item, key, owner) {
          operation.reset();
          operation.next(item, key, owner);
          return operation.success;
      };
  };

  var __extends$1 = (undefined && undefined.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var $Ne = /** @class */ (function (_super) {
      __extends$1($Ne, _super);
      function $Ne() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $Ne.prototype.init = function () {
          this._test = createTester(this.params, this.options.compare);
      };
      $Ne.prototype.reset = function () {
          _super.prototype.reset.call(this);
          this.success = true;
      };
      $Ne.prototype.next = function (item) {
          if (this._test(item)) {
              this.done = true;
              this.success = false;
          }
      };
      return $Ne;
  }(BaseOperation));
  var $ElemMatch = /** @class */ (function (_super) {
      __extends$1($ElemMatch, _super);
      function $ElemMatch() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $ElemMatch.prototype.init = function () {
          this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);
      };
      $ElemMatch.prototype.reset = function () {
          this._queryOperation.reset();
      };
      $ElemMatch.prototype.next = function (item, key, owner) {
          this._queryOperation.next(item, key, owner);
          this.done = this._queryOperation.done;
          this.success = this._queryOperation.success;
      };
      return $ElemMatch;
  }(BaseOperation));
  var $Not = /** @class */ (function (_super) {
      __extends$1($Not, _super);
      function $Not() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $Not.prototype.next = function (item, key, owner) {
          _super.prototype.next.call(this, item, key, owner);
          this.success = !this.success;
      };
      return $Not;
  }($ElemMatch));
  var $Or = /** @class */ (function (_super) {
      __extends$1($Or, _super);
      function $Or() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $Or.prototype.init = function () {
          var _this = this;
          this._ops = this.params.map(function (op) {
              return createQueryOperation(op, null, _this.options);
          });
      };
      $Or.prototype.reset = function () {
          this.done = false;
          this.success = false;
          for (var i = 0, length_1 = this._ops.length; i < length_1; i++) {
              this._ops[i].reset();
          }
      };
      $Or.prototype.next = function (item, key, owner) {
          var done = false;
          var success = false;
          for (var i = 0, length_2 = this._ops.length; i < length_2; i++) {
              var op = this._ops[i];
              op.next(item, key, owner);
              if (op.success) {
                  done = true;
                  success = op.success;
                  break;
              }
          }
          this.success = success;
          this.done = done;
      };
      return $Or;
  }(BaseOperation));
  var $Nor = /** @class */ (function (_super) {
      __extends$1($Nor, _super);
      function $Nor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $Nor.prototype.next = function (item, key, owner) {
          _super.prototype.next.call(this, item, key, owner);
          this.success = !this.success;
      };
      return $Nor;
  }($Or));
  var $Exists = /** @class */ (function (_super) {
      __extends$1($Exists, _super);
      function $Exists() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      $Exists.prototype.next = function (item, key, owner) {
          if (owner.hasOwnProperty(key) === this.params) {
              this.done = true;
              this.success = true;
          }
      };
      return $Exists;
  }(BaseOperation));
  var $And = /** @class */ (function (_super) {
      __extends$1($And, _super);
      function $And(params, owneryQuery, options) {
          return _super.call(this, params, owneryQuery, options, params.map(function (query) { return createQueryOperation(query, owneryQuery, options); })) || this;
      }
      $And.prototype.next = function (item, key, owner) {
          this.childrenNext(item, key, owner);
      };
      return $And;
  }(GroupOperation));
  var $eq = function (params, owneryQuery, options) {
      return new EqualsOperation(params, owneryQuery, options);
  };
  var $ne = function (params, owneryQuery, options) {
      return new $Ne(params, owneryQuery, options);
  };
  var $or = function (params, owneryQuery, options) {
      return new $Or(params, owneryQuery, options);
  };
  var $nor = function (params, owneryQuery, options) {
      return new $Nor(params, owneryQuery, options);
  };
  var $elemMatch = function (params, owneryQuery, options) {
      return new $ElemMatch(params, owneryQuery, options);
  };
  var $nin = function (params, owneryQuery, options) {
      return new $Nor(params, owneryQuery, options);
  };
  var $in = function (params, owneryQuery, options) {
      return new $Or(params, owneryQuery, options);
  };
  var $lt = numericalOperationCreator(function (params, owneryQuery, options) {
      return new EqualsOperation(function (b) { return b < params; }, owneryQuery, options);
  });
  var $lte = numericalOperationCreator(function (params, owneryQuery, options) {
      return new EqualsOperation(function (b) { return b <= params; }, owneryQuery, options);
  });
  var $gt = numericalOperationCreator(function (params, owneryQuery, options) {
      return new EqualsOperation(function (b) { return b > params; }, owneryQuery, options);
  });
  var $gte = numericalOperationCreator(function (params, owneryQuery, options) {
      return new EqualsOperation(function (b) { return b >= params; }, owneryQuery, options);
  });
  var $mod = function (_a, owneryQuery, options) {
      var mod = _a[0], equalsValue = _a[1];
      return new EqualsOperation(function (b) { return comparable(b) % mod === equalsValue; }, owneryQuery, options);
  };
  var $exists = function (params, owneryQuery, options) { return new $Exists(params, owneryQuery, options); };
  var $regex = function (pattern, owneryQuery, options) {
      return new EqualsOperation(new RegExp(pattern, owneryQuery.$options), owneryQuery, options);
  };
  var $not = function (params, owneryQuery, options) {
      return new $Not(params, owneryQuery, options);
  };
  var $type = function (clazz, owneryQuery, options) {
      return new EqualsOperation(function (b) { return (b != null ? b instanceof clazz || b.constructor === clazz : false); }, owneryQuery, options);
  };
  var $and = function (params, ownerQuery, options) {
      return new $And(params, ownerQuery, options);
  };
  var $all = $and;
  var $size = function (params, ownerQuery, options) {
      return new EqualsOperation(function (b) { return b && b.length === params; }, ownerQuery, options);
  };
  var $options = function () { return null; };
  var $where = function (params, ownerQuery, options) {
      var test;
      if (isFunction$1(params)) {
          test = params;
      }
      else {
          test = new Function("obj", "return " + params);
      }
      return new EqualsOperation(function (b) { return test.bind(b)(b); }, ownerQuery, options);
  };

  var defaultOperations = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $eq: $eq,
    $ne: $ne,
    $or: $or,
    $nor: $nor,
    $elemMatch: $elemMatch,
    $nin: $nin,
    $in: $in,
    $lt: $lt,
    $lte: $lte,
    $gt: $gt,
    $gte: $gte,
    $mod: $mod,
    $exists: $exists,
    $regex: $regex,
    $not: $not,
    $type: $type,
    $and: $and,
    $all: $all,
    $size: $size,
    $options: $options,
    $where: $where
  });

  var createDefaultQueryTester = function (query, _a) {
      var _b = _a === void 0 ? {} : _a, compare = _b.compare, operations = _b.operations;
      return createQueryTester(query, {
          compare: compare,
          operations: Object.assign({}, defaultOperations, operations || {})
      });
  };

  var _this = undefined;
  var $macgyver = {};
  /**
  * Storage for all MacGyver registered widgets
  * Each key is the unique reference name of the component e.g. `"mgText"`
  * Each value is the original options object definition passed to `Vue.mgCompoenent(name, options)`
  * @var {Object}
  */

  $macgyver.widgets = {};
  $macgyver.$nextId = 0;

  $macgyver.nextId = function () {
    return "mgForm".concat($macgyver.$nextId++);
  };
  /**
  * Set of convenience functions to manage on-screen MacGyver forms
  */


  $macgyver.forms = {};
  /**
  * Set the given forms spec config
  * @param {string} id The ID of the form to set the config of
  * @param {Object|Array} config The config to set
  * @returns {MacGyver} The chainable MacGyver instance
  */

  $macgyver.forms.setConfig = function (id, config) {
    if (!$macgyver.$forms[id]) $macgyver.$forms[id] = {
      config: {},
      data: {}
    };
    $macgyver.$forms[id].config = $macgyver.compileSpec(config).spec;
    return $macgyver;
  };
  /**
  * Set the given forms spec data
  * @param {string} id The ID of the form to set the config of
  * @param {Object|Array} data The data population to set
  * @returns {MacGyver} The chainable MacGyver instance
  */


  $macgyver.forms.setData = function (id, data) {
    if (!$macgyver.$forms[id]) $macgyver.$forms[id] = {
      config: {},
      data: {}
    };
    $macgyver.$forms[id].data = data;
    return $macgyver;
  };
  /**
  * Convenience function to validate all MacGyver forms on a screen and return the array of failed validations
  * @param {string} [id] The form ID to validate, if omitted the first form on the page is used
  * @param {boolean} [showErrors=true] Allow the form to display a list of errors as well as returning them
  * @returns {array <Object>} Collection where each item is {error}
  */


  $macgyver.forms.validate = function (id) {
    if (!$macgyver.$forms[id]) throw new Error('Invalid MacGyver form');
    console.warn('FIXME: Validation not yet supported');

    return true;
  };
  /**
  * Emit a message to a specific mgForm element
  * @param {string} id The ID of the form to emit to
  * @param {string} msg The message to emit
  * @param {*} [payload...] The payload of the message to emit
  */


  $macgyver.forms.emit = function (id, msg) {
    var _$macgyver$$forms$id;

    if (!$macgyver.$forms[id]) throw new Error('Unknown form ID');

    for (var _len = arguments.length, payload = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      payload[_key - 2] = arguments[_key];
    }

    (_$macgyver$$forms$id = $macgyver.$forms[id]).$emit.apply(_$macgyver$$forms$id, [msg].concat(payload));
  };
  /**
  * Emit a message to all child controls of a given form
  * @param {string} id The ID of the form to emit to
  * @param {string} msg The message to emit
  * @param {*} [payload...] The payload of the message to emit
  */


  $macgyver.forms.emitDown = function (id, msg) {
    var _$macgyver$$forms$id2;

    if (!$macgyver.$forms[id]) throw new Error('Unknown form ID');

    for (var _len2 = arguments.length, payload = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      payload[_key2 - 2] = arguments[_key2];
    }

    (_$macgyver$$forms$id2 = $macgyver.$forms[id]).$emitDown.apply(_$macgyver$$forms$id2, [msg].concat(payload));
  };

  $macgyver.forms.getPath = function (id, path, fallback) {
    return $macgyver.utils.getPath($macgyver.$forms[id], path, fallback);
  };
  /**
  * Compute the data prototype of the form
  * This is an empty object with all the defaults populated
  * @param {Object} spec The form spec object to exmaine
  * @returns {Object} A prototype data object with all defaults populated
  */


  $macgyver.forms.getPrototype = function (spec) {
    return $macgyver.flatten(spec, {
      type: 'spec',
      want: 'array',
      wantDataPath: true
    }).reduce(function (data, node) {
      if (!node.path || !node["default"]) return data; // No path or default speciifed - skip

      $macgyver.utils.setPath(data, node.path, node["default"]);
      return data;
    }, {});
  }; // $macgyver.notify{} {{{

  /**
  * A collection of ways MacGyver can notify the user
  * These should be replaced by whatever your local framework supports
  */


  $macgyver.notify = {};
  /**
  * Signify that a loading event is taking place
  * This function should be overridden by the framework to include whatever load handling is requried
  * By default it uses https://www.npmjs.com/package/@momsfriendlydevco/loader
  * @param {string} id The unique ID for the loading item
  * @param {boolean} [status=true] Whether the item is performing an operation that requires loading
  * @param {Object} [options] Additional options
  * @param {boolean} [options.foreground=false] Whether the loading event should occur in the foreground
  */

  $macgyver.notify.loading = function (id) {
    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var options = arguments.length > 2 ? arguments[2] : undefined;

    if (status && options && options.foreground) {
      console.log('[$macgyver]', 'Loading foreground', id, {
        status: status
      });
    } else if (status) {
      console.log('[$macgyver]', 'Loading background', id, {
        status: status
      });
    } else {
      console.log('[$macgyver]', 'Stop loading', id, {
        status: status
      });
    }
  };
  /**
  * Provide a warning message to the user
  * @param {string} message The message to display
  */


  $macgyver.notify.warn = function (message) {
    return console.log('[$macgyver]', 'WARN', message);
  };
  /**
  * Provide an error message to the user
  * @param {string} message The message to display
  */


  $macgyver.notify.error = function (message) {
    return console.log('[$macgyver]', message);
  }; // }}}

  /**
  * Flatten the a spec into an object lookup where each key is the dotted notation of the key
  * NOTE: Specifying {want:'array'} will add the extra property 'path' onto the output collection
  * @param {Object|array} root The data or spec object to examine, this should be the root object but can also convert arrays into objects on the fly (although this is slower)
  * @param {Object} [options] Optional settings to use
  * @param {number} [options.maxDepth=0] How far down the tree to recurse, set to falsy to infinitely recurse
  * @param {Object|function} [options.filter] Either a Lodash match expression or a function to run on each widget - only truthy values are appended to the output. Function is called as `(widget, dataPath, specPath, depth)`
  * @param {Object|function} [options.filterChildren] Either a Lodash match expression or a function to run on each widget - only truthy values are recursed into. Function is called as `(widget, dataPath, specPath, depth)`
  * @param {string} [type="auto"] How to recurse into items. ENUM: 'auto' (try to determine how to recurse from root element), 'spec', 'data'
  * @param {string} [want="object"] How to return the output. ENUM: 'object' (an object where each key is the path and the value is the object), 'array' (a flattened version of an object), object is faster
  * @param {boolean|string} [wantDataPath=false] Whether to mutate the output widget with a dotted notation string indicating where to look in a data object for the value of the widget, if this is a string it specifies the key to use as storage
  * @param {boolean} [wantSpec=false] Whether to mutate the output widget with the widget specification as an object for each item
  * @param {boolean|string} [wantSpecPath=false] Whether to mutate the output widget with a dotted notation path on where to find the widget within a spec object, if this is a string it specifies the key to use as storage
  */


  $macgyver.flatten = function (root, options) {
    var settings = defaults_1(options, {
      root: isArray_1(root) ? $macgyver.compileSpec(root).spec : root,
      maxDepth: 0,
      filter: undefined,
      filterChildren: undefined,
      type: 'auto',
      want: 'object',
      wantDataPath: false,
      wantSpec: false,
      wantSpecPath: false
    });

    if (settings.filter && !isFunction_1(settings.filter) && isObject_1(settings.filter)) settings.filter = matches_1(settings.filter);
    if (settings.want != 'object' && settings.want != 'array') throw new Error('$macgyver.flatten({want}) can only be "object" or "array"');

    if (settings.type == 'auto') {
      if (settings.root.items) {
        settings.type = 'spec';
      } else if (every_1(settings.root, function (k, v) {
        return !v.items;
      })) {
        settings.type = 'data';
      } else {
        throw new Error('Cannot determine type of input object to $macgyver.flatten(), specify it explicitly with {type=spec|data}');
      }
    }

    var found = settings.want == 'object' ? {} : [];

    var depthScanner = function depthScanner(node, dataPath, specPath, depth) {
      if (!isObject_1(node)) return; // Add to bucket of found objects?

      if (!settings.filter // No filter
      || settings.filter.call(node, node, path, depth) // OR we pass the filter
      ) {
          if (settings.wantDataPath) node[isString_1(settings.wantDataPath) ? settings.wantDataPath : 'path'] = dataPath.concat([node.id]).filter(function (i) {
            return i;
          }).join('.');
          if (settings.wantSpecPath) node[isString_1(settings.wantSpecPath) ? settings.wantSpecPath : 'specPath'] = specPath.join('.');

          if (settings.want == 'object') {
            if (node.id) found[node.id] = node;
          } else {
            found.push(node);
          }
        } // Recurse into children?


      var recursionSubject = settings.type == 'spec' ? node.items : node;

      if (isArray_1(recursionSubject) && (!settings.filterChildren // No filter
      || settings.filterChildren.call(node, node, dataPath, specPath, depth) // ...or we pass the filter
      ) && (!settings.maxDepth || depth <= settings.maxDepth)) {
        recursionSubject.forEach(function (item, itemIndex) {
          return depthScanner(item, dataPath, specPath.concat(settings.type == 'spec' ? ['items', itemIndex] : [itemIndex]), depth + 1);
        });
      }
    };

    depthScanner(settings.root, [], [], 0);
    return found;
  };
  /**
  * Apply various criteria to a 'rough' spec to turn it into a clean one
  *
  * NOTE: 'Shorthand' is a simple `{id1: spec1, id2: spec2}` way of setting up a form. See the widget config for an example
  *       Shorthand may also have types that omit the `mg` prefix e.g. `text` instead of `mgText`
  *
  * @param {Object|array} spec A MacGyver spec to process and mutate
  * @param {Object} [options] Additional options to use
  * @param {boolean} [options.clone=true] Whether to clone the object before neatening, slow but Vue disallows mutation
  * @param {boolean} [options.convertArray=true] Convert arrays to object if not already in that format
  * @param {function} [options.convertArrayWrapper] Function used to convert from array - defaults to a simple mgContainer wrapper. Called as (spec)
  * @param {boolean} [options.convertShorthand=true] Accept shorthand format and convert if necessary
  * @param {function} [options.convertShorthandDetect] Function used to detect shorthand format - defaults to object with valid string keys sans 'id' field. Called as (spec)
  * @param {function} [options.convertShorthandTranslate] Function used to convert shorthand format. Called as (spec)
  * @param {boolean} [options.widgetDefaults=true] Assign each item its default values from the widget config if that setting is omitted
  * @param {string} [options.widgetTitles=true] Add any missing title fields from the ID
  * @param {boolean} [options.deblank=true] Reformat null/undefined/empty forms into a skeleton form
  * @returns {Object} An object composed of the keys {spec}
  */


  $macgyver.compileSpec = function (spec, options) {
    var settings = _objectSpread2({
      clone: true,
      convertArray: true,
      convertArrayWrapper: function convertArrayWrapper(items) {
        return {
          type: 'mgContainer',
          showTitles: false,
          items: items
        };
      },
      convertShorthand: true,
      convertShorthandDetect: function convertShorthandDetect(spec) {
        return isPlainObject_1(spec) // Simple object
        && !has_1(spec, 'type') // It doesn't have a type key (i.e. there is only one item in this object
        && every_1(spec, function (v, k) {
          return !has_1(v, 'id') && (!has_1(v, 'type') || v.type != 'mgContainer');
        });
      },
      // Each item lacks an ID and either doesn't have a type or that type is not a container
      convertShorthandTranslate: function convertShorthandTranslate(spec) {
        return {
          type: 'mgContainer',
          items: map_1(spec, function (widget, id) {
            var _widget$type;

            if (isString_1(widget)) widget = {
              type: widget
            }; // Widget is a straight string (e.g. 'boolean'), then fall through to type finders

            if ((_widget$type = widget.type) === null || _widget$type === void 0 ? void 0 : _widget$type.startsWith('mg')) {
              // Already a defined MacGyver spec
              return widget;
            } else if (isString_1(id) && id.startsWith('mg')) {
              // ID is type, payload is widget
              return _objectSpread2({}, widget, {
                type: id
              });
            } else if (widget.type) {
              // We have a type - try to match it against known widgets (or error out)
              var typeLCase = widget.type.toLowerCase();

              var found = find_1($macgyver.widgets, function (mgWidget) {
                return (// Search for likely widgets
                  mgWidget.meta.id.substr(2).toLowerCase() == typeLCase // matches `mg${TYPE}`
                  || mgWidget.meta.shorthand.includes(typeLCase)
                );
              } // is included in shorthand alternatives
              );

              if (found) {
                // Found either a widget of form `mg${type}` or a widget with that type as a shorthand
                return _objectSpread2({
                  id: id
                }, widget, {
                  type: found.meta.id
                });
              } else {
                // No idea what this widget is, wrap in an mgError
                return {
                  type: 'mgError',
                  text: "Unknown widget type \"".concat(widget.type, "\": ") + JSON.stringify(widget, null, '\t')
                };
              }
            } else if (isPlainObject_1(widget)) {
              // Given object but it explicitly does not have a type - assume mgText
              return _objectSpread2({
                id: id
              }, widget, {
                type: 'mgText'
              });
            } else {
              // Can't determine any type to link against - error out
              return {
                type: 'mgError',
                text: "No widget type specified: " + JSON.stringify(widget, null, '\t')
              };
            }
          })
        };
      },
      widgetDefaults: true,
      widgetTitles: true,
      deblank: true
    }, options);

    var spec = settings.clone ? cloneDeep_1(spec) : spec; // Output spec

    if (settings.deblank && isEmpty_1(spec)) {
      // Convert empty or unusable values into a skeleton
      spec = {
        type: 'mgContainer',
        items: []
      };
    }

    if (settings.convertArray && isArray_1(spec)) {
      // convert array spec -> object?
      spec = settings.convertArrayWrapper(spec);
    }

    if (settings.convertShorthand && settings.convertShorthandDetect(spec)) {
      // Is shorthand format
      spec = settings.convertShorthandTranslate(spec);
    }
    /**
    * Collection of items that have a showIf property
    * @var {array<Object>} Each widget with a showIf property
    */


    var showIfs = [];
    $macgyver.flatten(spec, {
      type: 'spec',
      want: 'array',
      wantDataPath: '$dataPath',
      wantSpecPath: '$specPath'
    }).forEach(function (widget) {
      if (!widget.type || !$macgyver.widgets[widget.type]) {
        // Remap unknown widget (we already did shorthand remapping above so this should be a 1:1 match)
        console.log("Unknown widget '".concat(widget.type, "'"), widget);
        widget = {
          type: 'mgError',
          text: "Unknown widget type \"".concat(widget.type, "\": ") + JSON.stringify(widget)
        };
      } else if (settings.widgetDefaults) {
        var _ref, _$macgyver$widgets$wi;

        // Apply defaults to widget
        Object.assign(widget, (_ref = (_$macgyver$widgets$wi = $macgyver.widgets[widget.type].config, pickBy_1(_$macgyver$widgets$wi, function (v, k) {
          return !has_1(widget, k) && has_1(v, 'default');
        })), mapValues_1(_ref, function (v) {
          return v["default"];
        })));
      } // Glue .show property to all elements that omit it


      widget.show = widget.show == undefined ? true : !!widget.show; // Add all widgets with a .showIf expression into a quick-lookup collection

      if (widget.showIf) {
        widget.showIf = $macgyver.utils.evalCompile(widget.showIf); // Compile showIf property so its as fast as possible

        showIfs.push(widget);
      }

      if (settings.widgetTitles && !widget.title && widget.id) widget.title = startCase_1(widget.id);
    });
    return {
      spec: spec,
      showIfs: showIfs
    };
  };
  /**
  * Register of known forms to their Vue instance / plain object mapping
  * For front-end MacGyver this is the VueInstance object of the registered form
  * For the back-end this is a simple object of the form `{config, data}`
  * @var {VueInstance|Object>}
  * @property {Object} config The form spec
  * @property {Object} data The current form data
  */


  $macgyver.$forms = {};
  /**
  * Set of misc utility helper functions
  * @var {Object};
  */

  $macgyver.utils = {};
  /**
  * Local storage for the global object
  * This is a wrapper until `globalThis` becomes available in both Node and the browser
  * @var {Object} The global scope
  */

  $macgyver.utils.global = function () {
    if (typeof self !== 'undefined') {
      return self;
    }

    if (typeof window !== 'undefined') {
      return window;
    }

    if (typeof global$1 !== 'undefined') {
      return global$1;
    }

    throw new Error('unable to locate global object');
  }();
  /**
  * Fetch any artbitrary data set from a URL
  * This function is designed to accept a customizable single-string URL which the user can customize and a spec options object that the requesting widget can define
  * NOTE: This function will invoke the loading notifier and call the warning notifier on an error
  *
  * @param {string} [url] The URL to fetch
  * @param {Object} options Additional options
  * @param {string} [options.url] Alternate way to pass the URL
  * @param {boolean} [options.type='object'] What data type to expect from the server. ENUM: 'object', 'array', 'raw'. If array and mappings are specified each member of the collection is mapped and an array returned
  * @param {function} [options.format] Data formatter, defaults to a simple passthrough. Called as `(output, session)`
  * @param {string|function} [options.formatError] Error thrown if the formatter fails, can be a string or function called as `(err)`. Defaults to 'Unable to format data feed from ${url} - ${err.toString()}`
  * @param {string} [options.from] The field from where to retrieve the value
  *
  * @param {Object <Object>} [options.mappings={}] Mappings to extract, each key is the mapping name with the value as an object containing the below spec
  * @param {boolean} [options.mappings.required=false] Whether the mapping is required
  *
  * @returns {Object} The extracted data object
  *
  * @example Fetch a simple collection
  * fetch('/api/datafeeds/random/users')
  *
  * @example Generate a random number as an object and return the extracted value as the promise response
  * fetch('/api/datafeeds/random/number?$extract=number', {mappings: {extract: {required: true}, format: d => d.extract}});
  *
  * @example Fetch a collection of items extracting both 'id' and 'title' fields
  * fetch('/api/datafeeds/random/users?$title=name&$id=_id', {mappings: {_id: {required: true}, title: {required: true}}})
  */


  $macgyver.utils.fetch = function (url, options) {
    return Promise.resolve() // Sanity checks {{{
    .then(function () {
      return $macgyver.$http || Promise.reject('No Axios compatible HTTP library - set $macgyver.$http to the library reference');
    }) // }}}
    // Injection options from URL {{{
    .then(function () {
      if (isPlainObject_1(url)) {
        var _ref2 = [url.url, url];
        url = _ref2[0];
        options = _ref2[1];
      } else {
        options.url = url;
      }

      if (!url) throw new Error('Unknown URL to fetch');
    }) // }}}
    // Create the initial session {{{
    .then(function () {
      return {
        mappings: {},
        // Parsed mappings (either a copy of settings.mappings || extracted from the URL)
        parsedUrl: new URL(url, window.location),
        settings: _objectSpread2({
          type: 'object',
          mappings: {},
          // Optional mappings the user provided
          format: function format(data, session) {
            return data;
          },
          formatError: function formatError(err) {
            return "Unable to format data feed from ".concat(url, " - ").concat(err.toString());
          }
        }, options)
      };
    }) // }}}
    // Extract mappings from the URL string {{{
    .then(function (session) {
      if (!isEmpty_1(options.mappings)) {
        // Mappings are specified in options
        session.mappings = options.mappings;
      } else {
        // Try to extract mappings if options doesn't already have a parsed set
        Array.from(session.parsedUrl.searchParams.entries()).forEach(function (pair) {
          var _pair = _slicedToArray(pair, 2),
              k = _pair[0],
              v = _pair[1];

          if (k.startsWith('$')) {
            session.mappings[k.substr(1)] = {
              required: false,
              from: v
            };
            session.parsedUrl.searchParams["delete"](k);
          }
        });
      }

      return session;
    }) // }}}
    // Make the request {{{
    .then(function (session) {
      return $macgyver.$http.get(session.parsedUrl.toString()).then(function (res) {
        return session.response = res;
      }).then(function () {
        return session;
      });
    }) // }}}
    // Apply object cohersion + mappings {{{
    .then(function (session) {
      switch (session.settings.type) {
        case 'array':
          if (!isArray_1(session.response.data)) throw "Expected an array from data feed \"".concat(url, "\" but got a non-array");

          if (!isEmpty_1(session.mappings)) {
            session.output = session.response.data.map(function (item, itemIndex) {
              return mapValues_1(session.mappings, function (v, k) {
                if (v.required && item[v.from] === undefined) throw new Error("Required field ".concat(v.from, " is not present in data feed for item #").concat(itemIndex + 1));
                return item[v.from];
              });
            });
          } else {
            session.output = session.response.data;
          }

          return session;

        case 'object':
          if (!isPlainObject_1(session.response.data)) throw "Expected object return from data feed \"".concat(url, "\" but got a non-plain-object");

          if (!isEmpty_1(session.mappings)) {
            session.output = mapValues_1(session.mappings, function (v, k) {
              if (v.required && session.response.data[k] === undefined) throw new Error("Required field ".concat(k, " is not present in data feed for item #").concat(itemIndex + 1));
              return session.response.data[v.from];
            });
          } else {
            session.output = session.response.data;
          }

          return session;

        case 'raw':
          session.output = session.response.data;
          return session;
      }
    }) // }}}
    // Apply formatter {{{
    .then(function (session) {
      try {
        return session.settings.format(session.output, session);
      } catch (err) {
        throw isString_1(session.settings.formatError) ? session.settings.formatError : session.settings.formatError(err);
      }
    }) // }}}
    ["catch"](function (err) {
      $macgyver.notify.error(err);
      throw err;
    })["finally"](function () {
      return $macgyver.notify.loading(url, false);
    });
  };
  /**
  * Attempt to parse a rough JS expression into a Sift / Mongo compatible expression
  * This makes future calls to $macgyver.utils.evalMatch() much quicker
  * TODO: This probably needs replacing / merging with [sift-shorthand](https://github.com/hash-bang/sift-shorthand) at some point
  * @param {Object|string} expression Input expression, if this is an object it is assumed to already be a sift expression and returned uneffected
  * @param {boolean} [asFunc=true] Return a Sift filtering function (the most efficient method), if falsy return the compiled object (useful for debugging)
  * @returns {Sift} Sift function for use with $macgyver.utils.evalMatch()
  */


  $macgyver.utils.evalCompile = function (expression) {
    var asFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var match;

    if (isFunction_1(expression)) {
      // Already compiled Sift function
      if (!asFunc) throw new Error('Cannot convert compiled Sift object back to an object - disable asFunc parameter');
      return expression;
    } else if (isPlainObject_1(expression)) {
      // An object but not as Sift function
      return asFunc ? createDefaultQueryTester(expression) : expression;
    } else if (isString_1(expression) && (match = _wrapRegExp(/^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*([\.0-9A-Z_a-z]+)([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*==?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*!=[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*<=?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*>=?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+\$lte?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+\$gte?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+)(.+)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, {
      left: 1,
      operand: 2,
      right: 3
    }).exec(expression))) {
      // Simple direct (in)equality e.g. `a == 1', `b != 'this'`
      match.groups.operand = match.groups.operand.trim();

      if (isFinite(match.groups.right)) {
        match.groups.right = +match.groups.right;
      } else if (/^(["']).*\1$/.test(match.groups.right)) {
        // Enclosed in " or '
        match.groups.right = match.groups.right.substr(1, match.groups.right.length - 2);
      } // Convert string to boolean


      if (isString_1(match.groups.right) && match.groups.right.toLowerCase() === 'true') match.groups.right = true;
      if (isString_1(match.groups.right) && match.groups.right.toLowerCase() === 'false') match.groups.right = false;
      var obj;

      if (['=', '==', '$eq'].includes(match.groups.operand)) {
        // Direct equality
        obj = _defineProperty({}, match.groups.left, match.groups.right);
      } else {
        var siftOperand = ['!=', '$ne'].includes(match.groups.operand) ? '$ne' : ['>', '$gt'].includes(match.groups.operand) ? '$gt' : ['<', '$lt'].includes(match.groups.operand) ? '$lt' : ['>=', '$gte'].includes(match.groups.operand) ? '$gte' : ['<=', '$lte'].includes(match.groups.operand) ? '$lte' : function (e) {
          throw e;
        }(new Error("Unknown operand \"".concat(match.groups.operand, "\" while parsing expression \"").concat(expression, "\"")));
        obj = _defineProperty({}, match.groups.left, _defineProperty({}, siftOperand, match.groups.right));
      }

      return asFunc ? createDefaultQueryTester(obj) : obj;
    } else {
      throw new Error("Error parsinng expression \"".concat(expression, "\", $macgyver.utils.evalCompile() can only process simple expressions for now, use Sift object syntax for more complex tests"));
    }
  };
  /**
  * Evaluate an expression and return if it matches the given environment
  * This function is used by the `showIf` parameter to determine field visibility
  * NOTE: Passing a string to this function is possible but its better to precompile the expression via $macgyver.utils.evalCompile() first so its quicker to process each time
  * @param {string|Object|Sift} expression String expression (which will be parsed), object (which will be parsed) or Sift object to filter by in asending order of efficiency
  * @param {Object} env Local environment to compare
  */


  $macgyver.utils.evalMatch = function (expression, env) {
    return [env].filter($macgyver.utils.evalCompile(expression)).length == 1;
  };
  /**
  * Set a dotted notation or array path to a set value
  * This function will correctly populate any missing entities, calling vm.$set on each traversal of the path
  * Passing undefined as a value removes the key (unless removeUndefined is set to false)
  * *
  * @param {Object} [target] The target to set the path of, if omitted the `vm` object is used as the base for traversal
  * @param {string|array} path The path to set within the target / vm
  * @param {*} value The value to set
  * @param {Object} [options] Additional options
  * @param {boolean} [options.arrayNumeric=true] Process numeric path segments as arrays
  * @param {boolean} [options.removeUndefined=true] If undefined is specified as a value the key is removed instead of being set
  * @param {boolean} [options.debug=false] Also print out debugging information when setting the value
  * @returns {Object} The set value, like $set()
  *
  * @example Set a deeply nested path within a target object
  * $macgyver.utils.setPath(this, 'foo.bar.baz', 123); // this.$data.foo.bar.baz = 123
  *
  * @example Set a deeply nested path, with arrays, assuming VM as the root node
  * $macgyver.utils.setPath('foo.1.bar', 123); // vm.$data.foo = [{bar: 123}]
  */


  $macgyver.utils.setPath = function (target, path, value, options) {
    // Argument mangling {{{
    if (isString_1(target) || isArray_1(target) || value === undefined) {
      // called as (path, value)
      var _ref3 = [_this, target, path, value];
      target = _ref3[0];
      path = _ref3[1];
      value = _ref3[2];
      options = _ref3[3];
    } else if (!isObject_1(target)) {
      throw new Error('Cannot use $setPath on non-object target');
    } // }}}


    var settings = _objectSpread2({
      arrayNumeric: true,
      debug: false,
      removeUndefined: true
    }, options);

    if (settings.debug) console.debug('[$setPath]', path, '=', value, {
      target: target,
      options: options
    });
    var node = target;
    if (!path) throw new Error('Cannot $setPath with undefined path');
    (isString_1(path) ? path.split('.') : path).some(function (chunk, chunkIndex, chunks) {
      if (chunkIndex == chunks.length - 1) {
        // Leaf node
        if (settings.removeUndefined && value === undefined) {
          $macgyver.utils.unset(node, chunk);
        } else {
          $macgyver.utils.set(node, chunk, value);
        }
      } else if (node[chunk] === undefined) {
        // This chunk (and all following chunks) does't exist - populate from here
        chunks.slice(chunkIndex).forEach(function (chunk) {
          if (settings.arrayNumeric && isFinite(chunk)) {
            $macgyver.utils.set(node, chunk, []);
          } else {
            $macgyver.utils.set(node, chunk, {});
          }

          node = node[chunk];
        });
        return true;
      } else {
        node = node[chunk];
        return false;
      }
    });
    return value;
  };
  /**
  * Mapping around Vue.set (if its available) or simple key/val setting
  * @param {Object} target The target object to mutate
  * @param {string} key The key to set
  * @param {*} val The value to set
  * @returns {*} The set value
  */


  $macgyver.utils.set = $macgyver.utils.global.Vue ? Vue.set : function (target, key, val) {
    return target[key] = val;
  };
  /**
  * Mapping around Vue.unset (if its available) or simple key delettion
  * @param {Object} target The target object to mutate
  * @param {string} key The key to remove
  */

  $macgyver.utils.unset = $macgyver.utils.global.Vue ? Vue.unset : function (target, key) {
    delete target[key];
  };
  /**
  * Provides a function to quickly get a data path on a Vue component by its path
  * This function is designed to work as simillaly as possible to _.get()
  * @param {Object} target The source object, usually the root controller
  * @param {string|array} path Either a path in dotted or array notation
  * @param {*} [fallback=undefined] Optional fallback to return if no value is found
  * @returns {*} Either the found value or the fallback
  */

  $macgyver.utils.getPath = function (target, path, fallback) {
    return get_1(target, path, fallback);
  };
  /**
  * Attempt to increment a string ID
  * This is usually used when we have a base ID and want to duplicate the widget
  * If ID is blank, blank is returned (assumes base parent also has no ID)
  * @param {string} str The string to increment
  * @returns {string} An incremented version of str
  */


  $macgyver.utils.incrementId = function (str) {
    if (!str) {
      return str;
    } else if (/[0-9]$/.test(str)) {
      // Ends in a number
      var extracted = _wrapRegExp(/^(.*)([0-9]+)$/, {
        prefix: 1,
        numeric: 2
      }).exec(str); // Extract numeric suffix


      return extracted.groups.prefix + (parseInt(extracted.groups.prefix) + 1);
    } else {
      // No idea - just append '2'
      return str + '2';
    }
  };

  /**
  * Main MacGyver "service" (acutally just a Vue prototype extension)
  * This service requires {$http, $toast} to be available on the prototype
  * @var {Object}
  */

  Vue$1.prototype.$macgyver = function () {
    var $macgyver$1 = $macgyver;
    /**
    * Generic fallback action handler
    * @var {function} Called as `(action, params...)`
    i*/

    $macgyver$1.$eval = function () {
      var _console;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_console = console).warn.apply(_console, ['Fallback $macgyver.$eval('].concat(args, [')']));
    }; // Absorb various methods from a Vue prototype


    var vInstance = new Vue$1();
    ['$on', '$off', '$once', '$emit'].forEach(function (method) {
      return $macgyver$1[method] = vInstance[method].bind(vInstance);
    }); // Auto-bind to Axios if its defined

    if ($macgyver$1.utils.global.axios) $macgyver$1.$http = $macgyver$1.utils.global.axios;

    Vue$1.mgComponent = function (name, component) {
      if (macgyver.widgets[name]) throw new Error("Cannot redeclare MacGyver component \"".concat(name, "\""));
      if (!name.startsWith('mg')) throw new Error("All MacGyver components must be prefixed with \"mg\", given \"".concat(name, "\""));
      macgyver.widgets[name] = _objectSpread2({}, component, {
        meta: _objectSpread2({
          id: _.camelCase(name),
          title: _.startCase(name),
          icon: 'far fa-rectangle-wide',
          category: 'Misc',
          preferId: false,
          shorthand: [],
          format: true,
          formatClass: ''
        }, component.meta)
      });

      var vueComponent = _objectSpread2({
        inject: component.inject || ['$mgForm'],
        // Defer to component injects or default to injecting $mgForm
        data: function data() {
          return _objectSpread2({
            data: undefined
          }, component.data ? component.data() : {});
        },
        props: _objectSpread2({
          $type: {
            type: String,
            "default": name
          },
          $dataPath: {
            type: String
          },
          $specPath: {
            type: String
          },
          // FIXME: Having a `change` property conflicts with event handlers called `change`.
          //change: {type: Function},
          value: {}
        }, _.mapValues(component.props || {}, function (prop) {
          // Rewrite MacGyver props into Vue compatible props
          var newProp = _objectSpread2({}, prop["default"] ? {
            "default": prop["default"]
          } : {}); // FIXME: This needs putting into each mgComponent declaration for Vue validation
          // Convert prop type to Vue native instances {{{


          if (prop.vueType) {
            var propType = _.chain(prop.vueType).castArray() // Splat into an array (even if its a simple string)
            .map(function (type) {
              // Map each item into the native type
              switch (type) {
                // String to type bindings (usually via vueType)
                case 'array':
                  return Array;

                case 'boolean':
                  return Boolean;

                case 'date':
                  return Date;

                case 'number':
                  return Number;

                case 'object':
                  return Object;

                case 'string':
                  return String;

                case 'any':
                  return;
                // Do not append type checking

                default:
                  console.warn("Unknown vueType JS primative \"".concat(type, "\" while declaring component \"").concat(name, "\" - assuming \"string\""));
                  return String;
              }
            }).filter().thru(function (v) {
              return v.length < 2 ? v[0] : v;
            }) // Flatten 1 item arrays into its native type
            .value();

            if (propType) newProp.type = propType; // Only allocate type if there is one (i.e. ignore 'any' types)
          } else {
            switch (prop.type) {
              case 'mgText':
              case 'mgChoiceButtons':
              case 'mgChoiceDropdown':
              case 'mgChoiceRadio':
              case 'mgChoiceTree':
              case 'mgCode':
              case 'mgColor':
              case 'mgEmail':
              case 'mgIcon':
              case 'mgQuery':
              case 'mgRestQuery':
              case 'mgTextArea':
              case 'mgUnknown':
              case 'mgUrl':
              case 'mgWysiwyg':
                newProp.type = String;
                break;

              case 'mgNumber':
                newProp.type = Number;
                break;

              case 'mgChoiceCheckbox':
              case 'mgToggle':
                newProp.type = Boolean;
                break;

              case 'mgChoiceList':
              case 'mgChoiceTags':
              case 'mgList':
              case 'mgTable':
                newProp.type = Array;
                break;

              case 'mgDate':
              case 'mgTime':
                newProp.type = Date;
                break;

              case Number:
              case String:
              case Array:
              case Date:
                console.warn('Used native binding in component prop (e.g. `{type: Array}`). Always use mg* component types so these components are editable in the mgFormEditor');
                newProp.type = prop.type; // Native Vue types

                break;

              default:
                console.warn("Unknown primative mapping of prop type \"".concat(prop.type, "\" while declaring component \"").concat(name, "\" - assuming \"String\""));
                newProp.type = String;
            }
          } // }}}


          return newProp;
        })),
        methods: _objectSpread2({
          mgSetup: function mgSetup() {
            var _this = this;

            // Setup event listners {{{
            this.$on('mgIdentify', function (reply) {
              return reply(_this);
            }); // }}}
            // Read in initial data value {{{

            var refresher = function refresher() {
              if (_this.$props.value) {
                // Standalone value
                _this.data = _.clone(_this.$props.value);
              } else if (_this.$props.$dataPath) {
                // Has a data path
                _this.data = _.get(_this.$mgForm.formData, _this.$props.$dataPath);
              } else if (_this.$props["default"]) {
                // Has a default
                _this.data = _.clone(_this.$props["default"]);
              }
            };

            this.$on('mgRefresh', refresher);
            this.$on('mgRefreshForm', refresher);
            refresher(); // }}}
            // Data watcher which transforms change operations into emitters to the nearest parent form {{{

            this.$watch('data', function (value) {
              // Emit `mgChange` to form element (if there is a parent form)
              if (_this.$mgForm && _this.$props.$dataPath) _this.$mgForm.$emit('mgChange', {
                path: _this.$props.$dataPath,
                value: value
              }); // Emit regular `change` event

              _this.$emit('change', value); // Is there a prop attached which monitors change?
              // FIXME: Having a `change` property conflicts with event handlers called `change`.
              //if (this.$props.change) this.$props.change(value);

            }); // }}}
          }
        }, component.methods),
        created: function created() {
          this.mgSetup();
          if (component.created) return component.created.call(this); // Call components own created() method if there is one
        }
      }, _.omit(component, [// Import remaining Vue properties that are not explicitly merged in above
      'inject', 'data', 'props', 'methods', 'created']));

      return Vue$1.component(name, vueComponent);
    };

    return $macgyver$1;
  }();

  var script = Vue$1.prototype.$macgyver;

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
      }
      // Vue.extend constructor export interop.
      const options = typeof script === 'function' ? script.options : script;
      // render functions
      if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true;
          // functional template
          if (isFunctionalTemplate) {
              options.functional = true;
          }
      }
      // scopedId
      if (scopeId) {
          options._scopeId = scopeId;
      }
      let hook;
      if (moduleIdentifier) {
          // server build
          hook = function (context) {
              // 2.3 injection
              context =
                  context || // cached call
                      (this.$vnode && this.$vnode.ssrContext) || // stateful
                      (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                  context = __VUE_SSR_CONTEXT__;
              }
              // inject component styles
              if (style) {
                  style.call(this, createInjectorSSR(context));
              }
              // register component module identifier for async chunk inference
              if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
              }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
      }
      else if (style) {
          hook = shadowMode
              ? function (context) {
                  style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
              }
              : function (context) {
                  style.call(this, createInjector(context));
              };
      }
      if (hook) {
          if (options.functional) {
              // register for functional component in vue file
              const originalRender = options.render;
              options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
              };
          }
          else {
              // inject component registration as beforeCreate hook
              const existing = options.beforeCreate;
              options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
      }
      return script;
  }

  /* script */
  const __vue_script__ = script;

  /* template */

    /* style */
    const __vue_inject_styles__ = undefined;
    /* scoped */
    const __vue_scope_id__ = undefined;
    /* module identifier */
    const __vue_module_identifier__ = undefined;
    /* functional template */
    const __vue_is_functional_template__ = undefined;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__ = normalizeComponent(
      {},
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      false,
      undefined,
      undefined,
      undefined
    );

  /**
  * Main MacGyver loader
  */
  window.macgyver = __vue_component__;
  Promise.resolve().then(function () { return emit; });
  Promise.resolve().then(function () { return setPath; });
  Promise.resolve().then(function () { return watchAll; }); // Import all MacGyver components
  // NOTE: These are defined as dynamic imports as we need window.macgyver to be a accessible

  Promise.resolve().then(function () { return mgAlert; });
  Promise.resolve().then(function () { return mgButton; });
  Promise.resolve().then(function () { return mgCheckBox; });
  Promise.resolve().then(function () { return mgChoiceButtons; });
  Promise.resolve().then(function () { return mgChoiceCheckbox; });
  Promise.resolve().then(function () { return mgChoiceDropdown; });
  Promise.resolve().then(function () { return mgChoiceList; });
  Promise.resolve().then(function () { return mgChoicePopup; }); // FIXME: Needs $prompt

  Promise.resolve().then(function () { return mgChoiceRadio; });
  Promise.resolve().then(function () { return mgChoiceTags; });
  Promise.resolve().then(function () { return mgChoiceTree; });
  Promise.resolve().then(function () { return mgCode; });
  Promise.resolve().then(function () { return mgColor; });
  Promise.resolve().then(function () { return mgComponent; });
  Promise.resolve().then(function () { return mgContainer; });
  Promise.resolve().then(function () { return mgDate; });
  Promise.resolve().then(function () { return mgEmail; });
  Promise.resolve().then(function () { return mgError; });
  Promise.resolve().then(function () { return mgFormEditor; });
  Promise.resolve().then(function () { return mgForm; }); //... import('./components/mgGridDashboard');

  Promise.resolve().then(function () { return mgGrid; });
  Promise.resolve().then(function () { return mgHeading; });
  Promise.resolve().then(function () { return mgHtml; });
  Promise.resolve().then(function () { return mgIcon; }); // Not in showcase

  Promise.resolve().then(function () { return mgInfoBlock; }); // Not in showcase
  //... import('./components/mgInfoChart');

  Promise.resolve().then(function () { return mgLabel; });
  Promise.resolve().then(function () { return mgList; });
  Promise.resolve().then(function () { return mgNumber; });
  Promise.resolve().then(function () { return mgPermissions; });
  Promise.resolve().then(function () { return mgPlaceholder; });
  Promise.resolve().then(function () { return mgQuery; });
  Promise.resolve().then(function () { return mgRestQuery; }); // FIXME: Needs $prompt

  Promise.resolve().then(function () { return mgSeperator; });
  Promise.resolve().then(function () { return mgTable; });
  Promise.resolve().then(function () { return mgTextArea; });
  Promise.resolve().then(function () { return mgText; });
  Promise.resolve().then(function () { return mgTime; });
  Promise.resolve().then(function () { return mgToggle; });
  Promise.resolve().then(function () { return mgUrl; });
  Promise.resolve().then(function () { return mgVideo; });
  Promise.resolve().then(function () { return mgWysiwyg; });

  var methods = {}; // Method's to glue onto vm.$emit

  /**
  * Extend the base Vue.prototype.$emit with Vue.prototype.$emit.broadcast()
  * This is effectively the same as an $emit.down from the root node
  * NOTE: This also broadcasts to app.vue
  * @param {string} msg The name of the event to emit
  * @param {*} [payload...] The payload of the event
  */

  methods.broadcast = function (msg) {
    var _app$vue$$emit, _app$vue$$emit$down;

    for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      payload[_key - 1] = arguments[_key];
    }

    (_app$vue$$emit = app.vue.$emit).call.apply(_app$vue$$emit, [app.vue, msg].concat(payload));

    (_app$vue$$emit$down = app.vue.$emit.down).call.apply(_app$vue$$emit$down, [app.vue, msg].concat(payload));
  };
  /**
  * Extend the base Vue.prototype.$emit with Vue.prototype.$emit.down() which recurses though all children emitting a message
  * NOTE: This does not include the current component level, only the children
  * @param {string} msg The name of the event to emit
  * @param {*} [payload...] The payload of the event
  */


  methods.down = function (msg) {
    for (var _len2 = arguments.length, payload = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      payload[_key2 - 1] = arguments[_key2];
    }

    this.$children.forEach(function (child) {
      var _child$$emit, _child$$emit$down;

      (_child$$emit = child.$emit).call.apply(_child$$emit, [child, msg].concat(payload));

      (_child$$emit$down = child.$emit.down).call.apply(_child$$emit$down, [child, msg].concat(payload));
    });
  };
  /**
  * Extend the base methods.$emit with Vue.prototype.$emit.up() which recurses though all parents emitting a message
  * NOTE: This does not include the current component level, only the parents
  * @param {string} msg The name of the event to emit
  * @param {*} [payload...] The payload of the event
  */


  methods.up = function (msg) {
    if (!this || !this.$parent) throw new Error('Unable to $emit.up() on non Vue component');
    var node = this;

    for (var _len3 = arguments.length, payload = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      payload[_key3 - 1] = arguments[_key3];
    }

    while (node.$parent) {
      var _node$$emit;

      node = node.$parent;

      (_node$$emit = node.$emit).call.apply(_node$$emit, [node, msg].concat(payload));
    }
  };
  /**
  * Extend the base Vue.prototype.$emit with promise support
  * Any function returning a promise will be waited on
  * NOTE: As of 2019-07-10 (Vue 2.6.10) it is not possible to glue this as vm.$emit.promise for some reason, maybe one day this will change
  * @param {string} msg The name of the event to emit
  * @param {*} [payload...] The payload of the event
  * @returns {Promise} A promise which will resolve with the Promise.all result of all listeners
  */


  methods.promise = function (msg) {
    for (var _len4 = arguments.length, payload = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      payload[_key4 - 1] = arguments[_key4];
    }

    var node = this;
    if (!node || !this._isVue) throw new Error('Unable to $emit.promise() on non Vue component');
    if (!node._events[msg] || !this._events[msg].length) return Promise.resolve(); // No listeners anyway

    return Promise.all(node._events[msg].map(function (e) {
      return Promise.resolve(e.apply(node, payload));
    })).then(function (responses) {
      return responses[0];
    });
  };
  /**
  * Return if anything is listening to a given event
  * This is useful if the event broadcast would involve some non-trivial processing and it would be beneficial to skip if nothing is listening anyway
  * @param {string} msg The name of the event to emit
  */


  methods.hasListeners = function (msg) {
    if (!this || !this.$parent) throw new Error('Unable to $emitHasSubscribers() on non Vue component');
    return this._events[msg] && this._events[msg].length > 0;
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      var _this = this;

      this.$emit = this.$emit.bind(this); // Rebind $emit to this vm so we get the right context
      // Long-winded version of _.mapValues() where we remap each method to a binding of this vm

      Object.assign(this.$emit, Object.fromEntries(Object.entries(methods).map(function (i) {
        return [i[0], i[1].bind(_this)];
      })));
    }
  });

  /* script */
  const __vue_script__$1 = methods;

  /* template */

    /* style */
    const __vue_inject_styles__$1 = undefined;
    /* scoped */
    const __vue_scope_id__$1 = undefined;
    /* module identifier */
    const __vue_module_identifier__$1 = undefined;
    /* functional template */
    const __vue_is_functional_template__$1 = undefined;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$1 = normalizeComponent(
      {},
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      false,
      undefined,
      undefined,
      undefined
    );

  var emit = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$1
  });

  /**
  * Set a dotted notation or array path to a set value
  * This function will correctly populate any missing entities, calling vm.$set on each traversal of the path
  * Passing undefined as a value removes the key (unless removeUndefined is set to false)
  *
  * @param {Object} [target] The target to set the path of, if omitted the `vm` object is used as the base for traversal 
  * @param {string|array} path The path to set within the target / vm
  * @param {*} value The value to set
  * @param {Object} [options] Additional options
  * @param {boolean} [options.arrayNumeric=true] Process numeric path segments as arrays
  * @param {boolean} [options.removeUndefined=true] If undefined is specified as a value the key is removed instead of being set
  * @param {boolean} [options.debug=false] Also print out debugging information when setting the value
  * @returns {Object} The set value, like $set()
  *
  * @example Set a deeply nested path within a target object
  * vm.$setPath(this, 'foo.bar.baz', 123); // this.$data.foo.bar.baz = 123
  *
  * @example Set a deeply nested path, with arrays, assuming VM as the root node
  * vm.$setPath('foo.1.bar', 123); // vm.$data.foo = [{bar: 123}]
  */
  var script$1 = Vue.prototype.$setPath = function (target, path, value, options) {
    var _this = this;

    // Argument mangling {{{
    if (_.isString(target) || _.isArray(target) || value === undefined) {
      // called as (path, value)
      var _ref = [this, target, path, value];
      target = _ref[0];
      path = _ref[1];
      value = _ref[2];
      options = _ref[3];
    } else if (!_.isObject(target)) {
      throw new Error('Cannot use $setPath on non-object target');
    } // }}}


    var settings = _objectSpread2({
      arrayNumeric: true,
      debug: false,
      removeUndefined: true
    }, options);

    if (settings.debug) console.log('[$setPath]', path, '=', value, {
      target: target,
      options: options
    });
    var node = target;
    if (!path) throw new Error('Cannot $setPath with undefined path');
    (_.isString(path) ? path.split('.') : path).some(function (chunk, chunkIndex, chunks) {
      if (chunkIndex == chunks.length - 1) {
        // Leaf node
        if (settings.removeUndefined && value === undefined) {
          _this.$unset(node, chunk);
        } else {
          _this.$set(node, chunk, value);
        }
      } else if (node[chunk] === undefined) {
        // This chunk (and all following chunks) does't exist - populate from here
        chunks.slice(chunkIndex).forEach(function (chunk) {
          if (settings.arrayNumeric && isFinite(chunk)) {
            _this.$set(node, chunk, []);
          } else {
            _this.$set(node, chunk, {});
          }

          node = node[chunk];
        });
        return true;
      } else {
        node = node[chunk];
        return false;
      }
    });
    return value;
  };

  /* script */
  const __vue_script__$2 = script$1;

  /* template */

    /* style */
    const __vue_inject_styles__$2 = undefined;
    /* scoped */
    const __vue_scope_id__$2 = undefined;
    /* module identifier */
    const __vue_module_identifier__$2 = undefined;
    /* functional template */
    const __vue_is_functional_template__$2 = undefined;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$2 = normalizeComponent(
      {},
      __vue_inject_styles__$2,
      __vue_script__$2,
      __vue_scope_id__$2,
      __vue_is_functional_template__$2,
      __vue_module_identifier__$2,
      false,
      undefined,
      undefined,
      undefined
    );

  var setPath = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$2
  });

  /**
  * Binds a simple vm.$watchAll([props...], handler) function into the prototype scope
  * This works similar to the Angular vm.$watch([...]) function
  * @param {array <string|array>} props Named properties within `vm` to watch, dotted notation or array notation is supported
  * @param {function} callback The callback to run when the watch triggers
  * @param {Object} [options] Additional options
  * @param {boolean} [options.immediate=false] Execute the callback immediately on register, needAll can cause the callback not to fire if all required paths are not available yet
  * @param {boolean} [options.needAll=false] Only fire the watcher when every single member listed has a non-undefined value
  * @param {boolean} [options.needAllLock=true] WHether, after seeing all paths, we ALWAYS route to the callback in future, even if the values become undefined. Set to falsy to always check for the paths presence
  * @param {boolean} [options.preventLoops=true] Assume that the watcher can effect a peer expression and that we should not keep retriggering this watch expression
  */
  var script$2 = Vue.prototype.$watchAll = function (props, callback, options) {
    var _arguments = arguments,
        _this = this;

    var settings = _objectSpread2({
      needAll: false,
      needAllLock: true,
      preventLoops: true,
      immediate: false
    }, options); // Remap handler based on the settings {{{


    var handler;

    if (settings.needAll) {
      // Remap handler with extra behaviour that checks all properties first
      var seenAll = false; // Whether at some point we have seen all values

      handler = function handler() {
        if (settings.needAllLock && seenAll) return callback.apply(_this, _arguments);
        if (settings.preventLoops && _this.$duringWatchAll) return; // Already updating

        if (settings.preventLoops) _this.$duringWatchAll = true;

        if (props.some(function (p) {
          return !_this.$hasPath(p);
        })) {
          // Not ready yet
          _this.$duringWatchAll = false;
          return;
        } else {
          seenAll = true;
        }

        callback.apply(_this, _arguments);
        if (settings.preventLoops) _this.$duringWatchAll = false;
      };
    } else {
      // No special treatment - just pass the callback
      handler = callback;
    } // }}}
    // Attach watcher to every named prop


    props.forEach(function (prop) {
      return _this.$watch(prop, handler.bind(null, prop));
    }); // Run handler immediately if needed

    if (settings.immediate) handler();
  };

  /* script */
  const __vue_script__$3 = script$2;

  /* template */

    /* style */
    const __vue_inject_styles__$3 = undefined;
    /* scoped */
    const __vue_scope_id__$3 = undefined;
    /* module identifier */
    const __vue_module_identifier__$3 = undefined;
    /* functional template */
    const __vue_is_functional_template__$3 = undefined;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$3 = normalizeComponent(
      {},
      __vue_inject_styles__$3,
      __vue_script__$3,
      __vue_scope_id__$3,
      __vue_is_functional_template__$3,
      __vue_module_identifier__$3,
      false,
      undefined,
      undefined,
      undefined
    );

  var watchAll = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$3
  });

  var script$3 = Vue.mgComponent('mgAlert', {
    meta: {
      title: 'Alert Box',
      icon: 'far fa-exclamation-triangle',
      category: 'General Decoration',
      preferId: false
    },
    props: {
      text: {
        type: 'mgText',
        "default": 'This is an alert!'
      },
      className: {
        type: 'mgChoiceButtons',
        "default": 'alert-info',
        iconSelected: 'fa fa-fw fa-check',
        iconDefault: 'fa fa-fw',
        "enum": [{
          id: 'alert alert-success',
          "class": 'btn-success'
        }, {
          id: 'alert alert-info',
          "class": 'btn-info'
        }, {
          id: 'alert alert-warning',
          "class": 'btn-warning'
        }, {
          id: 'alert alert-danger',
          "class": 'btn-danger'
        }]
      }
    }
  });

  /* script */
  const __vue_script__$4 = script$3;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { class: _vm.$props.className }, [
      _vm._v("\n\t" + _vm._s(_vm.data || _vm.$props.text) + "\n")
    ])
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    const __vue_inject_styles__$4 = undefined;
    /* scoped */
    const __vue_scope_id__$4 = undefined;
    /* module identifier */
    const __vue_module_identifier__$4 = undefined;
    /* functional template */
    const __vue_is_functional_template__$4 = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$4 = normalizeComponent(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__$4,
      __vue_script__$4,
      __vue_scope_id__$4,
      __vue_is_functional_template__$4,
      __vue_module_identifier__$4,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgAlert = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$4
  });

  var script$4 = Vue.mgComponent('mgButton', {
    meta: {
      title: 'Button',
      icon: 'far fa-mouse-pointer',
      category: 'Interaction',
      preferId: false
    },
    props: {
      text: {
        type: 'mgText'
      },
      icon: {
        type: 'mgIcon',
        "default": 'far fa-check'
      },
      tooltip: {
        type: 'mgText'
      },
      action: {
        type: 'mgText',
        vueType: 'any'
      },
      className: {
        type: 'mgText',
        advanced: true,
        "default": 'btn btn-light'
      }
    }
  });

  /* script */
  const __vue_script__$5 = script$4;

  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      {
        directives: [
          {
            name: "tooltip",
            rawName: "v-tooltip",
            value: _vm.$props.tooltip,
            expression: "$props.tooltip"
          }
        ],
        class: _vm.$props.className,
        on: {
          click: function($event) {
            return _vm.$mgForm.run(_vm.$props.action)
          }
        }
      },
      [
        _vm.$props.icon ? _c("i", { class: _vm.$props.icon }) : _vm._e(),
        _vm._v("\n\t" + _vm._s(_vm.$props.text) + "\n")
      ]
    )
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    const __vue_inject_styles__$5 = undefined;
    /* scoped */
    const __vue_scope_id__$5 = undefined;
    /* module identifier */
    const __vue_module_identifier__$5 = undefined;
    /* functional template */
    const __vue_is_functional_template__$5 = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$5 = normalizeComponent(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$5,
      __vue_script__$5,
      __vue_scope_id__$5,
      __vue_is_functional_template__$5,
      __vue_module_identifier__$5,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgButton = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$5
  });

  var script$5 = Vue.mgComponent('mgCheckBox', {
    meta: {
      title: 'Check Box',
      icon: 'far fa-check-square',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        return v ? 'Yes' : 'No';
      },
      formatClass: 'text-center'
    }
  });

  /* script */
  const __vue_script__$6 = script$5;

  /* template */
  var __vue_render__$2 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "text-center" }, [
      _c("input", {
        directives: [
          {
            name: "model",
            rawName: "v-model",
            value: _vm.data,
            expression: "data"
          }
        ],
        attrs: { type: "checkbox" },
        domProps: {
          checked: Array.isArray(_vm.data)
            ? _vm._i(_vm.data, null) > -1
            : _vm.data
        },
        on: {
          change: function($event) {
            var $$a = _vm.data,
              $$el = $event.target,
              $$c = $$el.checked ? true : false;
            if (Array.isArray($$a)) {
              var $$v = null,
                $$i = _vm._i($$a, $$v);
              if ($$el.checked) {
                $$i < 0 && (_vm.data = $$a.concat([$$v]));
              } else {
                $$i > -1 &&
                  (_vm.data = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
              }
            } else {
              _vm.data = $$c;
            }
          }
        }
      })
    ])
  };
  var __vue_staticRenderFns__$2 = [];
  __vue_render__$2._withStripped = true;

    /* style */
    const __vue_inject_styles__$6 = undefined;
    /* scoped */
    const __vue_scope_id__$6 = undefined;
    /* module identifier */
    const __vue_module_identifier__$6 = undefined;
    /* functional template */
    const __vue_is_functional_template__$6 = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$6 = normalizeComponent(
      { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
      __vue_inject_styles__$6,
      __vue_script__$6,
      __vue_scope_id__$6,
      __vue_is_functional_template__$6,
      __vue_module_identifier__$6,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgCheckBox = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$6
  });

  var script$6 = Vue.mgComponent('mgChoiceButtons', {
    meta: {
      title: 'Choice Buttons',
      icon: 'fas fa-ellipsis-h',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        items: [{
          id: 'id',
          title: 'ID'
        }, {
          id: 'title',
          title: 'Title'
        }, {
          id: 'tooltip',
          title: 'Tooltip'
        }, {
          id: 'icon',
          title: 'Icon',
          type: 'mgIcon'
        }, {
          id: 'class',
          title: 'Classes'
        }, {
          id: 'classActive',
          title: 'Active Class'
        }, {
          id: 'classInactive',
          title: 'Inactive Class'
        } // Implied: {id: 'action', title: 'Action on select', type: 'function'},
        ]
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      classWrapper: {
        type: 'mgText',
        "default": 'btn-group',
        title: 'Group CSS class',
        advanced: true
      },
      itemClassActive: {
        type: 'mgText',
        "default": 'btn btn-primary',
        advanced: true
      },
      itemClassInactive: {
        type: 'mgText',
        "default": 'btn btn-light',
        advanced: true
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      select: function select(item) {
        this.data = item.id;
        if (item.action) this.$mgForm.run(item.action);
      }
    },
    watch: {
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (_.isArray(this.$props["enum"]) && _.isString(this.$props["enum"][0])) {
            // Array of strings
            this.enumIter = this.$props["enum"].map(function (i) {
              return {
                id: _.camelCase(i),
                title: i
              };
            });
          } else if (_.isArray(this.$props["enum"]) && _.isObject(this.$props["enum"][0])) {
            // Collection
            this.enumIter = this.$props["enum"];
          }
        }
      }
    }
  });

  const isOldIE = typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  function createInjector(context) {
      return (id, style) => addStyle(id, style);
  }
  let HEAD;
  const styles = {};
  function addStyle(id, css) {
      const group = isOldIE ? css.media || 'default' : id;
      const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
      if (!style.ids.has(id)) {
          style.ids.add(id);
          let code = css.source;
          if (css.map) {
              // https://developer.chrome.com/devtools/docs/javascript-debugging
              // this makes source maps inside style tags work properly in Chrome
              code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
              // http://stackoverflow.com/a/26603875
              code +=
                  '\n/*# sourceMappingURL=data:application/json;base64,' +
                      btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                      ' */';
          }
          if (!style.element) {
              style.element = document.createElement('style');
              style.element.type = 'text/css';
              if (css.media)
                  style.element.setAttribute('media', css.media);
              if (HEAD === undefined) {
                  HEAD = document.head || document.getElementsByTagName('head')[0];
              }
              HEAD.appendChild(style.element);
          }
          if ('styleSheet' in style.element) {
              style.styles.push(code);
              style.element.styleSheet.cssText = style.styles
                  .filter(Boolean)
                  .join('\n');
          }
          else {
              const index = style.ids.size - 1;
              const textNode = document.createTextNode(code);
              const nodes = style.element.childNodes;
              if (nodes[index])
                  style.element.removeChild(nodes[index]);
              if (nodes.length)
                  style.element.insertBefore(textNode, nodes[index]);
              else
                  style.element.appendChild(textNode);
          }
      }
  }

  /* script */
  const __vue_script__$7 = script$6;

  /* template */
  var __vue_render__$3 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-choice-buttons", class: _vm.$props.classWrapper },
      _vm._l(_vm.enumIter, function(item) {
        return _c(
          "a",
          {
            directives: [
              {
                name: "tooltip",
                rawName: "v-tooltip",
                value: item.tooltip,
                expression: "item.tooltip"
              }
            ],
            key: item.id,
            class:
              item.id && _vm.data == item.id
                ? item.classActive || item.class || _vm.$props.itemClassActive
                : item.classInactive ||
                  item.class ||
                  _vm.$props.itemClassInactive,
            on: {
              click: function($event) {
                return _vm.select(item)
              }
            }
          },
          [
            item.icon ? _c("i", { class: item.icon }) : _vm._e(),
            _vm._v("\n\t\t" + _vm._s(item.title) + "\n\t")
          ]
        )
      }),
      0
    )
  };
  var __vue_staticRenderFns__$3 = [];
  __vue_render__$3._withStripped = true;

    /* style */
    const __vue_inject_styles__$7 = function (inject) {
      if (!inject) return
      inject("data-v-2f2f544d_0", { source: "\n.fa-invisible:before {\n\tcontent: \"\\f111\";\n\tvisibility: hidden;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgChoiceButtons.vue"],"names":[],"mappings":";AA4EA;CACA,gBAAA;CACA,kBAAA;AACA","file":"mgChoiceButtons.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgChoiceButtons', {\n\tmeta: {\n\t\ttitle: 'Choice Buttons',\n\t\ticon: 'fas fa-ellipsis-h',\n\t\tcategory: 'Choice Selectors',\n\t\tpreferId: true,\n\t},\n\tdata() { return {\n\t\tenumIter: [],\n\t}},\n\tprops: {\n\t\tenum: {\n\t\t\ttype: 'mgTable',\n\t\t\ttitle: 'List items',\n\t\t\titems: [\n\t\t\t\t{id: 'id', title: 'ID'},\n\t\t\t\t{id: 'title', title: 'Title'},\n\t\t\t\t{id: 'tooltip', title: 'Tooltip'},\n\t\t\t\t{id: 'icon', title: 'Icon', type: 'mgIcon'},\n\t\t\t\t{id: 'class', title: 'Classes'},\n\t\t\t\t{id: 'classActive', title: 'Active Class'},\n\t\t\t\t{id: 'classInactive', title: 'Inactive Class'},\n\t\t\t\t// Implied: {id: 'action', title: 'Action on select', type: 'function'},\n\t\t\t],\n\t\t},\n\t\trequired: {type: 'mgToggle', default: false, help: 'One choice must be selected'},\n\t\tclassWrapper: {type: 'mgText', default: 'btn-group', title: 'Group CSS class', advanced: true},\n\t\titemClassActive: {type: 'mgText', default: 'btn btn-primary', advanced: true},\n\t\titemClassInactive: {type: 'mgText', default: 'btn btn-light', advanced: true},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\t},\n\tmethods: {\n\t\tselect(item) {\n\t\t\tthis.data = item.id;\n\t\t\tif (item.action) this.$mgForm.run(item.action);\n\t\t},\n\t},\n\twatch: {\n\t\t'$props.enum': {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tif (_.isArray(this.$props.enum) && _.isString(this.$props.enum[0])) { // Array of strings\n\t\t\t\t\tthis.enumIter = this.$props.enum.map(i => ({id: _.camelCase(i), title: i}));\n\t\t\t\t} else if (_.isArray(this.$props.enum) && _.isObject(this.$props.enum[0])) { // Collection\n\t\t\t\t\tthis.enumIter = this.$props.enum;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-choice-buttons\" :class=\"$props.classWrapper\">\n\t\t<a\n\t\t\tv-for=\"item in enumIter\"\n\t\t\t:key=\"item.id\"\n\t\t\t:class=\"item.id && data == item.id\n\t\t\t\t? item.classActive || item.class || $props.itemClassActive\n\t\t\t\t: item.classInactive || item.class || $props.itemClassInactive\n\t\t\t\"\n\t\t\tv-tooltip=\"item.tooltip\"\n\t\t\t@click=\"select(item)\"\n\t\t>\n\t\t\t<i v-if=\"item.icon\" :class=\"item.icon\"/>\n\t\t\t{{item.title}}\n\t\t</a>\n\t</div>\n</template>\n\n<style>\n.fa-invisible:before {\n\tcontent: \"\\f111\";\n\tvisibility: hidden;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$7 = undefined;
    /* module identifier */
    const __vue_module_identifier__$7 = undefined;
    /* functional template */
    const __vue_is_functional_template__$7 = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$7 = normalizeComponent(
      { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
      __vue_inject_styles__$7,
      __vue_script__$7,
      __vue_scope_id__$7,
      __vue_is_functional_template__$7,
      __vue_module_identifier__$7,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgChoiceButtons = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$7
  });

  var script$7 = Vue.mgComponent('mgChoiceCheckbox', {
    meta: {
      title: 'Checkbox multiple-choice',
      icon: 'far fa-list',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgList',
        title: 'List items',
        "enum": {
          type: 'mgTable',
          title: 'List items',
          items: [{
            id: 'id',
            title: 'ID'
          }, {
            id: 'title',
            title: 'Title'
          }, {
            id: 'tooltip',
            title: 'Tooltip'
          }]
        }
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      sort: {
        type: 'mgChoiceRadio',
        "default": 'addOrder',
        advanced: true,
        help: 'Sort newly ticked items into their correct position',
        "enum": [{
          id: 'addOrder',
          title: 'No sorting'
        }, {
          id: 'sortId',
          title: 'Sort by item ID'
        }, {
          id: 'sortTitle',
          title: 'Sort by title'
        }]
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
      if (!_.isArray(this.data)) this.data = [];
    },
    methods: {
      change: function change(id) {
        var _this2 = this;

        if (!this.data) this.data = [];

        if (this.data.some(function (i) {
          return i == id;
        })) {
          // Checked
          this.data = this.data.filter(function (i) {
            return i != id;
          });
        } else {
          this.data.push(id);

          if (this.$props.sort == 'sortId') {
            this.data.sort();
          } else if (this.$props.sort == 'sortTitle') {
            this.data = _.sortBy(this.data, function (i) {
              return _this2["enum"].find(function (e) {
                return e.id == i;
              });
            });
          }
        }
      }
    },
    watch: {
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (_.isArray(this.$props["enum"]) && _.isString(this.$props["enum"][0])) {
            // Array of strings
            this.enumIter = this.$props["enum"].map(function (i) {
              return {
                id: _.camelCase(i),
                title: i
              };
            });
          } else if (_.isArray(this.$props["enum"]) && _.isObject(this.$props["enum"][0])) {
            // Collection
            this.enumIter = this.$props["enum"];
          }
        }
      }
    }
  });

  /* script */
  const __vue_script__$8 = script$7;

  /* template */
  var __vue_render__$4 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      _vm._l(_vm.enumIter, function(item) {
        return _c("div", { key: item.id, staticClass: "form-check" }, [
          _c("input", {
            attrs: {
              type: "checkbox",
              id: "mg-choice-checkbox-" + _vm.$props.id + "-" + item.id
            },
            domProps: { checked: _vm.data.includes(item.id) },
            on: {
              change: function($event) {
                return _vm.change(item.id)
              }
            }
          }),
          _vm._v(" "),
          _c(
            "label",
            {
              staticClass: "form-check-label",
              attrs: {
                for: "mg-choice-checkbox-" + _vm.$props.id + "-" + item.id
              }
            },
            [_vm._v("\n\t\t\t" + _vm._s(item.title) + "\n\t\t")]
          )
        ])
      }),
      0
    )
  };
  var __vue_staticRenderFns__$4 = [];
  __vue_render__$4._withStripped = true;

    /* style */
    const __vue_inject_styles__$8 = undefined;
    /* scoped */
    const __vue_scope_id__$8 = undefined;
    /* module identifier */
    const __vue_module_identifier__$8 = undefined;
    /* functional template */
    const __vue_is_functional_template__$8 = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$8 = normalizeComponent(
      { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
      __vue_inject_styles__$8,
      __vue_script__$8,
      __vue_scope_id__$8,
      __vue_is_functional_template__$8,
      __vue_module_identifier__$8,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgChoiceCheckbox = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$8
  });

  var vueSelect = createCommonjsModule(function (module, exports) {
  !function(t,e){module.exports=e();}("undefined"!=typeof self?self:commonjsGlobal,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o});},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=8)}([function(t,e){function n(t){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(e){return "function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=o=function(t){return n(t)}:t.exports=o=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},o(e)}t.exports=o;},function(t,e,n){},function(t,e,n){var o=n(4),i=n(5),r=n(6);t.exports=function(t){return o(t)||i(t)||r()};},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t};},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}};},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)};},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")};},function(t,e,n){var o=n(1);n.n(o).a;},function(t,e,n){n.r(e);var o=n(2),i=n.n(o),r=n(0),s=n.n(r),a=n(3),l=n.n(a),u={watch:{typeAheadPointer:function(){this.maybeAdjustScroll();}},methods:{maybeAdjustScroll:function(){var t=this.pixelsToPointerTop(),e=this.pixelsToPointerBottom();return t<=this.viewport().top?this.scrollTo(t):e>=this.viewport().bottom?this.scrollTo(this.viewport().top+this.pointerHeight()):void 0},pixelsToPointerTop:function(){var t=0;if(this.$refs.dropdownMenu)for(var e=0;e<this.typeAheadPointer;e++)t+=this.$refs.dropdownMenu.children[e].offsetHeight;return t},pixelsToPointerBottom:function(){return this.pixelsToPointerTop()+this.pointerHeight()},pointerHeight:function(){var t=!!this.$refs.dropdownMenu&&this.$refs.dropdownMenu.children[this.typeAheadPointer];return t?t.offsetHeight:0},viewport:function(){return {top:this.$refs.dropdownMenu?this.$refs.dropdownMenu.scrollTop:0,bottom:this.$refs.dropdownMenu?this.$refs.dropdownMenu.offsetHeight+this.$refs.dropdownMenu.scrollTop:0}},scrollTo:function(t){return this.$refs.dropdownMenu?this.$refs.dropdownMenu.scrollTop=t:null}}},c={data:function(){return {typeAheadPointer:-1}},watch:{filteredOptions:function(){for(var t=0;t<this.filteredOptions.length;t++)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t;break}}},methods:{typeAheadUp:function(){for(var t=this.typeAheadPointer-1;t>=0;t--)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t,this.maybeAdjustScroll&&this.maybeAdjustScroll();break}},typeAheadDown:function(){for(var t=this.typeAheadPointer+1;t<this.filteredOptions.length;t++)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t,this.maybeAdjustScroll&&this.maybeAdjustScroll();break}},typeAheadSelect:function(){this.filteredOptions[this.typeAheadPointer]?this.select(this.filteredOptions[this.typeAheadPointer]):this.taggable&&this.search.length&&this.select(this.search),this.clearSearchOnSelect&&(this.search="");}}},p={props:{loading:{type:Boolean,default:!1}},data:function(){return {mutableLoading:!1}},watch:{search:function(){this.$emit("search",this.search,this.toggleLoading);},loading:function(t){this.mutableLoading=t;}},methods:{toggleLoading:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.mutableLoading=null==t?!this.mutableLoading:t}}};function h(t,e,n,o,i,r,s,a){var l,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),o&&(u.functional=!0),r&&(u._scopeId="data-v-"+r),s?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(s);},u._ssrRegister=l):i&&(l=a?function(){i.call(this,this.$root.$options.shadowRoot);}:i),l)if(u.functional){u._injectStyles=l;var c=u.render;u.render=function(t,e){return l.call(e),c(t,e)};}else{var p=u.beforeCreate;u.beforeCreate=p?[].concat(p,l):[l];}return {exports:t,options:u}}var d={Deselect:h({},function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"10",height:"10"}},[e("path",{attrs:{d:"M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z"}})])},[],!1,null,null,null).exports,OpenIndicator:h({},function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"10"}},[e("path",{attrs:{d:"M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z"}})])},[],!1,null,null,null).exports};function f(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,o);}return n}function y(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?f(n,!0).forEach(function(e){l()(t,e,n[e]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):f(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e));});}return t}var b={components:y({},d),mixins:[u,c,p],props:{value:{},components:{type:Object,default:function(){return {}}},options:{type:Array,default:function(){return []}},disabled:{type:Boolean,default:!1},clearable:{type:Boolean,default:!0},searchable:{type:Boolean,default:!0},multiple:{type:Boolean,default:!1},placeholder:{type:String,default:""},transition:{type:String,default:"vs__fade"},clearSearchOnSelect:{type:Boolean,default:!0},closeOnSelect:{type:Boolean,default:!0},label:{type:String,default:"label"},autocomplete:{type:String,default:"off"},reduce:{type:Function,default:function(t){return t}},selectable:{type:Function,default:function(t){return !0}},getOptionLabel:{type:Function,default:function(t){return "object"===s()(t)?t.hasOwnProperty(this.label)?t[this.label]:console.warn('[vue-select warn]: Label key "option.'.concat(this.label,'" does not')+" exist in options object ".concat(JSON.stringify(t),".\n")+"https://vue-select.org/api/props.html#getoptionlabel"):t}},getOptionKey:{type:Function,default:function(t){if("object"===s()(t)&&t.id)return t.id;try{return JSON.stringify(t)}catch(t){return console.warn("[vue-select warn]: Could not stringify option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.\nhttps://vue-select.org/api/props.html#getoptionkey")}}},onTab:{type:Function,default:function(){this.selectOnTab&&!this.isComposing&&this.typeAheadSelect();}},taggable:{type:Boolean,default:!1},tabindex:{type:Number,default:null},pushTags:{type:Boolean,default:!1},filterable:{type:Boolean,default:!0},filterBy:{type:Function,default:function(t,e,n){return (e||"").toLowerCase().indexOf(n.toLowerCase())>-1}},filter:{type:Function,default:function(t,e){var n=this;return t.filter(function(t){var o=n.getOptionLabel(t);return "number"==typeof o&&(o=o.toString()),n.filterBy(t,o,e)})}},createOption:{type:Function,default:function(t){return "object"===s()(this.optionList[0])?l()({},this.label,t):t}},resetOnOptionsChange:{default:!1,validator:function(t){return ["function","boolean"].includes(s()(t))}},noDrop:{type:Boolean,default:!1},inputId:{type:String},dir:{type:String,default:"auto"},selectOnTab:{type:Boolean,default:!1},selectOnKeyCodes:{type:Array,default:function(){return [13]}},searchInputQuerySelector:{type:String,default:"[type=search]"},mapKeydown:{type:Function,default:function(t,e){return t}}},data:function(){return {search:"",open:!1,isComposing:!1,pushedTags:[],_value:[]}},watch:{options:function(t,e){var n=this;!this.taggable&&("function"==typeof n.resetOnOptionsChange?n.resetOnOptionsChange(t,e,n.selectedValue):n.resetOnOptionsChange)&&this.clearSelection(),this.value&&this.isTrackingValues&&this.setInternalValueFromOptions(this.value);},value:function(t){this.isTrackingValues&&this.setInternalValueFromOptions(t);},multiple:function(){this.clearSelection();}},created:function(){this.mutableLoading=this.loading,void 0!==this.value&&this.isTrackingValues&&this.setInternalValueFromOptions(this.value),this.$on("option:created",this.maybePushTag);},methods:{setInternalValueFromOptions:function(t){var e=this;Array.isArray(t)?this.$data._value=t.map(function(t){return e.findOptionFromReducedValue(t)}):this.$data._value=this.findOptionFromReducedValue(t);},select:function(t){this.isOptionSelected(t)||(this.taggable&&!this.optionExists(t)&&(t=this.createOption(t),this.$emit("option:created",t)),this.multiple&&(t=this.selectedValue.concat(t)),this.updateValue(t)),this.onAfterSelect(t);},deselect:function(t){var e=this;this.updateValue(this.selectedValue.filter(function(n){return !e.optionComparator(n,t)}));},clearSelection:function(){this.updateValue(this.multiple?[]:null);},onAfterSelect:function(t){this.closeOnSelect&&(this.open=!this.open,this.searchEl.blur()),this.clearSearchOnSelect&&(this.search="");},updateValue:function(t){var e=this;this.isTrackingValues&&(this.$data._value=t),null!==t&&(t=Array.isArray(t)?t.map(function(t){return e.reduce(t)}):this.reduce(t)),this.$emit("input",t);},toggleDropdown:function(t){var e=t.target;[].concat(i()(this.$refs.deselectButtons||[]),i()([this.$refs.clearButton]||!1)).some(function(t){return t.contains(e)||t===e})||(this.open?this.searchEl.blur():this.disabled||(this.open=!0,this.searchEl.focus()));},isOptionSelected:function(t){var e=this;return this.selectedValue.some(function(n){return e.optionComparator(n,t)})},optionComparator:function(t,e){if("object"!==s()(t)&&"object"!==s()(e)){if(t===e)return !0}else{if(t===this.reduce(e))return !0;if(this.getOptionLabel(t)===this.getOptionLabel(e)||this.getOptionLabel(t)===e)return !0;if(this.reduce(t)===this.reduce(e))return !0}return !1},findOptionFromReducedValue:function(t){var e=this;return this.options.find(function(n){return JSON.stringify(e.reduce(n))===JSON.stringify(t)})||t},closeSearchOptions:function(){this.open=!1,this.$emit("search:blur");},maybeDeleteValue:function(){if(!this.searchEl.value.length&&this.selectedValue&&this.clearable){var t=null;this.multiple&&(t=i()(this.selectedValue.slice(0,this.selectedValue.length-1))),this.updateValue(t);}},optionExists:function(t){var e=this;return this.optionList.some(function(n){return "object"===s()(n)&&e.getOptionLabel(n)===t||n===t})},normalizeOptionForSlot:function(t){return "object"===s()(t)?t:l()({},this.label,t)},maybePushTag:function(t){this.pushTags&&this.pushedTags.push(t);},onEscape:function(){this.search.length?this.search="":this.searchEl.blur();},onSearchBlur:function(){if(!this.mousedown||this.searching)return this.clearSearchOnBlur&&(this.search=""),void this.closeSearchOptions();this.mousedown=!1,0!==this.search.length||0!==this.options.length||this.closeSearchOptions();},onSearchFocus:function(){this.open=!0,this.$emit("search:focus");},onMousedown:function(){this.mousedown=!0;},onMouseUp:function(){this.mousedown=!1;},onSearchKeyDown:function(t){var e=this,n=function(t){return t.preventDefault(),!e.isComposing&&e.typeAheadSelect()},o={8:function(t){return e.maybeDeleteValue()},9:function(t){return e.onTab()},27:function(t){return e.onEscape()},38:function(t){return t.preventDefault(),e.typeAheadUp()},40:function(t){return t.preventDefault(),e.typeAheadDown()}};this.selectOnKeyCodes.forEach(function(t){return o[t]=n});var i=this.mapKeydown(o,this);if("function"==typeof i[t.keyCode])return i[t.keyCode](t)}},computed:{isTrackingValues:function(){return void 0===this.value||this.$options.propsData.hasOwnProperty("reduce")},selectedValue:function(){var t=this.value;return this.isTrackingValues&&(t=this.$data._value),t?[].concat(t):[]},optionList:function(){return this.options.concat(this.pushedTags)},searchEl:function(){return this.$scopedSlots.search?this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector):this.$refs.search},scope:function(){var t=this;return {search:{attributes:{disabled:this.disabled,placeholder:this.searchPlaceholder,tabindex:this.tabindex,readonly:!this.searchable,id:this.inputId,"aria-expanded":this.dropdownOpen,"aria-label":"Search for option",ref:"search",role:"combobox",type:"search",autocomplete:"off",value:this.search},events:{compositionstart:function(){return t.isComposing=!0},compositionend:function(){return t.isComposing=!1},keydown:this.onSearchKeyDown,blur:this.onSearchBlur,focus:this.onSearchFocus,input:function(e){return t.search=e.target.value}}},spinner:{loading:this.mutableLoading},openIndicator:{attributes:{ref:"openIndicator",role:"presentation",class:"vs__open-indicator"}}}},childComponents:function(){return y({},d,{},this.components)},stateClasses:function(){return {"vs--open":this.dropdownOpen,"vs--single":!this.multiple,"vs--searching":this.searching&&!this.noDrop,"vs--searchable":this.searchable&&!this.noDrop,"vs--unsearchable":!this.searchable,"vs--loading":this.mutableLoading,"vs--disabled":this.disabled}},clearSearchOnBlur:function(){return this.clearSearchOnSelect&&!this.multiple},searching:function(){return !!this.search},dropdownOpen:function(){return !this.noDrop&&(this.open&&!this.mutableLoading)},searchPlaceholder:function(){if(this.isValueEmpty&&this.placeholder)return this.placeholder},filteredOptions:function(){var t=[].concat(this.optionList);if(!this.filterable&&!this.taggable)return t;var e=this.search.length?this.filter(t,this.search,this):t;return this.taggable&&this.search.length&&!this.optionExists(this.search)&&e.unshift(this.search),e},isValueEmpty:function(){return 0===this.selectedValue.length},showClearButton:function(){return !this.multiple&&this.clearable&&!this.open&&!this.isValueEmpty}}},g=(n(7),h(b,function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"v-select",class:t.stateClasses,attrs:{dir:t.dir}},[n("div",{ref:"toggle",staticClass:"vs__dropdown-toggle",on:{mousedown:function(e){return e.preventDefault(),t.toggleDropdown(e)}}},[n("div",{ref:"selectedOptions",staticClass:"vs__selected-options"},[t._l(t.selectedValue,function(e){return t._t("selected-option-container",[n("span",{key:t.getOptionKey(e),staticClass:"vs__selected"},[t._t("selected-option",[t._v("\n            "+t._s(t.getOptionLabel(e))+"\n          ")],null,t.normalizeOptionForSlot(e)),t._v(" "),t.multiple?n("button",{ref:"deselectButtons",refInFor:!0,staticClass:"vs__deselect",attrs:{disabled:t.disabled,type:"button","aria-label":"Deselect option"},on:{click:function(n){return t.deselect(e)}}},[n(t.childComponents.Deselect,{tag:"component"})],1):t._e()],2)],{option:t.normalizeOptionForSlot(e),deselect:t.deselect,multiple:t.multiple,disabled:t.disabled})}),t._v(" "),t._t("search",[n("input",t._g(t._b({staticClass:"vs__search"},"input",t.scope.search.attributes,!1),t.scope.search.events))],null,t.scope.search)],2),t._v(" "),n("div",{ref:"actions",staticClass:"vs__actions"},[n("button",{directives:[{name:"show",rawName:"v-show",value:t.showClearButton,expression:"showClearButton"}],ref:"clearButton",staticClass:"vs__clear",attrs:{disabled:t.disabled,type:"button",title:"Clear selection"},on:{click:t.clearSelection}},[n(t.childComponents.Deselect,{tag:"component"})],1),t._v(" "),t._t("open-indicator",[t.noDrop?t._e():n(t.childComponents.OpenIndicator,t._b({tag:"component"},"component",t.scope.openIndicator.attributes,!1))],null,t.scope.openIndicator),t._v(" "),t._t("spinner",[n("div",{directives:[{name:"show",rawName:"v-show",value:t.mutableLoading,expression:"mutableLoading"}],staticClass:"vs__spinner"},[t._v("Loading...")])],null,t.scope.spinner)],2)]),t._v(" "),n("transition",{attrs:{name:t.transition}},[t.dropdownOpen?n("ul",{ref:"dropdownMenu",staticClass:"vs__dropdown-menu",attrs:{role:"listbox"},on:{mousedown:function(e){return e.preventDefault(),t.onMousedown(e)},mouseup:t.onMouseUp}},[t._l(t.filteredOptions,function(e,o){return n("li",{key:t.getOptionKey(e),staticClass:"vs__dropdown-option",class:{"vs__dropdown-option--selected":t.isOptionSelected(e),"vs__dropdown-option--highlight":o===t.typeAheadPointer,"vs__dropdown-option--disabled":!t.selectable(e)},attrs:{role:"option"},on:{mouseover:function(n){t.selectable(e)&&(t.typeAheadPointer=o);},mousedown:function(n){n.preventDefault(),n.stopPropagation(),t.selectable(e)&&t.select(e);}}},[t._t("option",[t._v("\n          "+t._s(t.getOptionLabel(e))+"\n        ")],null,t.normalizeOptionForSlot(e))],2)}),t._v(" "),t.filteredOptions.length?t._e():n("li",{staticClass:"vs__no-options",on:{mousedown:function(t){t.stopPropagation();}}},[t._t("no-options",[t._v("Sorry, no matching options.")])],2)],2):t._e()])],1)},[],!1,null,null,null).exports),m={ajax:p,pointer:c,pointerScroll:u};n.d(e,"VueSelect",function(){return g}),n.d(e,"mixins",function(){return m});e.default=g;}])});

  });

  var VueSelect = unwrapExports(vueSelect);
  var vueSelect_1 = vueSelect.VueSelect;

  var _enumSource;
  Vue.component('v-select', VueSelect);
  var script$8 = Vue.mgComponent('mgChoiceDropdown', {
    meta: {
      title: 'Dropdown multiple-choice',
      icon: 'far fa-chevron-circle-down',
      category: 'Choice Selectors',
      preferId: true,
      shorthand: ['choice', 'choose', 'dropdown', 'pick']
    },
    data: function data() {
      return {
        selected: [],
        enumIter: []
      };
    },
    props: {
      enumSource: (_enumSource = {
        type: 'mgChoiceButtons',
        "default": 'list',
        "enum": ['list', 'url']
      }, _defineProperty(_enumSource, "default", 'list'), _defineProperty(_enumSource, "help", 'Where to populate the list data from'), _enumSource),
      "enum": {
        type: 'mgTable',
        title: 'List items',
        showIf: 'enumSource == "list"',
        items: [{
          id: 'id',
          type: 'mgText',
          required: true
        }, {
          id: 'title',
          type: 'mgText',
          required: true
        }, {
          id: 'icon',
          type: 'mgIcon'
        }]
      },
      enumUrl: {
        type: 'mgUrl',
        vueType: ['string', 'object'],
        showIf: 'enumSource == "url"',
        help: 'Data feed URL to fetch choice values from'
      },
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      focus: {
        type: 'mgToggle',
        "default": false,
        help: 'Auto-focus the element when it appears on screen'
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
      this.$watch('$props.enumUrl', function () {
        if (!_this.$props.enumUrl) return;

        _this.$macgyver.utils.fetch(_this.$props.enumUrl, {
          type: 'array'
        }).then(function (data) {
          return _this.setEnum(data);
        });
      }, {
        immediate: true
      });
      this.$watch('$props.enum', function () {
        if (_.isArray(_this.$props["enum"]) && _.isString(_this.$props["enum"][0])) {
          // Array of strings
          _this.setEnum(_this.$props["enum"].map(function (i) {
            return {
              id: _.camelCase(i),
              title: i
            };
          }));
        } else if (_.isArray(_this.$props["enum"]) && _.isObject(_this.$props["enum"][0])) {
          // Collection
          _this.setEnum(_this.$props["enum"]);
        }
      }, {
        immediate: true
      });
    },
    methods: {
      change: function change(val) {
        this.data = val === null || val === void 0 ? void 0 : val.id;
        this.selected = val;
      },

      /**
      * Populate the enumIter object
      * This function also correctly populates the selected item (or the default)
      * Each item is assumed to have the spec `{id: String, title: String, icon?: String}`
      * @param {array<Object>} enumIter The new iterable enum
      */
      setEnum: function setEnum(enumIter) {
        var _this2 = this;

        this.enumIter = enumIter;

        if (this.data) {
          this.selected = this.enumIter.find(function (e) {
            return e.id == _this2.data;
          }) || this.data;
        } else if (this.$props["default"]) {
          this.selected = this.enumIter.find(function (e) {
            return e.id == _this2.$props["default"];
          }) || this.$props["default"];
        }
      }
    },
    mounted: function mounted() {
      if (this.$props.focus) {
        // NOTE: Focus selection does NOT work if DevTools is open in Chome
        this.$refs.select.searchEl.focus();
      }
    }
  });

  /* script */
  const __vue_script__$9 = script$8;

  /* template */
  var __vue_render__$5 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("v-select", {
      ref: "select",
      attrs: {
        value: _vm.selected,
        label: "title",
        options: _vm.enumIter,
        placeholder: _vm.$props.placeholder,
        clearable: !_vm.$props.required
      },
      on: { input: _vm.change },
      scopedSlots: _vm._u([
        {
          key: "selected-option",
          fn: function(option) {
            return [
              _vm.selected.icon
                ? _c("i", { class: _vm.selected.icon })
                : _vm._e(),
              _vm._v("\n\t\t" + _vm._s(_vm.selected.title) + "\n\t")
            ]
          }
        },
        {
          key: "option",
          fn: function(option) {
            return [
              option.icon ? _c("i", { class: option.icon }) : _vm._e(),
              _vm._v("\n\t\t" + _vm._s(option.title) + "\n\t")
            ]
          }
        }
      ])
    })
  };
  var __vue_staticRenderFns__$5 = [];
  __vue_render__$5._withStripped = true;

    /* style */
    const __vue_inject_styles__$9 = function (inject) {
      if (!inject) return
      inject("data-v-03132577_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Make look consistant with Bootstrap */\n.v-select.open .dropdown-toggle {\n\tborder-color: #5cb3fd;\n}\n\n/* Remove weird dropdown icon that Bootstrap adds */\n.v-select .dropdown-toggle::after {\n\tdisplay: none;\n}\n\n/* Wider spacing for clear button */\n.v-select .dropdown-toggle .clear {\n\tmargin-right: 10px;\n}\n\n/* Align dropdown icon correctly */\n.v-select .open-indicator {\n\tmargin-top: -2px;\n}\n.v-select .vs__selected i {\n\tmargin-right: 5px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgChoiceDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA,wCAAA;AACA;CACA,qBAAA;AACA;;AAEA,mDAAA;AACA;CACA,aAAA;AACA;;AAEA,mCAAA;AACA;CACA,kBAAA;AACA;;AAEA,kCAAA;AACA;CACA,gBAAA;AACA;AAEA;CACA,iBAAA;AACA","file":"mgChoiceDropdown.vue","sourcesContent":["<script>\nimport VueSelect from 'vue-select';\nimport 'vue-select/dist/vue-select.css';\n\nVue.component('v-select', VueSelect);\n\nexport default Vue.mgComponent('mgChoiceDropdown', {\n\tmeta: {\n\t\ttitle: 'Dropdown multiple-choice',\n\t\ticon: 'far fa-chevron-circle-down',\n\t\tcategory: 'Choice Selectors',\n\t\tpreferId: true,\n\t\tshorthand: ['choice', 'choose', 'dropdown', 'pick'],\n\t},\n\tdata() { return {\n\t\tselected: [],\n\t\tenumIter: [],\n\t}},\n\tprops: {\n\t\tenumSource: {type: 'mgChoiceButtons', default: 'list', enum: ['list', 'url'], default: 'list', help: 'Where to populate the list data from'},\n\t\tenum: {\n\t\t\ttype: 'mgTable',\n\t\t\ttitle: 'List items',\n\t\t\tshowIf: 'enumSource == \"list\"',\n\t\t\titems: [\n\t\t\t\t{id: 'id', type: 'mgText', required: true},\n\t\t\t\t{id: 'title', type: 'mgText', required: true},\n\t\t\t\t{id: 'icon', type: 'mgIcon'},\n\t\t\t],\n\t\t},\n\t\tenumUrl: {type: 'mgUrl', vueType: ['string', 'object'], showIf: 'enumSource == \"url\"', help: 'Data feed URL to fetch choice values from'},\n\t\tplaceholder: {type: 'mgText', help: 'Ghost text to display when there is no value'},\n\t\trequired: {type: 'mgToggle', default: false, help: 'One choice must be selected'},\n\t\tfocus: {type: 'mgToggle', default: false, help: 'Auto-focus the element when it appears on screen'},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\n\t\tthis.$watch('$props.enumUrl', ()=> {\n\t\t\tif (!this.$props.enumUrl) return;\n\t\t\tthis.$macgyver.utils.fetch(this.$props.enumUrl, {type: 'array'})\n\t\t\t\t.then(data => this.setEnum(data))\n\t\t}, {immediate: true});\n\n\t\tthis.$watch('$props.enum', ()=> {\n\t\t\tif (_.isArray(this.$props.enum) && _.isString(this.$props.enum[0])) { // Array of strings\n\t\t\t\tthis.setEnum(this.$props.enum.map(i => ({id: _.camelCase(i), title: i})));\n\t\t\t} else if (_.isArray(this.$props.enum) && _.isObject(this.$props.enum[0])) { // Collection\n\t\t\t\tthis.setEnum(this.$props.enum);\n\t\t\t}\n\t\t}, {immediate: true});\n\t},\n\tmethods: {\n\t\tchange(val) {\n\t\t\tthis.data = val?.id;\n\t\t\tthis.selected = val;\n\t\t},\n\n\t\t/**\n\t\t* Populate the enumIter object\n\t\t* This function also correctly populates the selected item (or the default)\n\t\t* Each item is assumed to have the spec `{id: String, title: String, icon?: String}`\n\t\t* @param {array<Object>} enumIter The new iterable enum\n\t\t*/\n\t\tsetEnum(enumIter) {\n\t\t\tthis.enumIter = enumIter;\n\n\t\t\tif (this.data) {\n\t\t\t\tthis.selected = this.enumIter.find(e => e.id == this.data) || this.data;\n\t\t\t} else if (this.$props.default) {\n\t\t\t\tthis.selected = this.enumIter.find(e => e.id == this.$props.default) || this.$props.default;\n\t\t\t}\n\t\t},\n\t},\n\tmounted() {\n\t\tif (this.$props.focus) {\n\t\t\t// NOTE: Focus selection does NOT work if DevTools is open in Chome\n\t\t\tthis.$refs.select.searchEl.focus();\n\t\t}\n\t},\n});\n</script>\n\n<template>\n\t<v-select\n\t\tref=\"select\"\n\t\t:value=\"selected\"\n\t\tlabel=\"title\"\n\t\t:options=\"enumIter\"\n\t\t:placeholder=\"$props.placeholder\"\n\t\t:clearable=\"!$props.required\"\n\t\t@input=\"change\"\n\t>\n\t\t<template #selected-option=\"option\">\n\t\t\t<i v-if=\"selected.icon\" :class=\"selected.icon\"/>\n\t\t\t{{selected.title}}\n\t\t</template>\n\t\t<template #option=\"option\">\n\t\t\t<i v-if=\"option.icon\" :class=\"option.icon\"/>\n\t\t\t{{option.title}}\n\t\t</template>\n\t</v-select>\n</template>\n\n<style>\n/* Make look consistant with Bootstrap */\n.v-select.open .dropdown-toggle {\n\tborder-color: #5cb3fd;\n}\n\n/* Remove weird dropdown icon that Bootstrap adds */\n.v-select .dropdown-toggle::after {\n\tdisplay: none;\n}\n\n/* Wider spacing for clear button */\n.v-select .dropdown-toggle .clear {\n\tmargin-right: 10px;\n}\n\n/* Align dropdown icon correctly */\n.v-select .open-indicator {\n\tmargin-top: -2px;\n}\n\n.v-select .vs__selected i {\n\tmargin-right: 5px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$9 = undefined;
    /* module identifier */
    const __vue_module_identifier__$9 = undefined;
    /* functional template */
    const __vue_is_functional_template__$9 = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$9 = normalizeComponent(
      { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
      __vue_inject_styles__$9,
      __vue_script__$9,
      __vue_scope_id__$9,
      __vue_is_functional_template__$9,
      __vue_module_identifier__$9,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgChoiceDropdown = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$9
  });

  var script$9 = Vue.mgComponent('mgChoiceList', {
    meta: {
      title: 'Radio multiple-choice',
      icon: 'far fa-list-ol',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        "default": [],
        items: [{
          id: 'title',
          type: 'mgText'
        }, {
          id: 'icon',
          type: 'mgIcon',
          "interface": 'modal'
        }]
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      select: function select(id) {
        this.data = id;
      }
    },
    watch: {
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (_.isArray(this.$props["enum"]) && _.isString(this.$props["enum"][0])) {
            // Array of strings
            this.enumIter = this.$props["enum"].map(function (i) {
              return {
                id: _.camelCase(i),
                title: i
              };
            });
          } else if (_.isArray(this.$props["enum"]) && _.isObject(this.$props["enum"][0])) {
            // Collection
            this.enumIter = this.$props["enum"];
          }
        }
      }
    }
  });

  /* script */
  const __vue_script__$a = script$9;

  /* template */
  var __vue_render__$6 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-choice-list list-group" },
      _vm._l(_vm.enumIter, function(item) {
        return _c(
          "a",
          {
            key: item.id,
            staticClass: "list-group-item",
            class: _vm.data == item.id && "active",
            on: {
              click: function($event) {
                _vm.data = item.id;
              }
            }
          },
          [
            item.icon ? _c("i", { class: item.icon }) : _vm._e(),
            _vm._v("\n\t\t" + _vm._s(item.title) + "\n\t")
          ]
        )
      }),
      0
    )
  };
  var __vue_staticRenderFns__$6 = [];
  __vue_render__$6._withStripped = true;

    /* style */
    const __vue_inject_styles__$a = function (inject) {
      if (!inject) return
      inject("data-v-2fdd7ca8_0", { source: "\n.mg-choice-list .list-group-item.active {\n\tcolor: #fff;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgChoiceList.vue"],"names":[],"mappings":";AAgEA;CACA,WAAA;AACA","file":"mgChoiceList.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgChoiceList', {\n\tmeta: {\n\t\ttitle: 'Radio multiple-choice',\n\t\ticon: 'far fa-list-ol',\n\t\tcategory: 'Choice Selectors',\n\t\tpreferId: true,\n\t},\n\tdata() { return {\n\t\tenumIter: [],\n\t}},\n\tprops: {\n\t\tenum: {\n\t\t\ttype: 'mgTable',\n\t\t\ttitle: 'List items',\n\t\t\tdefault: [],\n\t\t\titems: [\n\t\t\t\t{id: 'title', type: 'mgText'},\n\t\t\t\t{id: 'icon', type: 'mgIcon', interface: 'modal'},\n\t\t\t],\n\t\t},\n\t\trequired: {type: 'mgToggle', default: false, help: 'One choice must be selected'},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\t},\n\tmethods: {\n\t\tselect(id) {\n\t\t\tthis.data = id;\n\t\t},\n\t},\n\twatch: {\n\t\t'$props.enum': {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tif (_.isArray(this.$props.enum) && _.isString(this.$props.enum[0])) { // Array of strings\n\t\t\t\t\tthis.enumIter = this.$props.enum.map(i => ({id: _.camelCase(i), title: i}));\n\t\t\t\t} else if (_.isArray(this.$props.enum) && _.isObject(this.$props.enum[0])) { // Collection\n\t\t\t\t\tthis.enumIter = this.$props.enum;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-choice-list list-group\">\n\t\t<a\n\t\t\tv-for=\"item in enumIter\"\n\t\t\t:key=\"item.id\"\n\t\t\tclass=\"list-group-item\"\n\t\t\t:class=\"data == item.id && 'active'\"\n\t\t\t@click=\"data = item.id\"\n\t\t>\n\t\t\t<i v-if=\"item.icon\" :class=\"item.icon\"/>\n\t\t\t{{item.title}}\n\t\t</a>\n\t</div>\n</template>\n\n<style>\n.mg-choice-list .list-group-item.active {\n\tcolor: #fff;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$a = undefined;
    /* module identifier */
    const __vue_module_identifier__$a = undefined;
    /* functional template */
    const __vue_is_functional_template__$a = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$a = normalizeComponent(
      { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
      __vue_inject_styles__$a,
      __vue_script__$a,
      __vue_scope_id__$a,
      __vue_is_functional_template__$a,
      __vue_module_identifier__$a,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgChoiceList = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$a
  });

  var script$a = Vue.mgComponent('mgChoicePopup', {
    meta: {
      title: 'Choice Popup',
      icon: 'fas fa-window-maximize',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        activeTitle: undefined,
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        items: [{
          id: 'id',
          title: 'ID'
        }, {
          id: 'title',
          title: 'Title'
        }, {
          id: 'class',
          title: 'Classes'
        }, {
          id: 'classActive',
          title: 'Active Class'
        }, {
          id: 'classInactive',
          title: 'Inactive Class'
        }]
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      popupTitle: {
        type: 'mgText',
        "default": 'Select item',
        advanced: true
      },
      inactiveText: {
        type: 'mgText',
        "default": 'Select item...',
        advanced: true
      },
      iconActive: {
        type: 'mgIcon',
        "default": 'far fa-check',
        advanced: true
      },
      iconInactive: {
        type: 'mgIcon',
        "default": 'far fa-ellipsis-h',
        advanced: true
      },
      classActive: {
        type: 'mgText',
        "default": 'btn btn-primary',
        advanced: true
      },
      classInactive: {
        type: 'mgText',
        "default": 'btn btn-default',
        advanced: true
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      select: function select(id) {
        var _this2 = this;

        this.$prompt.macgyver({
          title: this.$props.popupTitle,
          form: {
            id: 'selected',
            type: 'mgChoiceButtons',
            "enum": this.enumIter,
            classWrapper: 'list-group',
            itemClassActive: 'list-group-item active',
            itemClassInactive: 'list-group-item'
          },
          data: {
            selected: this.data
          },
          buttons: [],
          onShow: function onShow() {
            // Bind to the mg-form element, detect the first change and close the dialog
            _this2.$macgyver.$forms.promptMacGyver.$on('mgChange', function () {
              return setTimeout(function () {
                // Timeout not really needed but it lets the button highlight before we close
                _this2.$prompt.$settings.$defer.resolve(_this2.$prompt.$settings.data);

                _this2.$prompt.close(true);
              }, 100);
            });
          }
        }).then(function (form) {
          return _this2.$set(_this2, 'data', form.selected);
        });
      }
    },
    watch: {
      data: function data() {
        var _this3 = this;

        if (this.data && this.enumIter.length) {
          var activeItem = this.enumIter.find(function (e) {
            return e.id == _this3.data;
          });
          this.$set(this, 'activeTitle', activeItem ? activeItem.title : '');
        }
      },
      '$props.enumUrl': {
        immediate: true,
        handler: function handler() {
          var _this4 = this;

          if (!this.$props.enumUrl) return;
          this.$macgyver.utils.fetch(this.$props.enumUrl, {
            type: 'array',
            mappings: {
              id: {
                required: true
              },
              title: {
                required: true
              }
            }
          }).tap(function (data) {
            return console.log('mgPopup got feed', data);
          }).then(function (data) {
            return _this4.$set(_this4.$props, 'enum', data);
          });
        }
      },
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (_.isArray(this.$props["enum"]) && _.isString(this.$props["enum"][0])) {
            // Array of strings
            this.enumIter = this.$props["enum"].map(function (i) {
              return {
                id: _.camelCase(i),
                title: i
              };
            });
          } else if (_.isArray(this.$props["enum"]) && _.isObject(this.$props["enum"][0])) {
            // Collection
            this.enumIter = this.$props["enum"];
          }
        }
      }
    }
  });

  /* script */
  const __vue_script__$b = script$a;

  /* template */
  var __vue_render__$7 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mg-choice-popup" }, [
      _c(
        "a",
        {
          class: _vm.data ? _vm.$props.classActive : _vm.$props.classInactive,
          on: {
            click: function($event) {
              return _vm.select()
            }
          }
        },
        [
          _c("i", {
            class: _vm.data ? _vm.$props.iconActive : _vm.$props.iconInactive
          }),
          _vm._v(
            "\n\t\t" +
              _vm._s(this.data ? _vm.activeTitle : _vm.$props.inactiveText) +
              "\n\t"
          )
        ]
      )
    ])
  };
  var __vue_staticRenderFns__$7 = [];
  __vue_render__$7._withStripped = true;

    /* style */
    const __vue_inject_styles__$b = undefined;
    /* scoped */
    const __vue_scope_id__$b = undefined;
    /* module identifier */
    const __vue_module_identifier__$b = undefined;
    /* functional template */
    const __vue_is_functional_template__$b = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$b = normalizeComponent(
      { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
      __vue_inject_styles__$b,
      __vue_script__$b,
      __vue_scope_id__$b,
      __vue_is_functional_template__$b,
      __vue_module_identifier__$b,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgChoicePopup = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$b
  });

  var script$b = Vue.mgComponent('mgChoiceRadio', {
    meta: {
      title: 'Radio multiple-choice',
      icon: 'far fa-list-ul',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        items: [{
          id: 'id',
          title: 'ID'
        }, {
          id: 'title',
          title: 'Title'
        }]
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      select: function select(id) {
        this.data = id;
      }
    },
    watch: {
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (_.isArray(this.$props["enum"]) && _.isString(this.$props["enum"][0])) {
            // Array of strings
            this.enumIter = this.$props["enum"].map(function (i) {
              return {
                id: _.camelCase(i),
                title: i
              };
            });
          } else if (_.isArray(this.$props["enum"]) && _.isObject(this.$props["enum"][0])) {
            // Collection
            this.enumIter = this.$props["enum"];
          }
        }
      }
    }
  });

  /* script */
  const __vue_script__$c = script$b;

  /* template */
  var __vue_render__$8 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      _vm._l(_vm.enumIter, function(item) {
        return _c("div", { key: item.id, staticClass: "form-check" }, [
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.data,
                expression: "data"
              }
            ],
            attrs: {
              type: "radio",
              name: _vm.$props.id,
              id: "check-" + _vm.$props.id + "-" + item.id
            },
            domProps: { value: item.id, checked: _vm._q(_vm.data, item.id) },
            on: {
              change: function($event) {
                _vm.data = item.id;
              }
            }
          }),
          _vm._v(" "),
          _c(
            "label",
            {
              staticClass: "form-check-label",
              attrs: { for: "check-" + _vm.$props.id + "-" + item.id }
            },
            [_vm._v("\n\t\t\t" + _vm._s(item.title) + "\n\t\t")]
          )
        ])
      }),
      0
    )
  };
  var __vue_staticRenderFns__$8 = [];
  __vue_render__$8._withStripped = true;

    /* style */
    const __vue_inject_styles__$c = undefined;
    /* scoped */
    const __vue_scope_id__$c = undefined;
    /* module identifier */
    const __vue_module_identifier__$c = undefined;
    /* functional template */
    const __vue_is_functional_template__$c = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$c = normalizeComponent(
      { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
      __vue_inject_styles__$c,
      __vue_script__$c,
      __vue_scope_id__$c,
      __vue_is_functional_template__$c,
      __vue_module_identifier__$c,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgChoiceRadio = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$c
  });

  /**
  * NOTE: Toggling deselection from the menu is not yet supported until
  *       https://github.com/sagalbot/vue-select/pull/877
  *       Has been merged
  *       - MC 2020-01-10
  */
  Vue.component('v-select', VueSelect);
  var script$c = Vue.mgComponent('mgChoiceTags', {
    meta: {
      title: 'Dropdown multiple-choice',
      icon: 'far fa-tags',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        value: [],
        enumIter: []
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        items: [{
          id: 'id',
          title: 'ID'
        }, {
          id: 'title',
          title: 'Title'
        }]
      },
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      allowCreate: {
        type: 'mgToggle',
        "default": false,
        help: 'Allow the user to create their own tags in addition to the supplied ones'
      },
      showDropdown: {
        type: 'mgToggle',
        "default": true,
        help: 'When clicking, show a dropdown box. Disabling will only allow the user to use existing tags'
      },
      maxVisible: {
        type: 'mgNumber',
        "default": 0,
        help: 'Maximum number of tags to display before showing helper text, set to zero to disable'
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data || !_this.data.length) return reply("".concat(_this.$props.title, " is required"));
      });
      this.$watch('$props.enum', function () {
        if (_.isArray(_this.$props["enum"]) && _.isString(_this.$props["enum"][0])) {
          // Array of strings
          _this.enumIter = _this.$props["enum"].map(function (i) {
            return {
              id: _.camelCase(i),
              title: i
            };
          });
        } else if (_.isArray(_this.$props["enum"]) && _.isObject(_this.$props["enum"][0])) {
          // Collection
          _this.enumIter = _this.$props["enum"];
        }

        if (_this.data) {
          _this.value = _this.enumIter.filter(function (e) {
            return e.id == _this.data;
          }) || _this.data;
        } else if (_this.$props["default"]) {
          _this.value = _this.enumIter.filter(function (e) {
            return e.id == _this.$props["default"];
          }) || _this.$props["default"];
        }
      }, {
        immediate: true
      });
    },
    methods: {
      change: function change(val) {
        this.data = val.map(function (i) {
          return i.id;
        });
        this.value = val;
      }
    }
  });

  /* script */
  const __vue_script__$d = script$c;

  /* template */
  var __vue_render__$9 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("v-select", {
      staticClass: "mg-choice-tags",
      attrs: {
        value: _vm.value,
        label: "title",
        options: _vm.enumIter,
        placeholder: _vm.$props.placeholder,
        taggable: _vm.$props.allowCreate,
        "no-drop": !_vm.$props.showDropdown,
        "close-on-select": false,
        multiple: true
      },
      on: { input: _vm.change },
      scopedSlots: _vm._u([
        {
          key: "option",
          fn: function(option) {
            return [
              _c("i", {
                staticClass: "far fa-fw",
                class: _vm.value.some(function(v) {
                  return v.id == option.id
                })
                  ? "fa-check"
                  : "",
                attrs: { "data-id": option.id }
              }),
              _vm._v("\n\t\t" + _vm._s(option.title) + "\n\t")
            ]
          }
        },
        {
          key: "selected-option-container",
          fn: function(props) {
            return [
              !_vm.$props.maxVisible ||
              _vm.value.length - 1 < _vm.$props.maxVisible
                ? _c("span", { staticClass: "vs__selected" }, [
                    _vm._v("\n\t\t\t" + _vm._s(props.option.title) + "\n\t\t\t"),
                    _c("i", {
                      staticClass: "far fa-times ml-1 clickable",
                      on: {
                        click: function($event) {
                          return props.deselect(props.option)
                        }
                      }
                    })
                  ])
                : props.option.id == _vm.value[0].id
                ? _c("span", { staticClass: "vs__selected_overflow" }, [
                    _vm._v(
                      "\n\t\t\t" +
                        _vm._s(_vm.value.length) +
                        " items selected\n\t\t"
                    )
                  ])
                : _c("span")
            ]
          }
        }
      ])
    })
  };
  var __vue_staticRenderFns__$9 = [];
  __vue_render__$9._withStripped = true;

    /* style */
    const __vue_inject_styles__$d = function (inject) {
      if (!inject) return
      inject("data-v-3ade858b_0", { source: "\n.mg-choice-tags.v-select .vs__selected > i {\n\tcursor: pointer;\n}\n.mg-choice-tags.v-select .vs__selected_overflow {\n\tmargin: 2px 10px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgChoiceTags.vue"],"names":[],"mappings":";AAwGA;CACA,eAAA;AACA;AAEA;CACA,gBAAA;AACA","file":"mgChoiceTags.vue","sourcesContent":["<script>\n/**\n* NOTE: Toggling deselection from the menu is not yet supported until\n*       https://github.com/sagalbot/vue-select/pull/877\n*       Has been merged\n*       - MC 2020-01-10\n*/\n\nimport VueSelect from 'vue-select';\nimport 'vue-select/dist/vue-select.css';\n\nVue.component('v-select', VueSelect);\n\nexport default Vue.mgComponent('mgChoiceTags', {\n\tmeta: {\n\t\ttitle: 'Dropdown multiple-choice',\n\t\ticon: 'far fa-tags',\n\t\tcategory: 'Choice Selectors',\n\t\tpreferId: true,\n\t},\n\tdata() { return {\n\t\tvalue: [],\n\t\tenumIter: [],\n\t}},\n\tprops: {\n\t\tenum: {\n\t\t\ttype: 'mgTable',\n\t\t\ttitle: 'List items',\n\t\t\titems: [\n\t\t\t\t{id: 'id', title: 'ID'},\n\t\t\t\t{id: 'title', title: 'Title'},\n\t\t\t],\n\t\t},\n\t\tplaceholder: {type: 'mgText', help: 'Ghost text to display when there is no value'},\n\t\trequired: {type: 'mgToggle', default: false, help: 'One choice must be selected'},\n\t\tallowCreate: {type: 'mgToggle', default: false, help: 'Allow the user to create their own tags in addition to the supplied ones'},\n\t\tshowDropdown: {type: 'mgToggle', default: true, help: 'When clicking, show a dropdown box. Disabling will only allow the user to use existing tags'},\n\t\tmaxVisible: {type: 'mgNumber', default: 0, help: 'Maximum number of tags to display before showing helper text, set to zero to disable'},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data || !this.data.length) return reply(`${this.$props.title} is required`);\n\t\t});\n\n\t\tthis.$watch('$props.enum', ()=> {\n\t\t\tif (_.isArray(this.$props.enum) && _.isString(this.$props.enum[0])) { // Array of strings\n\t\t\t\tthis.enumIter = this.$props.enum.map(i => ({id: _.camelCase(i), title: i}));\n\t\t\t} else if (_.isArray(this.$props.enum) && _.isObject(this.$props.enum[0])) { // Collection\n\t\t\t\tthis.enumIter = this.$props.enum;\n\t\t\t}\n\n\t\t\tif (this.data) {\n\t\t\t\tthis.value = this.enumIter.filter(e => e.id == this.data) || this.data;\n\t\t\t} else if (this.$props.default) {\n\t\t\t\tthis.value = this.enumIter.filter(e => e.id == this.$props.default) || this.$props.default;\n\t\t\t}\n\t\t}, {immediate: true});\n\t},\n\tmethods: {\n\t\tchange(val) {\n\t\t\tthis.data = val.map(i => i.id);\n\t\t\tthis.value = val;\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<v-select\n\t\tclass=\"mg-choice-tags\"\n\t\t:value=\"value\"\n\t\tlabel=\"title\"\n\t\t:options=\"enumIter\"\n\t\t:placeholder=\"$props.placeholder\"\n\t\t:taggable=\"$props.allowCreate\"\n\t\t:no-drop=\"!$props.showDropdown\"\n\t\t:close-on-select=\"false\"\n\t\t:multiple=\"true\"\n\t\t@input=\"change\"\n\t>\n\t\t<template #option=\"option\">\n\t\t\t<i\n\t\t\t\tclass=\"far fa-fw\"\n\t\t\t\t:class=\"value.some(v => v.id == option.id) ? 'fa-check' : ''\"\n\t\t\t\t:data-id=\"option.id\"\n\t\t\t/>\n\t\t\t{{option.title}}\n\t\t</template>\n\t\t<template #selected-option-container=\"props\">\n\t\t\t<span v-if=\"!$props.maxVisible || value.length - 1 < $props.maxVisible\" class=\"vs__selected\">\n\t\t\t\t{{props.option.title}}\n\t\t\t\t<i @click=\"props.deselect(props.option)\" class=\"far fa-times ml-1 clickable\"/>\n\t\t\t</span>\n\t\t\t<!-- Render only the first selected element - skip the rest -->\n\t\t\t<span v-else-if=\"props.option.id == value[0].id\" class=\"vs__selected_overflow\">\n\t\t\t\t{{value.length}} items selected\n\t\t\t</span>\n\t\t\t<!-- Not sure why Vue needs an empty element but if its not here it falls back to the v-select render -->\n\t\t\t<span v-else/>\n\t\t</template>\n\t</v-select>\n</template>\n\n<style>\n.mg-choice-tags.v-select .vs__selected > i {\n\tcursor: pointer;\n}\n\n.mg-choice-tags.v-select .vs__selected_overflow {\n\tmargin: 2px 10px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$d = undefined;
    /* module identifier */
    const __vue_module_identifier__$d = undefined;
    /* functional template */
    const __vue_is_functional_template__$d = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$d = normalizeComponent(
      { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
      __vue_inject_styles__$d,
      __vue_script__$d,
      __vue_scope_id__$d,
      __vue_is_functional_template__$d,
      __vue_module_identifier__$d,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgChoiceTags = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$d
  });

  var script$d = Vue.mgComponent('mgChoiceTree', {
    meta: {
      title: 'Choice Tree',
      icon: 'fas fa-stream',
      category: 'Choice Selectors',
      preferId: true
    },
    data: function data() {
      return {
        enumIter: undefined
      };
    },
    props: {
      "enum": {
        type: 'mgTable',
        title: 'List items',
        items: [{
          id: 'id',
          title: 'ID'
        }, {
          id: 'title',
          title: 'Title'
        }, {
          id: 'icon',
          title: 'Icon'
        } // Icon used to override both item.iconOpen + item.iconClosed
        // 'enum': FIXME: We can't recursively edit children yet
        ]
      },
      required: {
        type: 'mgToggle',
        "default": false,
        help: 'One choice must be selected'
      },
      collapsable: {
        type: 'mgToggle',
        "default": true,
        help: 'Allow branches to be closed'
      },
      selectBranches: {
        type: 'mgToggle',
        "default": false,
        help: 'Allow selection of tree branches rather than just end leaves'
      },
      classWrapper: {
        type: 'mgText',
        "default": 'mg-choice-tree',
        title: 'Group CSS class',
        advanced: true
      },
      branchClass: {
        type: 'mgText',
        "default": 'mg-choice-tree-branch list-group',
        title: 'Branch CSS class',
        advanced: true
      },
      itemClassActive: {
        type: 'mgText',
        title: 'Item class active',
        "default": 'btn btn-primary text-left',
        advanced: true
      },
      itemClassInactive: {
        type: 'mgText',
        title: 'Item class inactive',
        "default": 'btn btn-light text-left',
        advanced: true
      },
      iconClassBranch: {
        type: 'mgIcon',
        title: 'Branch icon base',
        "default": 'far fa-folder fa-lg',
        advanced: true
      },
      iconClassBranchOpen: {
        type: 'mgIcon',
        title: 'Branch icon open (overrides base)',
        "default": '',
        advanced: true
      },
      iconClassBranchClosed: {
        type: 'mgIcon',
        title: 'Branch icon closed (overrides base)',
        "default": '',
        advanced: true
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      select: function select(item) {
        if (this.$props.collapsable && !item.isLeaf && !item.open) {
          // Item is closed - user probably wants it open
          console.log('Toggle open (node is closed)');
          item.isOpen = !item.isOpen;
        } else if ((item.isLeaf || this.$props.selectBranches) && item.active != item.id) {
          // Item is selectable but not selected - user probably wants it selected
          if (!this.$props.required && this.data == item.id) {
            console.log('Deselect');
            this.data = undefined;
          } else {
            console.log('Select');
            this.data = item.id;
            console.log('DATA', this.data);
          }
        } else if (this.$props.collapsable && !item.isLeaf) {
          // No idea, but item is not a leaf, maybe the user wants to toggle it?
          console.log('Toggle open');
          item.open = !item.isOpen;
        } else {
          // Give up
          console.warn('FIXME: No idea what the user wants to do when clicking on item', item);
        }

        this.$forceUpdate(); // FIXME: Not happy with this but no idea how to make the render function selectively update yet
      },
      toggleOpen: function toggleOpen(item) {
        item.isOpen = !item.isOpen;
        this.$forceUpdate(); // FIXME: Again, not happy
      }
    },
    watch: {
      /**
      * Remap the incomming `enum` into an iterable array-of-arrays
      * Each child will be of the form {id, title, enum?, isOpen, isLeaf}
      */
      '$props.enum': {
        immediate: true,
        handler: function handler() {
          if (!this.$props["enum"]) return; // Nothing to render yet

          var walkBranch = function walkBranch(items) {
            return items.map(function (item) {
              if (typeof item == 'string') item = {
                title: item,
                id: _.camelCase(item)
              };
              item.isOpen = true;
              item.isLeaf = !item["enum"] || item["enum"].length < 1;
              if (!item.isLeaf) item["enum"] = walkBranch(item["enum"]);
              return item;
            });
          };

          this.enumIter = walkBranch(this.$props["enum"]);
        }
      }
    },
    render: function render(h) {
      var _this2 = this;

      var renderBranch = function renderBranch(items, isOpen) {
        return h('div', {
          "class": [_this2.$props.branchClass, isOpen && 'open']
        }, items.map(function (item) {
          return [h('div', {
            "class": _this2.data == item.id ? _this2.$props.itemClassActive : _this2.$props.itemClassInactive,
            on: {
              click: function click(e) {
                _this2.select(item);

                e.stopPropagation();
              }
            }
          }, [h('i', {
            "class": item.isOpen && item.iconOpen ? item.iconOpen : item.isOpen && item.icon ? item.icon : item.isOpen && _this2.$props.iconClassBranchOpen ? _this2.$props.iconClassBranchOpen : !item.isOpen && item.iconClosed ? item.iconClosed : !item.isOpen && item.icon ? item.icon : !item.isOpen && _this2.$props.iconClassBranchClosed ? _this2.$props.iconClassBranchClosed : _this2.$props.iconClassBranch,
            on: {
              click: function click(e) {
                _this2.toggleOpen(item);

                e.stopPropagation();
              }
            }
          }), h('span', {
            "class": 'mg-choice-tree-title'
          }, item.title), item["enum"] ? renderBranch(item["enum"], item.isOpen) : undefined])];
        }));
      };

      return h('div', {
        "class": this.$props.classWrapper
      }, [renderBranch(this.enumIter, true)]);
    }
  });

  /* script */
  const __vue_script__$e = script$d;

  /* template */

    /* style */
    const __vue_inject_styles__$e = function (inject) {
      if (!inject) return
      inject("data-v-701e7bde_0", { source: "\n.mg-choice-tree-branch {\n\tmargin-left: 32px;\n}\n.mg-choice-tree-branch:not(.open) {\n\tdisplay: none;\n}\n.mg-choice-tree-branch i {\n\tmargin-right: 5px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgChoiceTree.vue"],"names":[],"mappings":";AA8IA;CACA,iBAAA;AACA;AAEA;CACA,aAAA;AACA;AAEA;CACA,iBAAA;AACA","file":"mgChoiceTree.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgChoiceTree', {\n\tmeta: {\n\t\ttitle: 'Choice Tree',\n\t\ticon: 'fas fa-stream',\n\t\tcategory: 'Choice Selectors',\n\t\tpreferId: true,\n\t},\n\tdata() { return {\n\t\tenumIter: undefined,\n\t}},\n\tprops: {\n\t\tenum: {\n\t\t\ttype: 'mgTable',\n\t\t\ttitle: 'List items',\n\t\t\titems: [\n\t\t\t\t{id: 'id', title: 'ID'},\n\t\t\t\t{id: 'title', title: 'Title'},\n\t\t\t\t{id: 'icon', title: 'Icon'}, // Icon used to override both item.iconOpen + item.iconClosed\n\t\t\t\t// 'enum': FIXME: We can't recursively edit children yet\n\t\t\t],\n\t\t},\n\t\trequired: {type: 'mgToggle', default: false, help: 'One choice must be selected'},\n\t\tcollapsable: {type: 'mgToggle', default: true, help: 'Allow branches to be closed'},\n\t\tselectBranches: {type: 'mgToggle', default: false, help: 'Allow selection of tree branches rather than just end leaves'},\n\t\tclassWrapper: {type: 'mgText', default: 'mg-choice-tree', title: 'Group CSS class', advanced: true},\n\t\tbranchClass: {type: 'mgText', default: 'mg-choice-tree-branch list-group', title: 'Branch CSS class', advanced: true},\n\t\titemClassActive: {type: 'mgText', title: 'Item class active', default: 'btn btn-primary text-left', advanced: true},\n\t\titemClassInactive: {type: 'mgText', title: 'Item class inactive', default: 'btn btn-light text-left', advanced: true},\n\t\ticonClassBranch: {type: 'mgIcon', title: 'Branch icon base', default: 'far fa-folder fa-lg', advanced: true},\n\t\ticonClassBranchOpen: {type: 'mgIcon', title: 'Branch icon open (overrides base)', default: '', advanced: true},\n\t\ticonClassBranchClosed: {type: 'mgIcon', title: 'Branch icon closed (overrides base)', default: '', advanced: true},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\t},\n\tmethods: {\n\t\tselect(item) {\n\t\t\tif (this.$props.collapsable && !item.isLeaf && !item.open) { // Item is closed - user probably wants it open\n\t\t\t\tconsole.log('Toggle open (node is closed)');\n\t\t\t\titem.isOpen = !item.isOpen;\n\t\t\t} else if ((item.isLeaf || this.$props.selectBranches) && item.active != item.id) { // Item is selectable but not selected - user probably wants it selected\n\t\t\t\tif (!this.$props.required && this.data == item.id) {\n\t\t\t\t\tconsole.log('Deselect');\n\t\t\t\t\tthis.data = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Select');\n\t\t\t\t\tthis.data = item.id;\n\t\t\t\t\tconsole.log('DATA', this.data);\n\t\t\t\t}\n\t\t\t} else if (this.$props.collapsable && !item.isLeaf) { // No idea, but item is not a leaf, maybe the user wants to toggle it?\n\t\t\t\tconsole.log('Toggle open');\n\t\t\t\titem.open = !item.isOpen;\n\t\t\t} else { // Give up\n\t\t\t\tconsole.warn('FIXME: No idea what the user wants to do when clicking on item', item);\n\t\t\t}\n\n\t\t\tthis.$forceUpdate(); // FIXME: Not happy with this but no idea how to make the render function selectively update yet\n\t\t},\n\n\t\ttoggleOpen(item) {\n\t\t\titem.isOpen = !item.isOpen;\n\t\t\tthis.$forceUpdate(); // FIXME: Again, not happy\n\t\t},\n\t},\n\twatch: {\n\t\t/**\n\t\t* Remap the incomming `enum` into an iterable array-of-arrays\n\t\t* Each child will be of the form {id, title, enum?, isOpen, isLeaf}\n\t\t*/\n\t\t'$props.enum': {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tif (!this.$props.enum) return; // Nothing to render yet\n\n\t\t\t\tvar walkBranch = items => {\n\t\t\t\t\treturn items.map(item => {\n\t\t\t\t\t\tif (typeof item == 'string') item = {title: item, id: _.camelCase(item)};\n\t\t\t\t\t\titem.isOpen = true;\n\n\t\t\t\t\t\titem.isLeaf = !item.enum || item.enum.length < 1;\n\t\t\t\t\t\tif (!item.isLeaf) item.enum = walkBranch(item.enum);\n\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.enumIter = walkBranch(this.$props.enum);\n\t\t\t},\n\t\t},\n\t},\n\trender(h) {\n\t\tvar renderBranch = (items, isOpen) => h(\n\t\t\t'div',\n\t\t\t{class: [\n\t\t\t\tthis.$props.branchClass,\n\t\t\t\tisOpen && 'open',\n\t\t\t]},\n\t\t\titems.map(item => [\n\t\t\t\th(\n\t\t\t\t\t'div',\n\t\t\t\t\t{\n\t\t\t\t\t\tclass: this.data == item.id ? this.$props.itemClassActive : this.$props.itemClassInactive,\n\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\tclick: e => {\n\t\t\t\t\t\t\t\tthis.select(item);\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\th('i', {\n\t\t\t\t\t\t\tclass:\n\t\t\t\t\t\t\t\titem.isOpen && item.iconOpen ? item.iconOpen\n\t\t\t\t\t\t\t\t: item.isOpen && item.icon ? item.icon\n\t\t\t\t\t\t\t\t: item.isOpen && this.$props.iconClassBranchOpen ? this.$props.iconClassBranchOpen\n\t\t\t\t\t\t\t\t: !item.isOpen && item.iconClosed ? item.iconClosed\n\t\t\t\t\t\t\t\t: !item.isOpen && item.icon ? item.icon\n\t\t\t\t\t\t\t\t: !item.isOpen && this.$props.iconClassBranchClosed ? this.$props.iconClassBranchClosed\n\t\t\t\t\t\t\t\t: this.$props.iconClassBranch,\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tclick: e => {\n\t\t\t\t\t\t\t\t\tthis.toggleOpen(item);\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\th('span', {class: 'mg-choice-tree-title'}, item.title),\n\t\t\t\t\t\titem.enum ? renderBranch(item.enum, item.isOpen) : undefined,\n\t\t\t\t\t],\n\t\t\t\t),\n\t\t\t])\n\t\t);\n\n\t\treturn h('div', {class: this.$props.classWrapper}, [renderBranch(this.enumIter, true)]);\n\t},\n});\n</script>\n\n<style>\n.mg-choice-tree-branch {\n\tmargin-left: 32px;\n}\n\n.mg-choice-tree-branch:not(.open) {\n\tdisplay: none;\n}\n\n.mg-choice-tree-branch i {\n\tmargin-right: 5px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$e = undefined;
    /* module identifier */
    const __vue_module_identifier__$e = undefined;
    /* functional template */
    const __vue_is_functional_template__$e = undefined;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$e = normalizeComponent(
      {},
      __vue_inject_styles__$e,
      __vue_script__$e,
      __vue_scope_id__$e,
      __vue_is_functional_template__$e,
      __vue_module_identifier__$e,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgChoiceTree = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$e
  });

  var script$e = Vue.mgComponent('mgCode', {
    meta: {
      title: 'Code Editor',
      icon: 'fal fa-code',
      category: 'Complex Inputs',
      preferId: true
    },
    props: {
      syntax: {
        type: 'mgChoiceDropdown',
        "enum": ['text', 'json', 'javascript', 'html', 'css'],
        "default": 'json'
      },
      convert: {
        type: 'mgToggle',
        "default": true,
        showIf: 'syntax == "json"',
        help: 'Convert data back to a native JS object'
      },
      theme: {
        type: 'mgChoiceDropdown',
        "enum": ['chrome'],
        advanced: true,
        "default": 'chrome',
        help: 'The syntax color scheme to use'
      },
      height: {
        type: 'mgText',
        "default": '400px',
        help: 'The size of the editing window as a valid CSS measurement',
        advanced: true
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.editor.destroy();
      this.editor.container.remove();
    },
    mounted: function mounted() {
      var _this = this;

      this.editor = ace.edit(this.$el);
      this.editor.$blockScrolling = Infinity;
      this.editor.setValue(_.isObject(this.data) ? JSON.stringify(this.data, null, '\t') // Parse raw objects into JSON
      : this.data ? this.data : '', 1);
      this.editor.setOptions({
        showPrintMargin: false
      });
      this.editor.on('change', function () {
        var value = _this.editor.getvalueue();

        if (_this.$props.convert && _this.$props.syntax == 'json') {
          try {
            value = JSON.parse(value);

            _this.$mgForm.$emit('mgChange', {
              path: _this.$props.id,
              value: value
            });
          } catch (e) {// Silently fail as the JSON is invalueid
          }
        } else {
          _this.$mgForm.$emit('mgChange', {
            path: _this.$props.id,
            value: value
          });
        }

        return true;
      });
      this.$nextTick(function () {
        return _this.editor.resize();
      });
      this.$watch('config', function () {
        if (_this.$props.syntax) _this.editor.getSession().setMode("ace/mode/".concat(_this.$props.syntax));
        if (_this.$props.theme) _this.editor.setTheme("ace/theme/".concat(_this.$props.theme));
      }, {
        // FIXME: deep?
        immediate: true
      });
    },
    render: function render(h) {
      return h('div', {
        attrs: {
          "class": 'mg-code',
          style: "height: ".concat(this.$props.height, "; width: 100%")
        }
      });
    }
  });

  /* script */
  const __vue_script__$f = script$e;

  /* template */

    /* style */
    const __vue_inject_styles__$f = function (inject) {
      if (!inject) return
      inject("data-v-1174fb10_0", { source: "\n.mg-code {\n\tborder: 1px solid #f0f0f0;\n\tborder-radius: 5px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgCode.vue"],"names":[],"mappings":";AAqEA;CACA,yBAAA;CACA,kBAAA;AACA","file":"mgCode.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgCode', {\n\tmeta: {\n\t\ttitle: 'Code Editor',\n\t\ticon: 'fal fa-code',\n\t\tcategory: 'Complex Inputs',\n\t\tpreferId: true,\n\t},\n\tprops: {\n\t\tsyntax: {type: 'mgChoiceDropdown', enum: ['text', 'json', 'javascript', 'html', 'css'], default: 'json'},\n\t\tconvert: {type: 'mgToggle', default: true, showIf: 'syntax == \"json\"', help: 'Convert data back to a native JS object'},\n\t\ttheme: {type: 'mgChoiceDropdown', enum: ['chrome'], advanced: true, default: 'chrome', help: 'The syntax color scheme to use'},\n\t\theight: {type: 'mgText', default: '400px', help: 'The size of the editing window as a valid CSS measurement', advanced: true},\n\t},\n\tbeforeDestroy() {\n\t\tthis.editor.destroy();\n\t\tthis.editor.container.remove();\n\t},\n\tmounted() {\n\t\tthis.editor = ace.edit(this.$el);\n\t\tthis.editor.$blockScrolling = Infinity;\n\n\t\tthis.editor.setValue(\n\t\t\t_.isObject(this.data) ? JSON.stringify(this.data, null, '\\t') // Parse raw objects into JSON\n\t\t\t: this.data ? this.data\n\t\t\t: ''\n\t\t, 1);\n\n\t\tthis.editor.setOptions({\n\t\t\tshowPrintMargin: false,\n\t\t});\n\n\t\tthis.editor.on('change', ()=> {\n\t\t\tvar value = this.editor.getvalueue();\n\t\t\tif (this.$props.convert && this.$props.syntax == 'json') {\n\t\t\t\ttry {\n\t\t\t\t\tvalue = JSON.parse(value);\n\t\t\t\t\tthis.$mgForm.$emit('mgChange', {path: this.$props.id, value})\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Silently fail as the JSON is invalueid\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.$mgForm.$emit('mgChange', {path: this.$props.id, value})\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.$nextTick(()=> this.editor.resize());\n\n\t\tthis.$watch('config', ()=> {\n\t\t\tif (this.$props.syntax) this.editor.getSession().setMode(`ace/mode/${this.$props.syntax}`);\n\t\t\tif (this.$props.theme) this.editor.setTheme(`ace/theme/${this.$props.theme}`);\n\t\t}, {\n\t\t\t// FIXME: deep?\n\t\t\timmediate: true\n\t\t});\n\t},\n\trender(h) {\n\t\treturn h('div', {\n\t\t\tattrs: {\n\t\t\t\tclass: 'mg-code',\n\t\t\t\tstyle: `height: ${this.$props.height}; width: 100%`,\n\t\t\t},\n\t\t});\n\t},\n});\n</script>\n\n<style>\n.mg-code {\n\tborder: 1px solid #f0f0f0;\n\tborder-radius: 5px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$f = undefined;
    /* module identifier */
    const __vue_module_identifier__$f = undefined;
    /* functional template */
    const __vue_is_functional_template__$f = undefined;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$f = normalizeComponent(
      {},
      __vue_inject_styles__$f,
      __vue_script__$f,
      __vue_scope_id__$f,
      __vue_is_functional_template__$f,
      __vue_module_identifier__$f,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgCode = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$f
  });

  var vueSwatches_min = createCommonjsModule(function (module, exports) {
  !function(e,t){module.exports=t();}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r});},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0});},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=11)}([function(e,t,n){t.__esModule=!0;var r,i=n(43),o=(r=i)&&r.__esModule?r:{default:r};t.default=o.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e};},function(e,t){e.exports=function(e){try{return !!e()}catch(e){return !0}};},function(e,t,n){e.exports=!n(1)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a});},function(e,t){e.exports=function(e){return "object"==typeof e?null!==e:"function"==typeof e};},function(e,t){var n=e.exports={version:"2.5.6"};"number"==typeof __e&&(__e=n);},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n);},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)};},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e};},function(e,t,n){var r=n(27);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return "String"==r(e)?e.split(""):Object(e)};},function(e,t,n){var r=n(8),i=n(7);e.exports=function(e){return r(i(e))};},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)};},function(e,t,n){n.r(t);var r=n(0),i=n.n(r),o={basic:{swatches:["#1FBC9C","#1CA085","#2ECC70","#27AF60","#3398DB","#2980B9","#A463BF","#8E43AD","#3D556E","#222F3D","#F2C511","#F39C19","#E84B3C","#C0382B","#DDE6E8","#BDC3C8"],rowLength:4},"text-basic":{swatches:["#CC0001","#E36101","#FFCC00","#009900","#0066CB","#000000","#FFFFFF"],showBorder:!0},"text-advanced":{swatches:[["#000000","#434343","#666666","#999999","#b7b7b7","#cccccc","#d9d9d9","#efefef","#f3f3f3","#ffffff"],["#980000","#ff0000","#ff9900","#ffff00","#00ff00","#00ffff","#4a86e8","#0000ff","#9900ff","#ff00ff"],["#e6b8af","#f4cccc","#fce5cd","#fff2cc","#d9ead3","#d0e0e3","#c9daf8","#cfe2f3","#d9d2e9","#ead1dc"],["#dd7e6b","#ea9999","#f9cb9c","#ffe599","#b6d7a8","#a2c4c9","#a4c2f4","#9fc5e8","#b4a7d6","#d5a6bd"],["#cc4125","#e06666","#f6b26b","#ffd966","#93c47d","#76a5af","#6d9eeb","#6fa8dc","#8e7cc3","#c27ba0"],["#a61c00","#cc0000","#e69138","#f1c232","#6aa84f","#45818e","#3c78d8","#3d85c6","#674ea7","#a64d79"],["#85200c","#990000","#b45f06","#bf9000","#38761d","#134f5c","#1155cc","#0b5394","#351c75","#741b47"],["#5b0f00","#660000","#783f04","#7f6000","#274e13","#0c343d","#1c4587","#073763","#20124d","#4c1130"]],borderRadius:"0",rowLength:10,swatchSize:24,spacingSize:0},"material-basic":{swatches:["#F44336","#E91E63","#9C27B0","#673AB7","#3F51B5","#2196F3","#03A9F4","#00BCD4","#009688","#4CAF50","#8BC34A","#CDDC39","#FFEB3B","#FFC107","#FF9800","#FF5722","#795548","#9E9E9E","#607D8B"]},"material-light":{swatches:["#EF9A9A","#F48FB1","#CE93D8","#B39DDB","#9FA8DA","#90CAF9","#81D4FA","#80DEEA","#80CBC4","#A5D6A7","#C5E1A5","#E6EE9C","#FFF59D","#FFE082","#FFCC80","#FFAB91","#BCAAA4","#EEEEEE","#B0BEC5"]},"material-dark":{swatches:["#D32F2F","#C2185B","#7B1FA2","#512DA8","#303F9F","#1976D2","#0288D1","#0097A7","#00796B","#388E3C","#689F38","#AFB42B","#FBC02D","#FFA000","#F57C00","#E64A19","#5D4037","#616161","#455A64"]}};function s(e,t,n,r,i,o,s,c){var a=typeof(e=e||{}).default;"object"!==a&&"function"!==a||(e=e.default);var u,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId=o),s?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s);},l._ssrRegister=u):i&&(u=c?function(){i.call(this,this.$root.$options.shadowRoot);}:i),u)if(l.functional){l._injectStyles=u;var p=l.render;l.render=function(e,t){return u.call(t),p(e,t)};}else{var h=l.beforeCreate;l.beforeCreate=h?[].concat(h,u):[u];}return {exports:e,options:l}}var c=s({name:"swatches",components:{Swatch:s({name:"swatch",components:{Check:s({name:"check",data:function(){return {}}},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"vue-swatches__check__wrapper vue-swatches--has-children-centered"},[t("div",{staticClass:"vue-swatches__check__circle vue-swatches--has-children-centered"},[t("svg",{staticClass:"check",attrs:{version:"1.1",role:"presentation",width:"12",height:"12",viewBox:"0 0 1792 1792"}},[t("path",{staticClass:"vue-swatches__check__path",attrs:{d:"M1671 566q0 40-28 68l-724 724-136 136q-28 28-68 28t-68-28l-136-136-362-362q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 295 656-657q28-28 68-28t68 28l136 136q28 28 28 68z"}})])])])},[],!1,function(e){n(13);},null,null).exports},props:{borderRadius:{type:String},disabled:{type:Boolean},exceptionMode:{type:String},isException:{type:Boolean,default:!1},selected:{type:Boolean,default:!1},showCheckbox:{type:Boolean},showBorder:{type:Boolean},size:{type:Number},spacingSize:{type:Number},swatchColor:{type:String,default:""},swatchStyle:{type:Object}},data:function(){return {}},computed:{computedSwatchStyle:function(){return {display:this.isException&&"hidden"===this.exceptionMode?"none":"inline-block",width:this.size+"px",height:this.size+"px",marginBottom:this.spacingSize+"px",marginRight:this.spacingSize+"px",borderRadius:this.borderRadius,backgroundColor:""!==this.swatchColor?this.swatchColor:"#FFFFFF",cursor:this.cursorStyle}},cursorStyle:function(){return this.disabled?"not-allowed":this.isException&&"disabled"===this.exceptionMode?"not-allowed":"pointer"},swatchStyles:function(){return [this.computedSwatchStyle,this.swatchStyle]}}},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"vue-swatches__swatch",class:{"vue-swatches__swatch--border":e.showBorder,"vue-swatches__swatch--selected":e.selected,"vue-swatches__swatch--is-exception":e.isException||e.disabled},style:e.swatchStyles},[""===e.swatchColor?n("div",{staticClass:"vue-swatches__diagonal--wrapper vue-swatches--has-children-centered"},[n("div",{staticClass:"vue-swatches__diagonal"})]):e._e(),e._v(" "),n("check",{directives:[{name:"show",rawName:"v-show",value:e.showCheckbox&&e.selected,expression:"showCheckbox && selected"}]})],1)},[],!1,function(e){n(15);},null,null).exports},props:{backgroundColor:{type:String,default:"#ffffff"},closeOnSelect:{type:Boolean,default:!0},colors:{type:[Array,Object,String],default:"basic"},exceptions:{type:Array,default:function(){return []}},exceptionMode:{type:String,default:"disabled"},disabled:{type:Boolean,default:!1},fallbackInputClass:{type:[Array,Object,String],default:null},fallbackOkClass:{type:[Array,Object,String],default:null},fallbackOkText:{type:String,default:"Ok"},fallbackInputType:{type:String,default:function(){return "text"},validator:function(e){return -1!==["text","color"].indexOf(e)}},inline:{type:Boolean,default:!1},maxHeight:{type:[Number,String],default:null},shapes:{type:String,default:"squares"},popoverTo:{type:String,default:"right"},rowLength:{type:[Number,String],default:null},showBorder:{type:Boolean,default:null},showFallback:{type:Boolean,default:!1},showCheckbox:{type:Boolean,default:!0},swatchSize:{type:[Number,String],default:null},swatchStyle:{type:[Object,Array],default:function(){}},triggerStyle:{type:[Object,Array],default:function(){}},wrapperStyle:{type:[Object,Array],default:function(){}},value:{type:String,default:null}},data:function(){return {presetBorderRadius:null,presetMaxHeight:null,presetRowLength:null,presetShowBorder:null,presetSwatchSize:null,presetSpacingSize:null,internalValue:this.value,internalIsOpen:!1}},computed:{isNested:function(){return !!(this.computedColors&&this.computedColors.length>0&&this.computedColors[0]instanceof Array)},isOpen:function(){return !this.inline&&this.internalIsOpen},isNoColor:function(){return this.checkEquality("",this.value)},computedColors:function(){return this.colors instanceof Array?this.colors:this.extractSwatchesFromPreset(this.colors)},computedBorderRadius:function(){return null!==this.presetBorderRadius?this.presetBorderRadius:this.borderRadius},computedExceptionMode:function(){return "hidden"===this.exceptionMode?this.exceptionMode:"disabled"===this.exceptionMode?this.exceptionMode:void 0},computedMaxHeight:function(){return null!==this.maxHeight?Number(this.maxHeight):null!==this.presetMaxHeight?this.presetMaxHeight:300},computedRowLength:function(){return null!==this.rowLength?Number(this.rowLength):null!==this.presetRowLength?this.presetRowLength:4},computedSwatchSize:function(){return null!==this.swatchSize?Number(this.swatchSize):null!==this.presetSwatchSize?this.presetSwatchSize:42},computedSpacingSize:function(){return null!==this.presetSpacingSize?this.presetSpacingSize:this.spacingSize},computedShowBorder:function(){return null!==this.showBorder?this.showBorder:null!==this.presetShowBorder&&this.presetShowBorder},borderRadius:function(){return "squares"===this.shapes?Math.round(.25*this.computedSwatchSize)+"px":"circles"===this.shapes?"50%":void 0},spacingSize:function(){return Math.round(.25*this.computedSwatchSize)},wrapperWidth:function(){return this.computedRowLength*(this.computedSwatchSize+this.computedSpacingSize)},computedtriggerStyle:function(){return {width:"42px",height:"42px",backgroundColor:this.value?this.value:"#ffffff",borderRadius:"circles"===this.shapes?"50%":"10px"}},triggerStyles:function(){return [this.computedtriggerStyle,this.triggerStyle]},containerStyle:function(){var e={backgroundColor:this.backgroundColor},t={};return this.inline?e:("right"===this.popoverTo?t={left:0}:"left"===this.popoverTo&&(t={right:0}),i()({},t,e,{maxHeight:this.computedMaxHeight+"px"}))},containerStyles:function(){return [this.containerStyle]},computedWrapperStyle:function(){var e={paddingTop:this.computedSpacingSize+"px",paddingLeft:this.computedSpacingSize+"px"};return this.inline?e:i()({},e,{width:this.wrapperWidth+"px"})},wrapperStyles:function(){return [this.computedWrapperStyle,this.wrapperStyle]},computedFallbackWrapperStyle:function(){var e={marginLeft:this.computedSpacingSize+"px",paddingBottom:this.computedSpacingSize+"px"};return this.inline?e:i()({},e,{width:this.wrapperWidth-this.computedSpacingSize+"px"})},computedFallbackWrapperStyles:function(){return [this.computedFallbackWrapperStyle]}},watch:{value:function(e){this.internalValue=e;}},methods:{checkEquality:function(e,t){return !(!e&&""!==e||!t&&""!==t)&&e.toUpperCase()===t.toUpperCase()},checkException:function(e){return -1!==this.exceptions.map(function(e){return e.toUpperCase()}).indexOf(e.toUpperCase())},hidePopover:function(){this.internalIsOpen=!1,this.$el.blur(),this.$emit("close",this.internalValue);},onBlur:function(e){this.isOpen&&(null!==e&&this.$el.contains(e)||(this.internalIsOpen=!1,this.$emit("close",this.internalValue)));},onFallbackButtonClick:function(){this.hidePopover();},showPopover:function(){this.isOpen||this.inline||this.disabled||(this.internalIsOpen=!0,this.$el.focus(),this.$emit("open"));},togglePopover:function(){this.isOpen?this.hidePopover():this.showPopover();},updateSwatch:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).fromFallbackInput;this.checkException(e)||this.disabled||(this.internalValue=e,this.$emit("input",e),!this.closeOnSelect||this.inline||t||this.hidePopover());},extractSwatchesFromPreset:function(e){var t=null;return (t=e instanceof Object?e:o[e]).borderRadius&&(this.presetBorderRadius=t.borderRadius),t.maxHeight&&(this.presetMaxHeight=t.maxHeight),t.rowLength&&(this.presetRowLength=t.rowLength),t.showBorder&&(this.presetShowBorder=t.showBorder),t.swatchSize&&(this.presetSwatchSize=t.swatchSize),(0===t.spacingSize||t.spacingSize)&&(this.presetSpacingSize=t.spacingSize),t.swatches}}},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"vue-swatches",attrs:{tabindex:"0"},on:{blur:function(t){return t.target!==t.currentTarget?null:(n=t,e.onBlur(n.relatedTarget));var n;}}},[e.inline?e._e():n("div",{ref:"trigger-wrapper",on:{click:e.togglePopover}},[e._t("trigger",[n("div",{staticClass:"vue-swatches__trigger",class:{"vue-swatches--is-empty":!e.value,"vue-swatches--is-disabled":e.disabled},style:e.triggerStyles},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isNoColor,expression:"isNoColor"}],staticClass:"vue-swatches__diagonal--wrapper vue-swatches--has-children-centered"},[n("div",{staticClass:"vue-swatches__diagonal"})])])])],2),e._v(" "),n("transition",{attrs:{name:"vue-swatches-show-hide"}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.inline||e.isOpen,expression:"inline || isOpen"}],staticClass:"vue-swatches__container",class:{"vue-swatches--inline":e.inline},style:e.containerStyles},[n("div",{staticClass:"vue-swatches__wrapper",style:e.wrapperStyles},[e.isNested?e._l(e.computedColors,function(t,r){return n("div",{key:r,staticClass:"vue-swatches__row"},e._l(t,function(t){return n("swatch",{key:t,attrs:{"border-radius":e.computedBorderRadius,disabled:e.disabled,"exception-mode":e.computedExceptionMode,"is-exception":e.checkException(t),selected:e.checkEquality(t,e.value),size:e.computedSwatchSize,"spacing-size":e.computedSpacingSize,"show-border":e.computedShowBorder,"show-checkbox":e.showCheckbox,"swatch-color":t,"swatch-style":e.swatchStyle},nativeOn:{click:function(n){e.updateSwatch(t);}}})}))}):e._l(e.computedColors,function(t){return n("swatch",{key:t,attrs:{"border-radius":e.computedBorderRadius,disabled:e.disabled,"exception-mode":e.computedExceptionMode,"is-exception":e.checkException(t),selected:e.checkEquality(t,e.value),size:e.computedSwatchSize,"spacing-size":e.computedSpacingSize,"show-border":e.computedShowBorder,"show-checkbox":e.showCheckbox,"swatch-color":t,"swatch-style":e.swatchStyle},nativeOn:{click:function(n){e.updateSwatch(t);}}})})],2),e._v(" "),e.showFallback?n("div",{staticClass:"vue-swatches__fallback__wrapper",style:e.computedFallbackWrapperStyles},[n("span",{staticClass:"vue-swatches__fallback__input--wrapper"},[n("input",{ref:"fallbackInput",staticClass:"vue-swatches__fallback__input",class:e.fallbackInputClass,attrs:{type:e.fallbackInputType},domProps:{value:e.internalValue},on:{input:function(t){return e.updateSwatch(t.target.value,{fromFallbackInput:!0})}}})]),e._v(" "),n("button",{staticClass:"vue-swatches__fallback__button",class:e.fallbackOkClass,on:{click:function(t){return t.preventDefault(),e.onFallbackButtonClick(t)}}},[e._v("\n          "+e._s(e.fallbackOkText)+"\n        ")])]):e._e()])])],1)},[],!1,function(e){n(45);},null,null).exports;n.d(t,"Swatches",function(){return c});t.default=c;},,function(e,t,n){},,function(e,t,n){},function(e,t,n){var r=n(7);e.exports=function(e){return Object(r(e))};},function(e,t){t.f={}.propertyIsEnumerable;},function(e,t){t.f=Object.getOwnPropertySymbols;},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");},function(e,t){var n=0,r=Math.random();e.exports=function(e){return "Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))};},function(e,t){e.exports=!0;},function(e,t,n){var r=n(4),i=n(5),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(21)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"});},function(e,t,n){var r=n(22)("keys"),i=n(20);e.exports=function(e){return r[e]||(r[e]=i(e))};},function(e,t,n){var r=n(6),i=Math.max,o=Math.min;e.exports=function(e,t){return (e=r(e))<0?i(e+t,0):o(e,t)};},function(e,t,n){var r=n(6),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0};},function(e,t,n){var r=n(9),i=n(25),o=n(24);e.exports=function(e){return function(t,n,s){var c,a=r(t),u=i(a.length),l=o(s,u);if(e&&n!=n){for(;u>l;)if((c=a[l++])!=c)return !0}else for(;u>l;l++)if((e||l in a)&&a[l]===n)return e||l||0;return !e&&-1}};},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)};},function(e,t,n){var r=n(10),i=n(9),o=n(26)(!1),s=n(23)("IE_PROTO");e.exports=function(e,t){var n,c=i(e),a=0,u=[];for(n in c)n!=s&&r(c,n)&&u.push(n);for(;t.length>a;)r(c,n=t[a++])&&(~o(u,n)||u.push(n));return u};},function(e,t,n){var r=n(28),i=n(19);e.exports=Object.keys||function(e){return r(e,i)};},function(e,t,n){var r=n(29),i=n(18),o=n(17),s=n(16),c=n(8),a=Object.assign;e.exports=!a||n(1)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e;}),7!=a({},e)[n]||Object.keys(a({},t)).join("")!=r})?function(e,t){for(var n=s(e),a=arguments.length,u=1,l=i.f,p=o.f;a>u;)for(var h,f=c(arguments[u++]),d=l?r(f).concat(l(f)):r(f),w=d.length,v=0;w>v;)p.call(f,h=d[v++])&&(n[h]=f[h]);return n}:a;},function(e,t){e.exports=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}};},function(e,t,n){var r=n(3);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")};},function(e,t,n){var r=n(3),i=n(5).document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}};},function(e,t,n){e.exports=!n(2)&&!n(1)(function(){return 7!=Object.defineProperty(n(33)("div"),"a",{get:function(){return 7}}).a});},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e};},function(e,t,n){var r=n(35),i=n(34),o=n(32),s=Object.defineProperty;t.f=n(2)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return "value"in n&&(e[t]=n.value),e};},function(e,t,n){var r=n(36),i=n(31);e.exports=n(2)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e};},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e};},function(e,t,n){var r=n(38);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}};},function(e,t,n){var r=n(5),i=n(4),o=n(39),s=n(37),c=n(10),a=function(e,t,n){var u,l,p,h=e&a.F,f=e&a.G,d=e&a.S,w=e&a.P,v=e&a.B,b=e&a.W,y=f?i:i[t]||(i[t]={}),g=y.prototype,S=f?r:d?r[t]:(r[t]||{}).prototype;for(u in f&&(n=t),n)(l=!h&&S&&void 0!==S[u])&&c(y,u)||(p=l?S[u]:n[u],y[u]=f&&"function"!=typeof S[u]?n[u]:v&&l?o(p,r):b&&S[u]==p?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(p):w&&"function"==typeof p?o(Function.call,p):p,w&&((y.virtual||(y.virtual={}))[u]=p,e&a.R&&g&&!g[u]&&s(g,u,p)));};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,e.exports=a;},function(e,t,n){var r=n(40);r(r.S+r.F,"Object",{assign:n(30)});},function(e,t,n){n(41),e.exports=n(4).Object.assign;},function(e,t,n){e.exports={default:n(42),__esModule:!0};},,function(e,t,n){}])});
  });

  var Swatches = unwrapExports(vueSwatches_min);
  var vueSwatches_min_1 = vueSwatches_min.VueSwatches;

  var script$f = Vue.mgComponent('mgColor', {
    meta: {
      title: 'Color',
      icon: 'far fa-paint-roller',
      category: 'Simple Inputs',
      preferId: true,
      shorthand: ['color', 'hue', 'swatch']
    },
    props: {
      required: {
        type: 'mgToggle',
        "default": false
      },
      colorSet: {
        type: 'mgChoiceDropdown',
        "enum": [{
          id: 'basic',
          title: 'Basic'
        }, {
          id: 'material-light',
          title: 'Material'
        }, {
          id: 'text-advanced',
          title: 'Full swatch'
        }],
        "default": 'text-advanced'
      },
      "interface": {
        type: 'mgChoiceDropdown',
        "default": 'input',
        "enum": ['input', 'colorOnly']
      },
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when there is no value'
      },
      popoverSide: {
        type: 'mgChoiceButtons',
        "enum": ['left', 'right'],
        advanced: true
      }
    },
    components: {
      Swatches: Swatches
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      change: function change(e) {
        var value = e.target.value;

        if (value && /^#[0-9A-F]+$/i.test(value)) {
          this.data = value;
        }
      }
    }
  });

  /* script */
  const __vue_script__$g = script$f;

  /* template */
  var __vue_render__$a = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-color" },
      [
        _vm.$props.interface == "input"
          ? _c("div", { staticClass: "input-group" }, [
              _c(
                "div",
                { staticClass: "input-group-prepend" },
                [
                  _c("swatches", {
                    staticClass: "input-group-text",
                    attrs: {
                      value: _vm.data,
                      colors: _vm.$props.colorSet,
                      "popover-to": _vm.$props.popoverSide
                    },
                    on: {
                      input: function($event) {
                        _vm.data = $event.toUpperCase();
                      }
                    }
                  })
                ],
                1
              ),
              _vm._v(" "),
              _c("input", {
                staticClass: "form-control",
                attrs: { type: "text", placeholder: _vm.$props.placeholder },
                domProps: { value: _vm.data },
                on: { input: _vm.change }
              })
            ])
          : _c("swatches", {
              attrs: {
                value: _vm.data,
                colors: _vm.$props.colorSet,
                "popover-to": _vm.$props.popoverSide
              },
              on: {
                input: function($event) {
                  _vm.data = $event.toUpperCase();
                }
              }
            })
      ],
      1
    )
  };
  var __vue_staticRenderFns__$a = [];
  __vue_render__$a._withStripped = true;

    /* style */
    const __vue_inject_styles__$g = function (inject) {
      if (!inject) return
      inject("data-v-6cab4432_0", { source: "\n.mg-color .input-group > .input-group-prepend .vue-swatches {\n\tpadding: 3px;\n}\n.mg-color .input-group > .input-group-prepend .vue-swatches .vue-swatches__trigger {\n\twidth: 30px !important;\n\theight: 30px !important;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgColor.vue"],"names":[],"mappings":";AAmEA;CACA,YAAA;AACA;AAEA;CACA,sBAAA;CACA,uBAAA;AACA","file":"mgColor.vue","sourcesContent":["<script>\nimport Swatches from 'vue-swatches';\nimport 'vue-swatches/dist/vue-swatches.min.css';\n\nexport default Vue.mgComponent('mgColor', {\n\tmeta: {\n\t\ttitle: 'Color',\n\t\ticon: 'far fa-paint-roller',\n\t\tcategory: 'Simple Inputs',\n\t\tpreferId: true,\n\t\tshorthand: ['color', 'hue', 'swatch'],\n\t},\n\tprops: {\n\t\trequired: {type: 'mgToggle', default: false},\n\t\tcolorSet: {type: 'mgChoiceDropdown', enum: [{id: 'basic', title: 'Basic'}, {id: 'material-light', title: 'Material'}, {id: 'text-advanced', title: 'Full swatch'}], default: 'text-advanced'},\n\t\tinterface: {type: 'mgChoiceDropdown', default: 'input', enum: ['input', 'colorOnly']},\n\t\tplaceholder: {type: 'mgText', help: 'Ghost text to display when there is no value'},\n\t\tpopoverSide: {type: 'mgChoiceButtons', enum: ['left', 'right'], advanced: true},\n\t},\n\tcomponents: {Swatches},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\t},\n\tmethods: {\n\t\tchange(e) {\n\t\t\tvar value = e.target.value;\n\t\t\tif (value && /^#[0-9A-F]+$/i.test(value)) {\n\t\t\t\tthis.data = value;\n\t\t\t}\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-color\">\n\t\t<div v-if=\"$props.interface == 'input'\" class=\"input-group\">\n\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t<swatches\n\t\t\t\t\t:value=\"data\"\n\t\t\t\t\t:colors=\"$props.colorSet\"\n\t\t\t\t\t:popover-to=\"$props.popoverSide\"\n\t\t\t\t\tclass=\"input-group-text\"\n\t\t\t\t\t@input=\"data = $event.toUpperCase()\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<input\n\t\t\t\t:value=\"data\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:placeholder=\"$props.placeholder\"\n\t\t\t\t@input=\"change\"\n\t\t\t/>\n\t\t</div>\n\t\t<swatches\n\t\t\tv-else\n\t\t\t:value=\"data\"\n\t\t\t:colors=\"$props.colorSet\"\n\t\t\t:popover-to=\"$props.popoverSide\"\n\t\t\t@input=\"data = $event.toUpperCase()\"\n\t\t/>\n\t</div>\n</template>\n\n<style>\n.mg-color .input-group > .input-group-prepend .vue-swatches {\n\tpadding: 3px;\n}\n\n.mg-color .input-group > .input-group-prepend .vue-swatches .vue-swatches__trigger {\n\twidth: 30px !important;\n\theight: 30px !important;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$g = undefined;
    /* module identifier */
    const __vue_module_identifier__$g = undefined;
    /* functional template */
    const __vue_is_functional_template__$g = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$g = normalizeComponent(
      { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
      __vue_inject_styles__$g,
      __vue_script__$g,
      __vue_scope_id__$g,
      __vue_is_functional_template__$g,
      __vue_module_identifier__$g,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgColor = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$g
  });

  /**
  * Instance of a MacGyver widget
  * This is the parent of all other mg* components
  *
  * @param {Object} config The MacGyver component config - this is a simple object containing all prototype $props mappings
  */
  var script$g = Vue.component('mgComponent', {
    inject: ['$mgForm'],
    data: function data() {
      return {
        data: undefined
      };
    },
    props: {
      config: {
        type: Object,
        required: true
      }
    },
    render: function render(h) {
      var _this = this;

      if (!this.$macgyver.widgets[this.$props.config.type]) return h('mg-error', {
        props: {
          text: "Unknown widget type \"".concat(this.$props.config.type, "\"")
        }
      });
      return h(this.$props.config.type, {
        props: this.$props.config,
        nativeOn: {
          click: function click(e) {
            return _this.$mgForm.$emit('mgComponent.click', _this, e);
          },
          mousedown: function mousedown(e) {
            return _this.$mgForm.$emit('mgComponent.mouseDown', _this, e);
          },
          mouseup: function mouseup(e) {
            return _this.$mgForm.$emit('mgComponent.mouseUp', _this, e);
          },
          mousemove: function mousemove(e) {
            return _this.$mgForm.$emit('mgComponent.mouseMove', _this, e);
          },
          mouseenter: function mouseenter(e) {
            return _this.$mgForm.$emit('mgComponent.mouseEnter', _this, e);
          },
          mouseleave: function mouseleave(e) {
            return _this.$mgForm.$emit('mgComponent.mouseLeave', _this, e);
          },
          mouseover: function mouseover(e) {
            return _this.$mgForm.$emit('mgComponent.mouseOver', _this, e);
          },
          mouseout: function mouseout(e) {
            return _this.$mgForm.$emit('mgComponent.mouseOut', _this, e);
          }
        }
      });
    }
  });

  /* script */
  const __vue_script__$h = script$g;

  /* template */

    /* style */
    const __vue_inject_styles__$h = undefined;
    /* scoped */
    const __vue_scope_id__$h = undefined;
    /* module identifier */
    const __vue_module_identifier__$h = undefined;
    /* functional template */
    const __vue_is_functional_template__$h = undefined;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$h = normalizeComponent(
      {},
      __vue_inject_styles__$h,
      __vue_script__$h,
      __vue_scope_id__$h,
      __vue_is_functional_template__$h,
      __vue_module_identifier__$h,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgComponent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$h
  });

  /**
  * MacGyver component loader
  * This is a meta component that loads other dynamic components as an array
  */
  var script$h = Vue.mgComponent('mgContainer', {
    inject: {
      $mgForm: {
        from: '$mgForm'
      },
      $mgFormEditor: {
        from: '$mgFormEditor',
        "default": false
      }
    },
    meta: {
      title: 'Container layout',
      icon: 'far fa-th-large',
      category: 'Layout',
      preferId: false
    },
    props: {
      layout: {
        type: 'mgChoiceRadio',
        title: 'Layout profile',
        help: 'How to layout child elements',
        "default": 'form',
        "enum": [{
          id: 'form',
          title: 'Simple form layout'
        }, {
          id: 'formFloating',
          title: 'Form with floating labels'
        }, {
          id: 'card',
          title: 'Card based layout'
        }, {
          id: 'columns',
          title: 'Vertical column layout'
        }, {
          id: 'query',
          title: 'Query constructor'
        }]
      },
      formClass: {
        type: 'mgChoiceDropdown',
        title: 'Form style',
        showIf: {
          layout: {
            $in: ['form', 'card']
          }
        },
        "default": 'normal',
        "enum": [{
          id: 'normal',
          title: 'Normal'
        }, {
          id: 'titles-above',
          title: 'Titles above'
        }]
      },
      title: {
        type: 'mgText',
        showIf: {
          layout: 'card'
        }
      },
      showTitles: {
        type: 'mgToggle',
        "default": true,
        help: 'Show titles for fields',
        showIf: {
          layout: {
            $in: ['form', 'card']
          }
        }
      },
      columnHeaders: {
        type: 'mgToggle',
        "default": false,
        help: 'Show column headers',
        showIf: "layout == 'columns'"
      },
      collapsable: {
        type: 'mgToggle',
        "default": false,
        help: 'This card can be hidden',
        showIf: "layout == 'card'"
      },
      collapsed: {
        type: 'mgToggle',
        "default": false,
        help: 'This card is collapsed by default',
        showIf: "layout == 'card'"
      },
      border: {
        type: 'mgToggle',
        "default": true,
        help: 'Show a border around the container',
        showIf: "layout == 'columns'"
      },
      verbs: {
        type: 'mgTable',
        advanced: true,
        showIf: "layout == 'card'",
        items: [{
          id: 'icon',
          type: 'mgIcon'
        }, {
          id: 'tooltip',
          type: 'mgText'
        }, {
          id: 'class',
          type: 'mgText'
        }, {
          id: 'action',
          type: 'mgText'
        }]
      },
      items: {
        type: 'mgAlert',
        vueType: 'array',
        text: 'Use the editor to define child widgets'
      } // Child items

    },
    childProps: {
      help: {
        type: 'mgText',
        title: 'Help text',
        help: 'Optional help text for the item - just like what you are reading now'
      },
      showTitle: {
        type: 'mgToggle',
        "default": true,
        title: 'Show Title',
        help: 'Whether to show the side title for this element'
      },
      title: {
        type: 'mgText',
        title: 'Title'
      },
      rowClass: {
        type: 'mgChoiceDropdown',
        title: 'Styling',
        help: 'Additional styling to apply to the widget',
        "default": '',
        advanced: true,
        "enum": [{
          id: '',
          title: 'Normal'
        }, {
          id: 'mgContainerRowLarge',
          title: 'Large text'
        }]
      },
      onChange: {
        type: 'string',
        title: 'Change action',
        help: 'Action to trigger when the value of this component changes',
        advanced: true
      },
      show: {
        type: 'mgToggle',
        "default": true,
        advanced: true,
        help: 'Whether the item is visible by default'
      },
      showIf: {
        type: 'mgCode',
        syntax: 'text',
        advanced: true,
        help: 'A simple equality expression or Sift object to deteremine visibility'
      }
    },
    data: function data() {
      return {
        highlights: {},
        // Lookup of extra classes to add to widgets, each key is the array offset of the widget within this container, the value is an array of classes to add
        localData: {} // Lookup of immediate child data values, used when `$props.layout == 'formFloating'`

      };
    },
    mounted: function mounted() {
      var _this = this;

      if (this.$props.collapsable) {
        var $card = $(this.$el).find('.card').first();
        $card.find('.card-header').first().on('click', function () {
          var $body = $(_this.$el).find('.card-body');

          if ($card.hasClass('card-collapsed')) {
            $body.slideDown({
              complete: function complete() {
                return $card.removeClass('card-collapsed');
              }
            });
          } else {
            $body.slideUp({
              complete: function complete() {
                return $card.addClass('card-collapsed');
              }
            });
          }
        });
      }

      if (this.$props.layout == 'formFloating') {
        // When in floating mode we need to keep track of child data so we copy its value into our `localData` object lookup
        this.$mgForm.$on('changeItem', function (v) {
          // Bind to parent form handler
          if (_this.$props.items.some(function (item) {
            return item.$dataPath == v.path;
          })) {
            // Is this widget one of our immediate children?
            _this.$set(_this.localData, v.path, v.value); // Copy its data against our local copy

          }
        });
      }
    },
    methods: {
      /**
      * Emit an event passing this container as a scope
      * This is really just a wrapper to be able to pass this VueComponent to mgContainer.* emitters
      * @param {string} eventName Event to emit
      * @param {string} specPath The widget specPath
      * @param {number} widgetIndex The widget sending the message
      */
      componentEvent: function componentEvent(eventName, specPath, widgetIndex, vueEvent) {
        this.$mgForm.$emit(eventName, this, specPath, widgetIndex, vueEvent);
      },

      /**
      * Find the child index by its component
      * This works like findIndex only with Magyver components, ignoring all non-mg children when computing the index
      * @param {VueComponent} child The child offset to find
      * @returns {number} The offset of the component or boolean `false`
      */
      findChildIndex: function findChildIndex(child) {
        var result = _(this.$refs).map(function (v) {
          return v[0];
        }) // Dynamic refs always end up as an array of 1 item, so unpack that
        .reduce(function (t, v, i) {
          if (t.found) {
            // Already found the child
            return t;
          } else if (v._uid == child._uid) {
            // Found by direct UID
            return _objectSpread2({}, t, {
              found: true
            });
          } else if (v.$children && v.$children.length == 1 && v.$children[0]._uid == child._uid) {
            // Check into mgComponent wrappers
            return _objectSpread2({}, t, {
              found: true
            });
          } else if (v.$mgForm) {
            // Is an mgComponent {
            return _objectSpread2({}, t, {
              mgIndex: t.mgIndex + 1
            });
          } else {
            // Implied else - regular Vue component - skip incrementing when calculating the offset
            return t;
          }
        }, {
          found: false,
          mgIndex: 0
        });

        return result.found ? result.mgIndex : false;
      }
    }
  });

  /* script */
  const __vue_script__$i = script$h;

  /* template */
  var __vue_render__$b = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.$props.layout == "form" || _vm.$props.layout === undefined
      ? _c(
          "div",
          { staticClass: "mg-container", class: _vm.$props.formClass },
          _vm._l(_vm.$props.items, function(widget, widgetIndex) {
            return widget.show
              ? _c(
                  "div",
                  {
                    key: widget.id,
                    staticClass: "form-group row mg-component",
                    class: [
                      widget.mgValidation == "error" ? "has-error" : "",
                      widget.rowClass
                    ].concat(_vm.highlights[widgetIndex] || [])
                  },
                  [
                    widget.showTitle || _vm.$props.showTitles
                      ? _c(
                          "label",
                          { staticClass: "col-form-label text-left col-sm-3" },
                          [_vm._v("\n\t\t\t" + _vm._s(widget.title) + "\n\t\t")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _c(
                      "div",
                      {
                        staticClass: "col-form-value mg-component-wrapper",
                        class:
                          widget.showTitle || _vm.$props.showTitles
                            ? "col-sm-9"
                            : "col-sm-12"
                      },
                      [
                        _c("mg-component", {
                          ref: widgetIndex,
                          refInFor: true,
                          attrs: { config: widget }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    widget.help
                      ? _c(
                          "div",
                          {
                            staticClass: "help-block",
                            class:
                              widget.showTitle || _vm.$props.showTitles
                                ? "col-sm-9 col-sm-offset-3"
                                : "col-sm-12"
                          },
                          [_vm._v(_vm._s(widget.help))]
                        )
                      : _vm._e()
                  ]
                )
              : _vm._e()
          }),
          0
        )
      : _vm.$props.layout == "card"
      ? _c("div", { staticClass: "mg-container", class: _vm.$props.formClass }, [
          _c(
            "div",
            {
              staticClass: "card mg-container",
              class: {
                "card-collapsable": _vm.$props.collapsable,
                "card-collapsed": _vm.$props.collapsed
              }
            },
            [
              _vm.$props.title || (_vm.$props.verbs && _vm.$props.verbs.length)
                ? _c("div", { staticClass: "card-header" }, [
                    _vm._v("\n\t\t\t" + _vm._s(_vm.$props.title) + "\n\t\t\t"),
                    _vm.$props.verbs && _vm.$props.verbs.length
                      ? _c(
                          "div",
                          { staticClass: "card-verbs" },
                          _vm._l(_vm.$props.verbs, function(verb, verbIndex) {
                            return _c("a", {
                              directives: [
                                {
                                  name: "tooltip",
                                  rawName: "v-tooltip",
                                  value: verb.tooltip,
                                  expression: "verb.tooltip"
                                }
                              ],
                              key: verbIndex,
                              class: [verb.class, verb.icon],
                              on: {
                                click: function($event) {
                                  return _vm.$mgForm.run(_vm.form, verb.action)
                                }
                              }
                            })
                          }),
                          0
                        )
                      : _vm._e()
                  ])
                : _vm._e(),
              _vm._v(" "),
              _c(
                "div",
                { staticClass: "card-body" },
                _vm._l(_vm.$props.items, function(widget, widgetIndex) {
                  return widget.show
                    ? _c(
                        "div",
                        {
                          key: widget.id,
                          staticClass: "form-group row mg-component",
                          class: [
                            widget.mgValidation == "error" ? "has-error" : "",
                            widget.rowClass
                          ].concat(_vm.highlights[widgetIndex] || []),
                          on: {
                            click: function($event) {
                              return _vm.componentEvent(
                                "mgContainer.click",
                                widget.$specPath,
                                widgetIndex,
                                $event
                              )
                            },
                            mouseenter: function($event) {
                              return _vm.componentEvent(
                                "mgContainer.mouseEnter",
                                widget.$specPath,
                                widgetIndex,
                                $event
                              )
                            },
                            mouseleave: function($event) {
                              return _vm.componentEvent(
                                "mgContainer.mouseLeave",
                                widget.$specPath,
                                widgetIndex,
                                $event
                              )
                            }
                          }
                        },
                        [
                          _vm.$mgFormEditor
                            ? _c("mg-form-editor-controls", {
                                directives: [
                                  {
                                    name: "show",
                                    rawName: "v-show",
                                    value:
                                      _vm.highlights[widgetIndex] &&
                                      _vm.highlights[widgetIndex].some(function(
                                        c
                                      ) {
                                        return (
                                          c == "editHover" || c == "editEditing"
                                        )
                                      }),
                                    expression:
                                      "highlights[widgetIndex] && highlights[widgetIndex].some(c => c == 'editHover' || c == 'editEditing')"
                                  }
                                ],
                                attrs: { config: widget }
                              })
                            : _vm._e(),
                          _vm._v(" "),
                          widget.showTitle || _vm.$props.showTitles
                            ? _c(
                                "label",
                                {
                                  staticClass: "col-form-label text-left col-sm-3"
                                },
                                [
                                  _vm._v(
                                    "\n\t\t\t\t\t" +
                                      _vm._s(widget.title) +
                                      "\n\t\t\t\t"
                                  )
                                ]
                              )
                            : _vm._e(),
                          _vm._v(" "),
                          _c(
                            "div",
                            {
                              staticClass: "col-form-value mg-component-wrapper",
                              class:
                                widget.showTitle || _vm.$props.showTitles
                                  ? "col-sm-9"
                                  : "col-sm-12"
                            },
                            [
                              _c("mg-component", {
                                ref: widgetIndex,
                                refInFor: true,
                                attrs: { config: widget }
                              })
                            ],
                            1
                          ),
                          _vm._v(" "),
                          widget.help
                            ? _c(
                                "div",
                                {
                                  staticClass: "help-block",
                                  class:
                                    widget.showTitle || _vm.$props.showTitles
                                      ? "col-sm-9 col-sm-offset-3"
                                      : "col-sm-12"
                                },
                                [_vm._v(_vm._s(widget.help))]
                              )
                            : _vm._e()
                        ],
                        1
                      )
                    : _vm._e()
                }),
                0
              )
            ]
          )
        ])
      : _vm.$props.layout == "formFloating"
      ? _c(
          "div",
          _vm._l(_vm.$props.items, function(widget, widgetIndex) {
            return widget.show
              ? _c(
                  "div",
                  {
                    key: widget.id,
                    staticClass:
                      "form-group mgContainer-formFloating row mg-component",
                    class: [
                      widget.mgValidation == "error" ? "has-error" : "",
                      widget.rowClass
                    ].concat(_vm.highlights[widgetIndex] || [])
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "col-12 mg-component-wrapper" },
                      [
                        _c("mg-component", {
                          staticClass: "control-input",
                          class: !_vm.localData[widget.$dataPath] && "blank",
                          attrs: { config: widget }
                        }),
                        _vm._v(" "),
                        _vm.$props.showTitles
                          ? _c(
                              "label",
                              {
                                staticClass: "col-form-label text-left col-sm-3"
                              },
                              [
                                _vm._v(
                                  "\n\t\t\t\t" + _vm._s(widget.title) + "\n\t\t\t"
                                )
                              ]
                            )
                          : _vm._e()
                      ],
                      1
                    ),
                    _vm._v(" "),
                    widget.help
                      ? _c(
                          "div",
                          {
                            staticClass: "help-block",
                            class:
                              widget.showTitle || _vm.$props.showTitles
                                ? "col-sm-9 col-sm-offset-3"
                                : "col-sm-12"
                          },
                          [_vm._v(_vm._s(widget.help))]
                        )
                      : _vm._e()
                  ]
                )
              : _vm._e()
          }),
          0
        )
      : _vm.$props.layout == "columns"
      ? _c("div", [
          _c(
            "table",
            {
              staticClass: "mg-container",
              class: _vm.$props.border
                ? "table table-bordered"
                : "mg-container-columns-no-border",
              staticStyle: { width: "100%" }
            },
            [
              _vm.$props.columnHeaders
                ? _c("thead", [
                    _c(
                      "tr",
                      _vm._l(_vm.config.items, function(widget) {
                        return widget.show
                          ? _c("th", { key: widget.id }, [
                              _vm._v(_vm._s(widget.title))
                            ])
                          : _vm._e()
                      }),
                      0
                    )
                  ])
                : _vm._e(),
              _vm._v(" "),
              _c("tbody", [
                _c(
                  "tr",
                  _vm._l(_vm.$props.items, function(widget, widgetIndex) {
                    return widget.show
                      ? _c(
                          "td",
                          {
                            key: widget.id,
                            staticClass: "mg-component-wrapper",
                            class: [
                              widget.mgValidation == "error" ? "has-error" : "",
                              widget.rowClass
                            ].concat(_vm.highlights[widgetIndex] || [])
                          },
                          [
                            _c("mg-component", {
                              ref: widgetIndex,
                              refInFor: true,
                              attrs: { config: widget }
                            }),
                            _vm._v(" "),
                            widget.help
                              ? _c("div", { staticClass: "help-block" }, [
                                  _vm._v(_vm._s(widget.help))
                                ])
                              : _vm._e()
                          ],
                          1
                        )
                      : _vm._e()
                  }),
                  0
                )
              ])
            ]
          )
        ])
      : _vm.$props.layout == "query"
      ? _c("div", [
          _c(
            "div",
            { staticClass: "mg-container mg-container-query" },
            _vm._l(_vm.$props.items, function(rowWidget) {
              return _c("div", { key: rowWidget.id }, [
                rowWidget.type == "mgContainer" && rowWidget.layout == "query-row"
                  ? _c(
                      "div",
                      { staticClass: "row" },
                      _vm._l(rowWidget.items, function(colWidget) {
                        return _c(
                          "div",
                          {
                            key: colWidget.id,
                            staticClass: "col mg-component mg-component-wrapper"
                          },
                          [
                            _c("mg-component", {
                              ref: _vm.widgetIndex,
                              refInFor: true,
                              attrs: { config: colWidget }
                            })
                          ],
                          1
                        )
                      }),
                      0
                    )
                  : _c("div", { staticClass: "alert alert-danger" }, [
                      _vm._v(
                        "\n\t\t\t\tAll children of mgContainer[layout=query] must match the mgContainer[layout=queryRow]\n\t\t\t\t"
                      ),
                      _c("pre", [_vm._v(_vm._s(_vm.widget))])
                    ])
              ])
            }),
            0
          )
        ])
      : _c("div", { staticClass: "mg-container" }, [
          _c("div", { staticClass: "alert alert-danger" }, [
            _vm._v(
              '\n\t\tUnsupported mgContainer layout "' +
                _vm._s(_vm.$props.layout || "Unspecified") +
                '"\n\t\t'
            ),
            _c("pre", [_vm._v(_vm._s(_vm.$props))])
          ])
        ])
  };
  var __vue_staticRenderFns__$b = [];
  __vue_render__$b._withStripped = true;

    /* style */
    const __vue_inject_styles__$i = function (inject) {
      if (!inject) return
      inject("data-v-73579910_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* formClass > .titles-above {{{ */\n.mg-container.titles-above > .form-group,\n.mg-container.titles-above > .form-group,\n.mg-container.titles-above > .card > .card-body > .form-group,\n.mg-container.titles-above > .card > .card-body > .form-group {\n\tdisplay: block;\n}\n.mg-container.titles-above > .form-group > .col-form-label,\n.mg-container.titles-above > .form-group > .col-form-value,\n.mg-container.titles-above > .card > .card-body > .form-group > .col-form-label,\n.mg-container.titles-above > .card > .card-body > .form-group > .col-form-value {\n\twidth: 100%;\n\tmax-width: none;\n}\n/* }}} */\n\n/* Card layout {{{ */\n/* Collapsable card {{{ */\n.mg-container.card.card-collapsable {\n\ttransition: all 0.2s ease-in;\n}\n.mg-container.card.card-collapsable .card-header {\n\tcursor: pointer;\n}\n.mg-container.card.card-collapsable .card-header::after {\n\tfont-family: \"Font Awesome 5 Pro\";\n\tcontent: '\\f054';\n\tfloat: right;\n\ttransition: transform 0.4s;\n}\n.mg-container.card.card-collapsable:not(.card-collapsed) .card-header::after {\n\ttransform: rotate(90deg);\n}\n\n\n/* Collapsed card {{{ */\n.mg-container.card.card-collapsable.card-collapsed {\n\tbox-shadow: none;\n\tborder-bottom: none;\n\tmargin-bottom: 0px;\n}\n.mg-container.card.card-collapsable.card-collapsed .card-body {\n\tdisplay: none;\n}\n/* }}} */\n/* }}} */\n\n/* Card verbs {{{ */\n.mg-container.card .card-header .card-verbs {\n\tposition: absolute;\n\tright: 15px;\n\ttop: 10px;\n\tfont-size: 20px;\n}\n.mg-container.card .card-header .card-verbs > a {\n\tcolor: #999;\n\tpadding: 5px;\n}\n.mg-container.card .card-header .card-verbs > a:hover {\n\tcolor: #000;\n}\n/* }}} */\n/* }}} */\n\n/* formFloating {{{ */\n.mgContainer-formFloating > .col-12 {\n\tposition: relative;\n\tline-height: 14px;\n\tmargin: 0 0px;\n\tdisplay: inline-block;\n\twidth: 100%;\n}\n.mgContainer-formFloating > .col-12 > .control-input {\n\theight: 45px;\n\tpadding-top: 8px;\n\tpadding-bottom: 2px;\n\tpadding-left: 2px;\n\tpadding-right: 12px;\n\tfont-size: 15px;\n\tline-height: 1.42857143;\n\tcolor: #333333;\n\tbackground-color: #ffffff;\n\tbackground-image: none;\n\toutline: none;\n\t/* border: 1px solid rgba(120, 120, 120, 0.5);\n\t*/\n\tborder: none;\n\tborder-bottom: 1px solid #bbb;\n\t-moz-box-shadow: none;\n\t-webkit-box-shadow: none;\n\tbox-shadow: none;\n\tborder-radius: 0;\n\tposition: relative;\n}\n.mgContainer-formFloating > .col-12 > .control-input.blank + .col-form-label {\n\ttransform: translateY(0px);\n\tcolor: #bbb;\n\tfont-size: 15px;\n\tfont-weight: 100;\n\topacity: 1;\n}\n.mgContainer-formFloating > .col-12 > .control-input.control-input:focus + .col-form-label {\n\ttransform: translateY(-21px);\n\tcolor: #66afe9;\n\tfont-size: 14px;\n\topacity: 1;\n\tfont-weight: 100;\n\tbackground-color: white;\n}\n.mgContainer-formFloating > .col-12 > .col-form-label {\n\tcolor: #aaa;\n\tdisplay: inline-block;\n\tfont-size: 12px;\n\tposition: absolute;\n\tz-index: 2;\n\tleft: 2px;\n\ttop: 16px;\n\tpadding: 0 0px;\n\tpointer-events: none;\n\tbackground: white;\n\ttransition: all 300ms ease;\n\ttransform: translateY(-21px);\n\tfont-weight: 500;\n}\n/* }}} */\n\n/* Columns layout {{{ */\n.mg-container.mg-container-columns-no-border th,\n.mg-container.mg-container-columns-no-border td {\n\tpadding: 5px;\n}\n/* }}} */\n\n/* Query layout {{{ */\n.mg-container.mg-container-query .row {\n\tdisplay: block;\n}\n.mg-container.mg-container-query .col {\n\tdisplay: inline-flex;\n\twidth: 200px;\n\theight: 35px;\n\tmin-width: 200px;\n\tmargin-left: 30px;\n\tmargin-bottom: 10px;\n\tmax-width: 400px;\n\tposition: relative;\n\talign-items: center;\n\tbox-shadow: 1px 3px 5px 0px rgba(50, 50, 50, 0.75);\n\tborder-radius: 3px;\n\tcolor: #FFF;\n\theight: 38px;\n\tpadding: 5px 15px;\n\tbackground: #FFF;\n}\n\n/* Query > Background color scale {{{ */\n.mg-container.mg-container-query .col:nth-child(1) {\n\tbackground: #104E8B;\n}\n.mg-container.mg-container-query .col:nth-child(2) {\n\tbackground: #1874CD;\n}\n.mg-container.mg-container-query .col:nth-child(3) {\n\tbackground: #1C86EE;\n}\n/* }}} */\n\n/* Query > Connecting lines {{{ */\n/* Vertical */\n.mg-container.mg-container-query .row::before {\n\tbackground-color: #CCC;\n\tcontent: '';\n\tdisplay: block;\n\tposition: absolute;\n\twidth: 4px;\n\ttop: 17px;\n\tbottom: 30px;\n}\n\n/* Horizontal */\n.mg-container.mg-container-query .col::before {\n\tleft: -30px;\n\theight: 4px;\n\ttop: calc(50% - 2px);\n\twidth: 30px;\n\tbackground-color: #CCC;\n\tcontent: '';\n\tdisplay: block;\n\tposition: absolute;\n}\n/* }}} */\n\n/* Query > Basic Inputs {{{ */\n.mg-container.mg-container-query .col input {\n\tbackground: transparent;\n\tborder: 1px solid transparent;\n\tcolor: #FFF;\n\theight: 1.8em;\n\tborder-radius: 0px;\n}\n.mg-container.mg-container-query .col input[type=text] {\n\tborder-bottom: 1px solid #CCC;\n}\n.mg-container.mg-container-query .col input[type=number] {\n\ttext-align: center;\n}\n.mg-container.mg-container-query .col input:focus {\n\tbox-shadow: none;\n\tborder: 1px solid #CCC;\n}\n/* }}} */\n\n/* Query > Buttons {{{ */\n.mg-container.mg-container-query .col .btn {\n\tbox-shadow: none;\n\tpadding: 1px 5px;\n\tbackground: transparent;\n\tborder: 1px solid #003e7b;\n}\n.mg-container.mg-container-query .col .btn,\n.mg-container.mg-container-query .col svg {\n\topacity: 0.2;\n\ttransition: opacity 0.5s;\n}\n.mg-container.mg-container-query .row:hover .col .btn,\n.mg-container.mg-container-query .row:hover .col svg {\n\topacity: 1;\n}\n.mg-container.mg-container-query .col .vs__clear {\n\tdisplay: none;\n}\n/* }}} */\n\n/* Query > Dropdowns {{{ */\n.mg-container.mg-container-query .v-select {\n\twidth: 100%;\n}\n.mg-container.mg-container-query .v-select,\n.mg-container.mg-container-query .v-select .vs--searchable .vs__dropdown-toggle,\n.mg-container.mg-container-query .v-select .vs__selected,\n.mg-container.mg-container-query .v-select input,\n.mg-container.mg-container-query .v-select .vs__actions {\n\tcursor: pointer !important;\n}\n.mg-container.mg-container-query .v-select .vs__dropdown-toggle {\n\tborder: none;\n}\n.mg-container.mg-container-query .col .v-select .vs__selected {\n\tcolor: #FFF;\n}\n.mg-container.mg-container-query .col .v-select .vs__selected {\n\ttop: 3px;\n}\n.mg-container.mg-container-query .col .v-select .vs__actions svg,\n.mg-container.mg-container-query .col .v-select .vs__deselect {\n\tstroke: #FFF;\n\tfill: #FFF;\n}\n.mg-container.mg-container-query .col .v-select.mg-choice-tags .vs__selected-options .vs__selected {\n\tbackground-color: #5bc0de;\n\tborder-radius: 10px;\n\tcolor: #fff;\n\tdisplay: inline-block;\n\tfont-size: 12px;\n\tline-height: 1rem;\n\tmin-width: 10px;\n\tpadding: 1px 10px;\n\ttext-align: center;\n\tvertical-align: middle;\n\twhite-space: nowrap;\n\tborder: none;\n}\n/* }}} */\n\n/* Query > Toggle {{{ */\n.mg-container.mg-container-query .col .vue-js-switch {\n\tmargin: auto;\n\theight: 10px;\n\ttop: -5px;\n}\n/* }}} */\n/* }}} */\n\n/* Misc utility types {{{ */\n.mg-form .help-block {\n\tfont-size: 80%;\n\tcolor: #6c757d !important;\n}\n/* }}} */\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgTA,kCAAA;AACA;;;;CAIA,cAAA;AACA;AAEA;;;;CAIA,WAAA;CACA,eAAA;AACA;AACA,QAAA;;AAEA,oBAAA;AACA,yBAAA;AACA;CACA,4BAAA;AACA;AAEA;CACA,eAAA;AACA;AAEA;CACA,iCAAA;CACA,gBAAA;CACA,YAAA;CACA,0BAAA;AACA;AAEA;CACA,wBAAA;AACA;;;AAGA,uBAAA;AACA;CACA,gBAAA;CACA,mBAAA;CACA,kBAAA;AACA;AAEA;CACA,aAAA;AACA;AACA,QAAA;AACA,QAAA;;AAEA,mBAAA;AACA;CACA,kBAAA;CACA,WAAA;CACA,SAAA;CACA,eAAA;AACA;AAEA;CACA,WAAA;CACA,YAAA;AACA;AAEA;CACA,WAAA;AACA;AACA,QAAA;AACA,QAAA;;AAEA,qBAAA;AACA;CACA,kBAAA;CACA,iBAAA;CACA,aAAA;CACA,qBAAA;CACA,WAAA;AACA;AAEA;CACA,YAAA;CACA,gBAAA;CACA,mBAAA;CACA,iBAAA;CACA,mBAAA;CACA,eAAA;CACA,uBAAA;CACA,cAAA;CACA,yBAAA;CACA,sBAAA;CACA,aAAA;CACA;EACA;CACA,YAAA;CACA,6BAAA;CACA,qBAAA;CACA,wBAAA;CACA,gBAAA;CACA,gBAAA;CACA,kBAAA;AACA;AAEA;CACA,0BAAA;CACA,WAAA;CACA,eAAA;CACA,gBAAA;CACA,UAAA;AACA;AAEA;CACA,4BAAA;CACA,cAAA;CACA,eAAA;CACA,UAAA;CACA,gBAAA;CACA,uBAAA;AACA;AAEA;CACA,WAAA;CACA,qBAAA;CACA,eAAA;CACA,kBAAA;CACA,UAAA;CACA,SAAA;CACA,SAAA;CACA,cAAA;CACA,oBAAA;CACA,iBAAA;CACA,0BAAA;CACA,4BAAA;CACA,gBAAA;AACA;AACA,QAAA;;AAEA,uBAAA;AACA;;CAEA,YAAA;AACA;AACA,QAAA;;AAEA,qBAAA;AACA;CACA,cAAA;AACA;AAEA;CACA,oBAAA;CACA,YAAA;CACA,YAAA;CACA,gBAAA;CACA,iBAAA;CACA,mBAAA;CACA,gBAAA;CACA,kBAAA;CACA,mBAAA;CACA,kDAAA;CACA,kBAAA;CACA,WAAA;CACA,YAAA;CACA,iBAAA;CACA,gBAAA;AACA;;AAEA,uCAAA;AACA;CACA,mBAAA;AACA;AAEA;CACA,mBAAA;AACA;AAEA;CACA,mBAAA;AACA;AACA,QAAA;;AAEA,iCAAA;AACA,aAAA;AACA;CACA,sBAAA;CACA,WAAA;CACA,cAAA;CACA,kBAAA;CACA,UAAA;CACA,SAAA;CACA,YAAA;AACA;;AAEA,eAAA;AACA;CACA,WAAA;CACA,WAAA;CACA,oBAAA;CACA,WAAA;CACA,sBAAA;CACA,WAAA;CACA,cAAA;CACA,kBAAA;AACA;AACA,QAAA;;AAEA,6BAAA;AACA;CACA,uBAAA;CACA,6BAAA;CACA,WAAA;CACA,aAAA;CACA,kBAAA;AACA;AAEA;CACA,6BAAA;AACA;AAEA;CACA,kBAAA;AACA;AAEA;CACA,gBAAA;CACA,sBAAA;AACA;AACA,QAAA;;AAEA,wBAAA;AACA;CACA,gBAAA;CACA,gBAAA;CACA,uBAAA;CACA,yBAAA;AACA;AAEA;;CAEA,YAAA;CACA,wBAAA;AACA;AAEA;;CAEA,UAAA;AACA;AAEA;CACA,aAAA;AACA;AACA,QAAA;;AAEA,0BAAA;AACA;CACA,WAAA;AACA;AAEA;;;;;CAKA,0BAAA;AACA;AAEA;CACA,YAAA;AACA;AAEA;CACA,WAAA;AACA;AAEA;CACA,QAAA;AACA;AAEA;;CAEA,YAAA;CACA,UAAA;AACA;AAEA;CACA,yBAAA;CACA,mBAAA;CACA,WAAA;CACA,qBAAA;CACA,eAAA;CACA,iBAAA;CACA,eAAA;CACA,iBAAA;CACA,kBAAA;CACA,sBAAA;CACA,mBAAA;CACA,YAAA;AACA;AACA,QAAA;;AAEA,uBAAA;AACA;CACA,YAAA;CACA,YAAA;CACA,SAAA;AACA;AACA,QAAA;AACA,QAAA;;AAEA,2BAAA;AACA;CACA,cAAA;CACA,yBAAA;AACA;AACA,QAAA","file":"mgContainer.vue","sourcesContent":["<script>\n/**\n* MacGyver component loader\n* This is a meta component that loads other dynamic components as an array\n*/\nexport default Vue.mgComponent('mgContainer', {\n\tinject: {\n\t\t$mgForm: {from: '$mgForm'},\n\t\t$mgFormEditor: {from: '$mgFormEditor', default: false},\n\t},\n\tmeta: {\n\t\ttitle: 'Container layout',\n\t\ticon: 'far fa-th-large',\n\t\tcategory: 'Layout',\n\t\tpreferId: false,\n\t},\n\tprops: {\n\t\tlayout: {\n\t\t\ttype: 'mgChoiceRadio',\n\t\t\ttitle: 'Layout profile',\n\t\t\thelp: 'How to layout child elements',\n\t\t\tdefault: 'form',\n\t\t\tenum: [\n\t\t\t\t{id: 'form', title: 'Simple form layout'},\n\t\t\t\t{id: 'formFloating', title: 'Form with floating labels'},\n\t\t\t\t{id: 'card', title: 'Card based layout'},\n\t\t\t\t{id: 'columns', title: 'Vertical column layout'},\n\t\t\t\t{id: 'query', title: 'Query constructor'},\n\t\t\t],\n\t\t},\n\t\tformClass: {\n\t\t\ttype: 'mgChoiceDropdown',\n\t\t\ttitle: 'Form style',\n\t\t\tshowIf: {layout: {$in: ['form', 'card']}},\n\t\t\tdefault: 'normal',\n\t\t\tenum: [\n\t\t\t\t{id: 'normal', title: 'Normal'},\n\t\t\t\t{id: 'titles-above', title: 'Titles above'},\n\t\t\t],\n\t\t},\n\t\ttitle: {type: 'mgText', showIf: {layout: 'card'}},\n\t\tshowTitles: {type: 'mgToggle', default: true, help: 'Show titles for fields', showIf: {layout: {$in: ['form', 'card']}}},\n\t\tcolumnHeaders: {type: 'mgToggle', default: false, help: 'Show column headers', showIf: \"layout == 'columns'\"},\n\t\tcollapsable: {type: 'mgToggle', default: false, help: 'This card can be hidden', showIf: \"layout == 'card'\"},\n\t\tcollapsed: {type: 'mgToggle', default: false, help: 'This card is collapsed by default', showIf: \"layout == 'card'\"},\n\t\tborder: {type: 'mgToggle', default: true, help: 'Show a border around the container', showIf: \"layout == 'columns'\"},\n\t\tverbs: {\n\t\t\ttype: 'mgTable',\n\t\t\tadvanced: true,\n\t\t\tshowIf: \"layout == 'card'\",\n\t\t\titems: [\n\t\t\t\t{id: 'icon', type: 'mgIcon'},\n\t\t\t\t{id: 'tooltip', type: 'mgText'},\n\t\t\t\t{id: 'class', type: 'mgText'},\n\t\t\t\t{id: 'action', type: 'mgText'},\n\t\t\t],\n\t\t},\n\n\t\titems: {type: 'mgAlert', vueType: 'array', text: 'Use the editor to define child widgets'}, // Child items\n\t},\n\tchildProps: {\n\t\thelp: {type: 'mgText', title: 'Help text', help: 'Optional help text for the item - just like what you are reading now'},\n\t\tshowTitle: {type: 'mgToggle', default: true, title: 'Show Title', help: 'Whether to show the side title for this element'},\n\t\ttitle: {type: 'mgText', title: 'Title'},\n\t\trowClass: {type: 'mgChoiceDropdown', title: 'Styling', help: 'Additional styling to apply to the widget', default: '', advanced: true, enum: [\n\t\t\t{id: '', title: 'Normal'},\n\t\t\t{id: 'mgContainerRowLarge', title: 'Large text'},\n\t\t]},\n\t\tonChange: {type: 'string', title: 'Change action', help: 'Action to trigger when the value of this component changes', advanced: true},\n\t\tshow: {type: 'mgToggle', default: true, advanced: true, help: 'Whether the item is visible by default'},\n\t\tshowIf: {type: 'mgCode', syntax: 'text', advanced: true, help: 'A simple equality expression or Sift object to deteremine visibility'},\n\t},\n\tdata() { return {\n\t\thighlights: {}, // Lookup of extra classes to add to widgets, each key is the array offset of the widget within this container, the value is an array of classes to add\n\t\tlocalData: {}, // Lookup of immediate child data values, used when `$props.layout == 'formFloating'`\n\t}},\n\tmounted() {\n\t\tif (this.$props.collapsable) {\n\t\t\tvar $card = $(this.$el).find('.card').first();\n\n\t\t\t$card.find('.card-header').first().on('click', ()=> {\n\t\t\t\tvar $body = $(this.$el).find('.card-body');\n\t\t\t\tif ($card.hasClass('card-collapsed')) {\n\t\t\t\t\t$body.slideDown({complete: ()=> $card.removeClass('card-collapsed')});\n\t\t\t\t} else {\n\t\t\t\t\t$body.slideUp({complete: ()=> $card.addClass('card-collapsed')});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.$props.layout == 'formFloating') {\n\t\t\t// When in floating mode we need to keep track of child data so we copy its value into our `localData` object lookup\n\t\t\tthis.$mgForm.$on('changeItem', v => { // Bind to parent form handler\n\t\t\t\tif (this.$props.items.some(item => item.$dataPath == v.path)) { // Is this widget one of our immediate children?\n\t\t\t\t\tthis.$set(this.localData, v.path, v.value); // Copy its data against our local copy\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\tmethods: {\n\t\t/**\n\t\t* Emit an event passing this container as a scope\n\t\t* This is really just a wrapper to be able to pass this VueComponent to mgContainer.* emitters\n\t\t* @param {string} eventName Event to emit\n\t\t* @param {string} specPath The widget specPath\n\t\t* @param {number} widgetIndex The widget sending the message\n\t\t*/\n\t\tcomponentEvent(eventName, specPath, widgetIndex, vueEvent) {\n\t\t\tthis.$mgForm.$emit(eventName, this, specPath, widgetIndex, vueEvent);\n\t\t},\n\n\n\t\t/**\n\t\t* Find the child index by its component\n\t\t* This works like findIndex only with Magyver components, ignoring all non-mg children when computing the index\n\t\t* @param {VueComponent} child The child offset to find\n\t\t* @returns {number} The offset of the component or boolean `false`\n\t\t*/\n\t\tfindChildIndex(child) {\n\t\t\tvar result = _(this.$refs)\n\t\t\t\t.map(v => v[0]) // Dynamic refs always end up as an array of 1 item, so unpack that\n\t\t\t\t.reduce((t, v, i) => {\n\t\t\t\t\tif (t.found) { // Already found the child\n\t\t\t\t\t\treturn t;\n\t\t\t\t\t} else if (v._uid == child._uid) { // Found by direct UID\n\t\t\t\t\t\treturn {...t, found: true};\n\t\t\t\t\t} else if (v.$children && v.$children.length == 1 && v.$children[0]._uid == child._uid) { // Check into mgComponent wrappers\n\t\t\t\t\t\treturn {...t, found: true};\n\t\t\t\t\t} else if (v.$mgForm) { // Is an mgComponent {\n\t\t\t\t\t\treturn {...t, mgIndex: t.mgIndex + 1};\n\t\t\t\t\t} else { // Implied else - regular Vue component - skip incrementing when calculating the offset\n\t\t\t\t\t\treturn t;\n\t\t\t\t\t}\n\t\t\t\t}, {found: false, mgIndex: 0});\n\n\t\t\treturn (result.found ? result.mgIndex : false);\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<!-- Layout: form {{{ -->\n\t<div\n\t\tv-if=\"$props.layout == 'form' || $props.layout === undefined\"\n\t\tclass=\"mg-container\"\n\t\t:class=\"$props.formClass\"\n\t>\n\t\t<div\n\t\t\tv-for=\"(widget, widgetIndex) in $props.items\"\n\t\t\t:key=\"widget.id\"\n\t\t\tv-if=\"widget.show\"\n\t\t\tclass=\"form-group row mg-component\"\n\t\t\t:class=\"[widget.mgValidation == 'error' ? 'has-error' : '', widget.rowClass].concat(highlights[widgetIndex] || [])\"\n\t\t>\n\t\t\t<label v-if=\"widget.showTitle || $props.showTitles\" class=\"col-form-label text-left col-sm-3\">\n\t\t\t\t{{widget.title}}\n\t\t\t</label>\n\t\t\t<div class=\"col-form-value mg-component-wrapper\" :class=\"widget.showTitle || $props.showTitles ? 'col-sm-9' : 'col-sm-12'\">\n\t\t\t\t<mg-component\n\t\t\t\t\t:ref=\"widgetIndex\"\n\t\t\t\t\t:config=\"widget\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class=\"help-block\" v-if=\"widget.help\" :class=\"widget.showTitle || $props.showTitles ? 'col-sm-9 col-sm-offset-3' : 'col-sm-12'\">{{widget.help}}</div>\n\t\t</div>\n\t</div>\n\t<!-- }}} -->\n\t<!-- Layout: card {{{ -->\n\t<div\n\t\tv-else-if=\"$props.layout == 'card'\"\n\t\tclass=\"mg-container\"\n\t\t:class=\"$props.formClass\"\n\t>\n\t\t<div class=\"card mg-container\" :class=\"{'card-collapsable': $props.collapsable, 'card-collapsed': $props.collapsed}\">\n\t\t\t<div v-if=\"$props.title || ($props.verbs && $props.verbs.length)\" class=\"card-header\">\n\t\t\t\t{{$props.title}}\n\t\t\t\t<div v-if=\"$props.verbs && $props.verbs.length\" class=\"card-verbs\">\n\t\t\t\t\t<a\n\t\t\t\t\t\tv-for=\"(verb, verbIndex) in $props.verbs\"\n\t\t\t\t\t\t:key=\"verbIndex\"\n\t\t\t\t\t\t:class=\"[verb.class, verb.icon]\"\n\t\t\t\t\t\tv-tooltip=\"verb.tooltip\"\n\t\t\t\t\t\t@click=\"$mgForm.run(form, verb.action)\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div\n\t\t\t\t\tv-for=\"(widget, widgetIndex) in $props.items\"\n\t\t\t\t\t:key=\"widget.id\"\n\t\t\t\t\tv-if=\"widget.show\"\n\t\t\t\t\tclass=\"form-group row mg-component\"\n\t\t\t\t\t:class=\"[widget.mgValidation == 'error' ? 'has-error' : '', widget.rowClass].concat(highlights[widgetIndex] || [])\"\n\t\t\t\t\t@click=\"componentEvent('mgContainer.click', widget.$specPath, widgetIndex, $event)\"\n\t\t\t\t\t@mouseenter=\"componentEvent('mgContainer.mouseEnter', widget.$specPath, widgetIndex, $event)\"\n\t\t\t\t\t@mouseleave=\"componentEvent('mgContainer.mouseLeave', widget.$specPath, widgetIndex, $event)\"\n\t\t\t\t>\n\t\t\t\t\t<mg-form-editor-controls\n\t\t\t\t\t\tv-if=\"$mgFormEditor\"\n\t\t\t\t\t\tv-show=\"highlights[widgetIndex] && highlights[widgetIndex].some(c => c == 'editHover' || c == 'editEditing')\"\n\t\t\t\t\t\t:config=\"widget\"\n\t\t\t\t\t/>\n\t\t\t\t\t<label v-if=\"widget.showTitle || $props.showTitles\" class=\"col-form-label text-left col-sm-3\">\n\t\t\t\t\t\t{{widget.title}}\n\t\t\t\t\t</label>\n\t\t\t\t\t<div class=\"col-form-value mg-component-wrapper\" :class=\"widget.showTitle || $props.showTitles ? 'col-sm-9' : 'col-sm-12'\">\n\t\t\t\t\t\t<mg-component\n\t\t\t\t\t\t\t:ref=\"widgetIndex\"\n\t\t\t\t\t\t\t:config=\"widget\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"help-block\" v-if=\"widget.help\" :class=\"widget.showTitle || $props.showTitles ? 'col-sm-9 col-sm-offset-3' : 'col-sm-12'\">{{widget.help}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- }}} -->\n\t<!-- Layout: formFloating {{{ -->\n\t<div v-else-if=\"$props.layout == 'formFloating'\">\n\t\t<div\n\t\t\tv-for=\"(widget, widgetIndex) in $props.items\"\n\t\t\t:key=\"widget.id\"\n\t\t\tv-if=\"widget.show\"\n\t\t\tclass=\"form-group mgContainer-formFloating row mg-component\"\n\t\t\t:class=\"[widget.mgValidation == 'error' ? 'has-error' : '', widget.rowClass].concat(highlights[widgetIndex] || [])\"\n\t\t>\n\t\t\t<div class=\"col-12 mg-component-wrapper\">\n\t\t\t\t<mg-component\n\t\t\t\t\t:config=\"widget\"\n\t\t\t\t\tclass=\"control-input\"\n\t\t\t\t\t:class=\"!localData[widget.$dataPath] && 'blank'\"\n\t\t\t\t/>\n\t\t\t\t<label v-if=\"$props.showTitles\" class=\"col-form-label text-left col-sm-3\">\n\t\t\t\t\t{{widget.title}}\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<div class=\"help-block\" v-if=\"widget.help\" :class=\"widget.showTitle || $props.showTitles ? 'col-sm-9 col-sm-offset-3' : 'col-sm-12'\">{{widget.help}}</div>\n\t\t</div>\n\t</div>\n\t<!-- }}} -->\n\t<!-- Layout: columns {{{ -->\n\t<div v-else-if=\"$props.layout == 'columns'\">\n\t\t<table class=\"mg-container\" :class=\"$props.border ? 'table table-bordered' : 'mg-container-columns-no-border'\" style=\"width: 100%\">\n\t\t\t<thead v-if=\"$props.columnHeaders\">\n\t\t\t\t<tr>\n\t\t\t\t\t<th\n\t\t\t\t\t\tv-for=\"widget in config.items\"\n\t\t\t\t\t\t:key=\"widget.id\"\n\t\t\t\t\t\tv-if=\"widget.show\"\n\t\t\t\t\t>{{widget.title}}</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td\n\t\t\t\t\t\tv-for=\"(widget, widgetIndex) in $props.items\"\n\t\t\t\t\t\t:key=\"widget.id\"\n\t\t\t\t\t\tv-if=\"widget.show\"\n\t\t\t\t\t\tclass=\"mg-component-wrapper\"\n\t\t\t\t\t\t:class=\"[widget.mgValidation == 'error' ? 'has-error' : '', widget.rowClass].concat(highlights[widgetIndex] || [])\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<mg-component\n\t\t\t\t\t\t\t:ref=\"widgetIndex\"\n\t\t\t\t\t\t\t:config=\"widget\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"help-block\" v-if=\"widget.help\">{{widget.help}}</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<!-- }}} -->\n\t<!-- Layout: query {{{ -->\n\t<div v-else-if=\"$props.layout == 'query'\">\n\t\t<div class=\"mg-container mg-container-query\">\n\t\t\t<div v-for=\"rowWidget in $props.items\" :key=\"rowWidget.id\">\n\t\t\t\t<div v-if=\"rowWidget.type == 'mgContainer' && rowWidget.layout == 'query-row'\" class=\"row\">\n\t\t\t\t\t<div v-for=\"colWidget in rowWidget.items\" :key=\"colWidget.id\" class=\"col mg-component mg-component-wrapper\">\n\t\t\t\t\t\t<mg-component\n\t\t\t\t\t\t\t:ref=\"widgetIndex\"\n\t\t\t\t\t\t\t:config=\"colWidget\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class=\"alert alert-danger\">\n\t\t\t\t\tAll children of mgContainer[layout=query] must match the mgContainer[layout=queryRow]\n\t\t\t\t\t<pre>{{widget}}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- }}} -->\n\t<!-- Layout: unknown {{{ -->\n\t<div v-else class=\"mg-container\">\n\t\t<div class=\"alert alert-danger\">\n\t\t\tUnsupported mgContainer layout \"{{$props.layout || 'Unspecified'}}\"\n\t\t\t<pre>{{$props}}</pre>\n\t\t</div>\n\t</div>\n\t<!-- }}} -->\n</template>\n\n<style>\n/* formClass > .titles-above {{{ */\n.mg-container.titles-above > .form-group,\n.mg-container.titles-above > .form-group,\n.mg-container.titles-above > .card > .card-body > .form-group,\n.mg-container.titles-above > .card > .card-body > .form-group {\n\tdisplay: block;\n}\n\n.mg-container.titles-above > .form-group > .col-form-label,\n.mg-container.titles-above > .form-group > .col-form-value,\n.mg-container.titles-above > .card > .card-body > .form-group > .col-form-label,\n.mg-container.titles-above > .card > .card-body > .form-group > .col-form-value {\n\twidth: 100%;\n\tmax-width: none;\n}\n/* }}} */\n\n/* Card layout {{{ */\n/* Collapsable card {{{ */\n.mg-container.card.card-collapsable {\n\ttransition: all 0.2s ease-in;\n}\n\n.mg-container.card.card-collapsable .card-header {\n\tcursor: pointer;\n}\n\n.mg-container.card.card-collapsable .card-header::after {\n\tfont-family: \"Font Awesome 5 Pro\";\n\tcontent: '\\f054';\n\tfloat: right;\n\ttransition: transform 0.4s;\n}\n\n.mg-container.card.card-collapsable:not(.card-collapsed) .card-header::after {\n\ttransform: rotate(90deg);\n}\n\n\n/* Collapsed card {{{ */\n.mg-container.card.card-collapsable.card-collapsed {\n\tbox-shadow: none;\n\tborder-bottom: none;\n\tmargin-bottom: 0px;\n}\n\n.mg-container.card.card-collapsable.card-collapsed .card-body {\n\tdisplay: none;\n}\n/* }}} */\n/* }}} */\n\n/* Card verbs {{{ */\n.mg-container.card .card-header .card-verbs {\n\tposition: absolute;\n\tright: 15px;\n\ttop: 10px;\n\tfont-size: 20px;\n}\n\n.mg-container.card .card-header .card-verbs > a {\n\tcolor: #999;\n\tpadding: 5px;\n}\n\n.mg-container.card .card-header .card-verbs > a:hover {\n\tcolor: #000;\n}\n/* }}} */\n/* }}} */\n\n/* formFloating {{{ */\n.mgContainer-formFloating > .col-12 {\n\tposition: relative;\n\tline-height: 14px;\n\tmargin: 0 0px;\n\tdisplay: inline-block;\n\twidth: 100%;\n}\n\n.mgContainer-formFloating > .col-12 > .control-input {\n\theight: 45px;\n\tpadding-top: 8px;\n\tpadding-bottom: 2px;\n\tpadding-left: 2px;\n\tpadding-right: 12px;\n\tfont-size: 15px;\n\tline-height: 1.42857143;\n\tcolor: #333333;\n\tbackground-color: #ffffff;\n\tbackground-image: none;\n\toutline: none;\n\t/* border: 1px solid rgba(120, 120, 120, 0.5);\n\t*/\n\tborder: none;\n\tborder-bottom: 1px solid #bbb;\n\t-moz-box-shadow: none;\n\t-webkit-box-shadow: none;\n\tbox-shadow: none;\n\tborder-radius: 0;\n\tposition: relative;\n}\n\n.mgContainer-formFloating > .col-12 > .control-input.blank + .col-form-label {\n\ttransform: translateY(0px);\n\tcolor: #bbb;\n\tfont-size: 15px;\n\tfont-weight: 100;\n\topacity: 1;\n}\n\n.mgContainer-formFloating > .col-12 > .control-input.control-input:focus + .col-form-label {\n\ttransform: translateY(-21px);\n\tcolor: #66afe9;\n\tfont-size: 14px;\n\topacity: 1;\n\tfont-weight: 100;\n\tbackground-color: white;\n}\n\n.mgContainer-formFloating > .col-12 > .col-form-label {\n\tcolor: #aaa;\n\tdisplay: inline-block;\n\tfont-size: 12px;\n\tposition: absolute;\n\tz-index: 2;\n\tleft: 2px;\n\ttop: 16px;\n\tpadding: 0 0px;\n\tpointer-events: none;\n\tbackground: white;\n\ttransition: all 300ms ease;\n\ttransform: translateY(-21px);\n\tfont-weight: 500;\n}\n/* }}} */\n\n/* Columns layout {{{ */\n.mg-container.mg-container-columns-no-border th,\n.mg-container.mg-container-columns-no-border td {\n\tpadding: 5px;\n}\n/* }}} */\n\n/* Query layout {{{ */\n.mg-container.mg-container-query .row {\n\tdisplay: block;\n}\n\n.mg-container.mg-container-query .col {\n\tdisplay: inline-flex;\n\twidth: 200px;\n\theight: 35px;\n\tmin-width: 200px;\n\tmargin-left: 30px;\n\tmargin-bottom: 10px;\n\tmax-width: 400px;\n\tposition: relative;\n\talign-items: center;\n\tbox-shadow: 1px 3px 5px 0px rgba(50, 50, 50, 0.75);\n\tborder-radius: 3px;\n\tcolor: #FFF;\n\theight: 38px;\n\tpadding: 5px 15px;\n\tbackground: #FFF;\n}\n\n/* Query > Background color scale {{{ */\n.mg-container.mg-container-query .col:nth-child(1) {\n\tbackground: #104E8B;\n}\n\n.mg-container.mg-container-query .col:nth-child(2) {\n\tbackground: #1874CD;\n}\n\n.mg-container.mg-container-query .col:nth-child(3) {\n\tbackground: #1C86EE;\n}\n/* }}} */\n\n/* Query > Connecting lines {{{ */\n/* Vertical */\n.mg-container.mg-container-query .row::before {\n\tbackground-color: #CCC;\n\tcontent: '';\n\tdisplay: block;\n\tposition: absolute;\n\twidth: 4px;\n\ttop: 17px;\n\tbottom: 30px;\n}\n\n/* Horizontal */\n.mg-container.mg-container-query .col::before {\n\tleft: -30px;\n\theight: 4px;\n\ttop: calc(50% - 2px);\n\twidth: 30px;\n\tbackground-color: #CCC;\n\tcontent: '';\n\tdisplay: block;\n\tposition: absolute;\n}\n/* }}} */\n\n/* Query > Basic Inputs {{{ */\n.mg-container.mg-container-query .col input {\n\tbackground: transparent;\n\tborder: 1px solid transparent;\n\tcolor: #FFF;\n\theight: 1.8em;\n\tborder-radius: 0px;\n}\n\n.mg-container.mg-container-query .col input[type=text] {\n\tborder-bottom: 1px solid #CCC;\n}\n\n.mg-container.mg-container-query .col input[type=number] {\n\ttext-align: center;\n}\n\n.mg-container.mg-container-query .col input:focus {\n\tbox-shadow: none;\n\tborder: 1px solid #CCC;\n}\n/* }}} */\n\n/* Query > Buttons {{{ */\n.mg-container.mg-container-query .col .btn {\n\tbox-shadow: none;\n\tpadding: 1px 5px;\n\tbackground: transparent;\n\tborder: 1px solid #003e7b;\n}\n\n.mg-container.mg-container-query .col .btn,\n.mg-container.mg-container-query .col svg {\n\topacity: 0.2;\n\ttransition: opacity 0.5s;\n}\n\n.mg-container.mg-container-query .row:hover .col .btn,\n.mg-container.mg-container-query .row:hover .col svg {\n\topacity: 1;\n}\n\n.mg-container.mg-container-query .col .vs__clear {\n\tdisplay: none;\n}\n/* }}} */\n\n/* Query > Dropdowns {{{ */\n.mg-container.mg-container-query .v-select {\n\twidth: 100%;\n}\n\n.mg-container.mg-container-query .v-select,\n.mg-container.mg-container-query .v-select .vs--searchable .vs__dropdown-toggle,\n.mg-container.mg-container-query .v-select .vs__selected,\n.mg-container.mg-container-query .v-select input,\n.mg-container.mg-container-query .v-select .vs__actions {\n\tcursor: pointer !important;\n}\n\n.mg-container.mg-container-query .v-select .vs__dropdown-toggle {\n\tborder: none;\n}\n\n.mg-container.mg-container-query .col .v-select .vs__selected {\n\tcolor: #FFF;\n}\n\n.mg-container.mg-container-query .col .v-select .vs__selected {\n\ttop: 3px;\n}\n\n.mg-container.mg-container-query .col .v-select .vs__actions svg,\n.mg-container.mg-container-query .col .v-select .vs__deselect {\n\tstroke: #FFF;\n\tfill: #FFF;\n}\n\n.mg-container.mg-container-query .col .v-select.mg-choice-tags .vs__selected-options .vs__selected {\n\tbackground-color: #5bc0de;\n\tborder-radius: 10px;\n\tcolor: #fff;\n\tdisplay: inline-block;\n\tfont-size: 12px;\n\tline-height: 1rem;\n\tmin-width: 10px;\n\tpadding: 1px 10px;\n\ttext-align: center;\n\tvertical-align: middle;\n\twhite-space: nowrap;\n\tborder: none;\n}\n/* }}} */\n\n/* Query > Toggle {{{ */\n.mg-container.mg-container-query .col .vue-js-switch {\n\tmargin: auto;\n\theight: 10px;\n\ttop: -5px;\n}\n/* }}} */\n/* }}} */\n\n/* Misc utility types {{{ */\n.mg-form .help-block {\n\tfont-size: 80%;\n\tcolor: #6c757d !important;\n}\n/* }}} */\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$i = undefined;
    /* module identifier */
    const __vue_module_identifier__$i = undefined;
    /* functional template */
    const __vue_is_functional_template__$i = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$i = normalizeComponent(
      { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
      __vue_inject_styles__$i,
      __vue_script__$i,
      __vue_scope_id__$i,
      __vue_is_functional_template__$i,
      __vue_module_identifier__$i,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgContainer = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$i
  });

  var script$i = Vue.mgComponent('mgDate', {
    meta: {
      title: 'Date selection',
      icon: 'far fa-calendar',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        if (!v) return '';
        var d = v instanceof Date ? v : new Date(v);
        console.log('mgDate SHOULD BE DATE', d);
        return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();
      },
      formatClass: 'text-center'
    },
    props: {
      min: {
        type: 'mgDate',
        title: 'Earliest date'
      },
      max: {
        type: 'mgDate',
        title: 'Latest date'
      },
      required: {
        type: 'mgToggle',
        "default": false
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.min && _.isString(_this.data) && _this.data < _this.$props.min) return reply("".concat($props.title, " is too early (earliest date is ").concat(_this.$props.min, ")"));
        if (_this.$props.max && _.isString(_this.data) && _this.data > $props.max) return reply("".concat($props.title, " is too late (latest date is ").concat(_this.$props.max, ")"));
      });
    }
  });

  /* script */
  const __vue_script__$j = script$i;

  /* template */
  var __vue_render__$c = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("input", {
      directives: [
        { name: "model", rawName: "v-model", value: _vm.data, expression: "data" }
      ],
      staticClass: "form-control",
      attrs: { type: "date" },
      domProps: { value: _vm.data },
      on: {
        input: function($event) {
          if ($event.target.composing) {
            return
          }
          _vm.data = $event.target.value;
        }
      }
    })
  };
  var __vue_staticRenderFns__$c = [];
  __vue_render__$c._withStripped = true;

    /* style */
    const __vue_inject_styles__$j = undefined;
    /* scoped */
    const __vue_scope_id__$j = undefined;
    /* module identifier */
    const __vue_module_identifier__$j = undefined;
    /* functional template */
    const __vue_is_functional_template__$j = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$j = normalizeComponent(
      { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
      __vue_inject_styles__$j,
      __vue_script__$j,
      __vue_scope_id__$j,
      __vue_is_functional_template__$j,
      __vue_module_identifier__$j,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgDate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$j
  });

  var script$j = Vue.mgComponent('mgEmail', {
    meta: {
      title: 'Email address',
      icon: 'far fa-at',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        if (!v) return '';
        return "<a href=\"mailto:".concat(v, "\">").concat(v, "</a>");
      }
    },
    props: {
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when the text box has no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    }
  });

  /* script */
  const __vue_script__$k = script$j;

  /* template */
  var __vue_render__$d = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("input", {
      directives: [
        { name: "model", rawName: "v-model", value: _vm.data, expression: "data" }
      ],
      staticClass: "form-control",
      attrs: { type: "email", placeholder: _vm.$props.placeholder },
      domProps: { value: _vm.data },
      on: {
        input: function($event) {
          if ($event.target.composing) {
            return
          }
          _vm.data = $event.target.value;
        }
      }
    })
  };
  var __vue_staticRenderFns__$d = [];
  __vue_render__$d._withStripped = true;

    /* style */
    const __vue_inject_styles__$k = undefined;
    /* scoped */
    const __vue_scope_id__$k = undefined;
    /* module identifier */
    const __vue_module_identifier__$k = undefined;
    /* functional template */
    const __vue_is_functional_template__$k = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$k = normalizeComponent(
      { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
      __vue_inject_styles__$k,
      __vue_script__$k,
      __vue_scope_id__$k,
      __vue_is_functional_template__$k,
      __vue_module_identifier__$k,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgEmail = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$k
  });

  var script$k = Vue.mgComponent('mgError', {
    meta: {
      title: 'Error display',
      icon: 'far fa-exclamation-circle',
      category: 'General Decoration'
    },
    props: {
      text: {
        type: 'mgText'
      }
    }
  });

  /* script */
  const __vue_script__$l = script$k;

  /* template */
  var __vue_render__$e = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "alert alert-danger" }, [
      _vm._v("\n\t" + _vm._s(_vm.data || _vm.$props.text) + "\n")
    ])
  };
  var __vue_staticRenderFns__$e = [];
  __vue_render__$e._withStripped = true;

    /* style */
    const __vue_inject_styles__$l = undefined;
    /* scoped */
    const __vue_scope_id__$l = undefined;
    /* module identifier */
    const __vue_module_identifier__$l = undefined;
    /* functional template */
    const __vue_is_functional_template__$l = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$l = normalizeComponent(
      { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
      __vue_inject_styles__$l,
      __vue_script__$l,
      __vue_scope_id__$l,
      __vue_is_functional_template__$l,
      __vue_module_identifier__$l,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgError = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$l
  });

  var script$l = Vue.component('mgFormEditorControls', {
    inject: ['$mgFormEditor'],
    props: {
      config: {
        type: Object,
        required: true
      }
    }
  });

  /* script */
  const __vue_script__$m = script$l;

  /* template */
  var __vue_render__$f = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mg-form-editor-controls" }, [
      _c("div", { staticClass: "mg-form-editor-controls-title" }, [
        _vm._v("\n\t\t" + _vm._s(_vm.$props.config.type) + "\n\t\t"),
        _vm.$props.config.id
          ? _c("span", { staticClass: "mg-form-editor-controls-id" }, [
              _vm._v("\n\t\t\t#" + _vm._s(_vm.$props.config.id) + "\n\t\t")
            ])
          : _vm._e()
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "mg-form-editor-controls-buttons" }, [
        _c("a", {
          directives: [
            {
              name: "tooltip",
              rawName: "v-tooltip",
              value: "Insert widget after here",
              expression: "'Insert widget after here'"
            }
          ],
          staticClass: "far fa-plus",
          on: {
            click: function($event) {
              $event.stopPropagation();
              _vm.$mgFormEditor.addTarget = _vm.$props.config.$specPath;
              _vm.$mgFormEditor.addOrientation = "after";
              _vm.$mgFormEditor.setMode("adding", false);
            }
          }
        }),
        _vm._v(" "),
        _c("a", {
          directives: [
            {
              name: "tooltip",
              rawName: "v-tooltip",
              value: "Duplicate widget",
              expression: "'Duplicate widget'"
            }
          ],
          staticClass: "far fa-clone",
          on: {
            click: function($event) {
              return _vm.$mgFormEditor.duplicateWidget(
                _vm.$props.config.$specPath
              )
            }
          }
        }),
        _vm._v(" "),
        _c("a", {
          directives: [
            {
              name: "tooltip",
              rawName: "v-tooltip",
              value: "Move widget up",
              expression: "'Move widget up'"
            }
          ],
          staticClass: "far fa-arrow-up",
          on: {
            click: function($event) {
              return _vm.$mgFormEditor.moveWidget(
                _vm.$props.config.$specPath,
                "up"
              )
            }
          }
        }),
        _vm._v(" "),
        _c("a", {
          directives: [
            {
              name: "tooltip",
              rawName: "v-tooltip",
              value: "Move widget down",
              expression: "'Move widget down'"
            }
          ],
          staticClass: "far fa-arrow-down",
          on: {
            click: function($event) {
              return _vm.$mgFormEditor.moveWidget(
                _vm.$props.config.$specPath,
                "down"
              )
            }
          }
        }),
        _vm._v(" "),
        _c("a", {
          directives: [
            {
              name: "tooltip",
              rawName: "v-tooltip",
              value: "Delete widget",
              expression: "'Delete widget'"
            }
          ],
          staticClass: "far fa-trash danger",
          on: {
            click: function($event) {
              $event.stopPropagation();
              return _vm.$mgFormEditor.removeWidget(_vm.$props.config.$specPath)
            }
          }
        })
      ])
    ])
  };
  var __vue_staticRenderFns__$f = [];
  __vue_render__$f._withStripped = true;

    /* style */
    const __vue_inject_styles__$m = function (inject) {
      if (!inject) return
      inject("data-v-11a6d64e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Component outlines {{{ */\n/* Neutral / Deselected {{{ */\n.mg-form-editor .mg-component {\n\tborder: 2px solid transparent;\n\tborder-radius: 5px;\n}\n/* }}} */\n/* Hover {{{ */\n.mg-form-editor .mg-component.editHover {\n\tborder: 2px dashed var(--mg-form-editor-hover-bg);\n}\n/* }}} */\n/* Editing {{{ */\n.mg-form-editor .mg-component.editEditing {\n\tborder: 2px solid var(--mg-form-editor-selected-bg);\n}\n/* }}} */\n/* }}} */\n\n/* Edit controls {{{ */\n.mg-form-editor-controls {\n\tposition: absolute;\n\ttransform: translate(2px, -30px);\n\twidth: calc(100% - 20px);\n}\n\n/* Title {{{ */\n.mg-form-editor-controls .mg-form-editor-controls-title,\n.mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tborder-top-left-radius: 5px;\n\tborder-top-right-radius: 5px;\n\tpadding: 2px 8px;\n}\n.mg-form-editor-controls .mg-form-editor-controls-title {\n\tdisplay: inline-block;\n}\n.mg-component.editHover .mg-form-editor-controls-title {\n\tbackground: var(--mg-form-editor-hover-bg);\n\tcolor: var(--mg-form-editor-hover-fg);\n}\n.mg-component.editEditing .mg-form-editor-controls-title {\n\tbackground: var(--mg-form-editor-selected-bg);\n\tcolor: var(--mg-form-editor-selected-fg);\n}\n.mg-component .mg-form-editor-controls-title .mg-form-editor-controls-id {\n\tfont-weight: bold;\n}\n/* }}} */\n\n/* Buttons {{{ */\n.mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tdisplay: none;\n\tfloat: right;\n\tbackground: var(--mg-form-editor-selected-bg);\n\tcolor: var(--mg-form-editor-selected-fg);\n}\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tdisplay: inline-block;\n}\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a {\n\tborder-radius: 50%;\n\tpadding: 4px 5px;\n}\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a:hover {\n\tbackground: var(--mg-form-editor-selected-highlight);\n}\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a.danger:hover {\n\tbackground: var(--mg-form-editor-selected-danger);\n}\n/* }}} */\n/* }}} */\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgFormEditorControls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,2BAAA;AACA,6BAAA;AACA;CACA,6BAAA;CACA,kBAAA;AACA;AACA,QAAA;AACA,cAAA;AACA;CACA,iDAAA;AACA;AACA,QAAA;AACA,gBAAA;AACA;CACA,mDAAA;AACA;AACA,QAAA;AACA,QAAA;;AAEA,sBAAA;AACA;CACA,kBAAA;CACA,gCAAA;CACA,wBAAA;AACA;;AAEA,cAAA;AACA;;CAEA,2BAAA;CACA,4BAAA;CACA,gBAAA;AACA;AAEA;CACA,qBAAA;AACA;AAEA;CACA,0CAAA;CACA,qCAAA;AACA;AAEA;CACA,6CAAA;CACA,wCAAA;AACA;AAEA;CACA,iBAAA;AACA;AACA,QAAA;;AAEA,gBAAA;AACA;CACA,aAAA;CACA,YAAA;CACA,6CAAA;CACA,wCAAA;AACA;AAEA;CACA,qBAAA;AACA;AAEA;CACA,kBAAA;CACA,gBAAA;AACA;AAEA;CACA,oDAAA;AACA;AAEA;CACA,iDAAA;AACA;AACA,QAAA;AACA,QAAA","file":"mgFormEditorControls.vue","sourcesContent":["<script>\nexport default Vue.component('mgFormEditorControls', {\n\tinject: ['$mgFormEditor'],\n\tprops: {\n\t\tconfig: {type: Object, required: true},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-form-editor-controls\">\n\t\t<div class=\"mg-form-editor-controls-title\">\n\t\t\t{{$props.config.type}}\n\t\t\t<span v-if=\"$props.config.id\" class=\"mg-form-editor-controls-id\">\n\t\t\t\t#{{$props.config.id}}\n\t\t\t</span>\n\t\t</div>\n\t\t<div class=\"mg-form-editor-controls-buttons\">\n\t\t\t<!-- NOTE: Add .stop to ignore next mouse click which would select the element under the cursor -->\n\t\t\t<a @click.stop=\"$mgFormEditor.addTarget = $props.config.$specPath; $mgFormEditor.addOrientation = 'after'; $mgFormEditor.setMode('adding', false)\" class=\"far fa-plus\" v-tooltip=\"'Insert widget after here'\"/>\n\t\t\t<a @click=\"$mgFormEditor.duplicateWidget($props.config.$specPath)\" class=\"far fa-clone\" v-tooltip=\"'Duplicate widget'\"/>\n\t\t\t<!-- FIXME: Not yet working <a @click=\"$mgFormEditor.dragWidget($props.config.$specPath)\" class=\"far fa-arrows-alt\" v-tooltip=\"'Move widget'\"/> -->\n\t\t\t<a @click=\"$mgFormEditor.moveWidget($props.config.$specPath, 'up')\" class=\"far fa-arrow-up\" v-tooltip=\"'Move widget up'\"/>\n\t\t\t<a @click=\"$mgFormEditor.moveWidget($props.config.$specPath, 'down')\" class=\"far fa-arrow-down\" v-tooltip=\"'Move widget down'\"/>\n\t\t\t<a @click.stop=\"$mgFormEditor.removeWidget($props.config.$specPath)\" class=\"far fa-trash danger\" v-tooltip=\"'Delete widget'\"/>\n\t\t</div>\n\t</div>\n</template>\n\n<style>\n/* Component outlines {{{ */\n/* Neutral / Deselected {{{ */\n.mg-form-editor .mg-component {\n\tborder: 2px solid transparent;\n\tborder-radius: 5px;\n}\n/* }}} */\n/* Hover {{{ */\n.mg-form-editor .mg-component.editHover {\n\tborder: 2px dashed var(--mg-form-editor-hover-bg);\n}\n/* }}} */\n/* Editing {{{ */\n.mg-form-editor .mg-component.editEditing {\n\tborder: 2px solid var(--mg-form-editor-selected-bg);\n}\n/* }}} */\n/* }}} */\n\n/* Edit controls {{{ */\n.mg-form-editor-controls {\n\tposition: absolute;\n\ttransform: translate(2px, -30px);\n\twidth: calc(100% - 20px);\n}\n\n/* Title {{{ */\n.mg-form-editor-controls .mg-form-editor-controls-title,\n.mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tborder-top-left-radius: 5px;\n\tborder-top-right-radius: 5px;\n\tpadding: 2px 8px;\n}\n\n.mg-form-editor-controls .mg-form-editor-controls-title {\n\tdisplay: inline-block;\n}\n\n.mg-component.editHover .mg-form-editor-controls-title {\n\tbackground: var(--mg-form-editor-hover-bg);\n\tcolor: var(--mg-form-editor-hover-fg);\n}\n\n.mg-component.editEditing .mg-form-editor-controls-title {\n\tbackground: var(--mg-form-editor-selected-bg);\n\tcolor: var(--mg-form-editor-selected-fg);\n}\n\n.mg-component .mg-form-editor-controls-title .mg-form-editor-controls-id {\n\tfont-weight: bold;\n}\n/* }}} */\n\n/* Buttons {{{ */\n.mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tdisplay: none;\n\tfloat: right;\n\tbackground: var(--mg-form-editor-selected-bg);\n\tcolor: var(--mg-form-editor-selected-fg);\n}\n\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons {\n\tdisplay: inline-block;\n}\n\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a {\n\tborder-radius: 50%;\n\tpadding: 4px 5px;\n}\n\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a:hover {\n\tbackground: var(--mg-form-editor-selected-highlight);\n}\n\n.mg-component.editEditing .mg-form-editor-controls .mg-form-editor-controls-buttons > a.danger:hover {\n\tbackground: var(--mg-form-editor-selected-danger);\n}\n/* }}} */\n/* }}} */\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$m = undefined;
    /* module identifier */
    const __vue_module_identifier__$m = undefined;
    /* functional template */
    const __vue_is_functional_template__$m = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$m = normalizeComponent(
      { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
      __vue_inject_styles__$m,
      __vue_script__$m,
      __vue_scope_id__$m,
      __vue_is_functional_template__$m,
      __vue_module_identifier__$m,
      false,
      createInjector,
      undefined,
      undefined
    );

  /**
  * mg-form-editor - Drag-and-drop form designer for MacGyver
  *
  * @param {Object|Array} config mgForm compatible spec to edit
  * @param {Object} [data] Optional data bindings for the form
  * @param {array<Object>} [verbs] Verb edit mgForm to show in the small edit sidebar, defaults to selecting widgets / adding widgets buttons
  * @param {string} [asideClassActive="mgfe-aside aside-right open"] Class to set all editing sidebars to when inactive
  * @param {string} [asideClassInactive="mgfe-aside aside-right"] Class to set all editing sidebar to when inactive
  * @param {string} [asideClassModeCollapsed="aside-sm"] Class to associate with the smaller toolkit display when editing
  * @param {string} [asideClassModeToc="aside-sm"] Class to associate with the Table-Of-Contents sidebar
  * @param {string} [asideClassModeAdding=""] Class to associate with the editing sidebar when adding
  * @param {string} [asideClassModeEditing=""] Class to associate with the editing sidebar when editing
  *
  * @emits change Emitted as `(config)` on any item configuration change. WARNING, subscribing to this involves an entire deep copy of the config structure, subscribe to changeItem if possible
  * @emits changeItem Emitted as `({path, value})` when a single config item changes, inexpensive compared to `change`
  */

  var script$m = Vue.component('mgFormEditor', {
    provide: function provide() {
      return {
        $mgFormEditor: this
      };
    },
    components: {
      mgFormEditorControls: __vue_component__$m
    },
    data: function data() {
      return {
        mode: 'collapsed',
        // ENUM: collapsed, toc, editing, adding
        id: this.$macgyver.nextId(),
        // ID of the editing form item
        editing: undefined,
        // The active item we are editing
        widgetListMode: 'grid',
        // Asides
        editConfig: [],
        editData: {},
        addTarget: undefined,
        // Spec path to add after, if any
        addOrientation: 'after',
        // Holding data for various form states
        addData: {}
      };
    },
    props: {
      // FIXME: Does not like array type specs.
      config: [Object, Array],
      // Can be a single object, array of objects or shorthand style
      data: Object,
      asideClassActive: {
        type: String,
        "default": 'mgfe-aside aside-right open'
      },
      asideClassInactive: {
        type: String,
        "default": 'mgfe-aside aside-right'
      },
      asideClassModeCollapsed: {
        type: String,
        "default": 'aside-sm'
      },
      asideClassModeToc: {
        type: String,
        "default": ''
      },
      asideClassModeAdding: {
        type: String,
        "default": ''
      },
      asideClassModeEditing: {
        type: String,
        "default": ''
      },
      generalVerbs: {
        type: Array,
        "default": function _default() {
          var _this$$prompt;

          return [{
            type: 'mgButton',
            action: "setMode()",
            "class": 'btn btn-primary text-white px-2',
            icon: 'fa fa-mouse-pointer fa-fw',
            showTitle: false,
            // FIXME: Why were tooltips failing as Object type?
            tooltip: 'Select widgets to edit' //tooltip: "{content: 'Select widgets to edit', placement: 'left'}",

          }, {
            type: 'mgButton',
            action: "setMode('toc')",
            "class": 'btn btn-outline-light border-0 px-2',
            icon: 'fa fa-stream fa-fw',
            showTitle: false,
            tooltip: 'Select widgets to edit' //tooltip: {content: 'Select widgets to edit', placement: 'left'},

          }].concat(_toConsumableArray(((_this$$prompt = this.$prompt) === null || _this$$prompt === void 0 ? void 0 : _this$$prompt.macgyver) ? [{
            // Include JSON editing if $prompt.macgyver() is available
            type: 'mgButton',
            action: "rawEdit()",
            "class": 'btn btn-outline-light border-0 px-2',
            icon: 'fa fa-code fa-fw',
            showTitle: false,
            tooltip: 'Edit the form contents as JSON' //tooltip: {content: 'Edit the form contents as JSON', placement: 'left'},

          }] : []), [{
            type: 'mgButton',
            action: "setMode('adding')",
            "class": 'btn btn-outline-light border-0 px-2',
            icon: 'far fa-plus fa-fw',
            showTitle: false,
            tooltip: 'Add a new widget' //tooltip: {content: 'Add a new widget', placement: 'left'},

          }]);
        }
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$refs.form.$on('mgContainer.click', function (container, specPath, componentIndex, e) {
        e.stopPropagation();
        e.preventDefault();

        _this.editWidget(specPath);
      });
      this.$refs.form.$on('mgContainer.mouseEnter', function (container, specPath, componentIndex, e) {
        var component = _this.$refs.form.getComponentBySpecPath(specPath);

        var componentIndex = container.findChildIndex(component);
        container.$set(container.highlights, componentIndex, (container.highlights[componentIndex] || []).concat(['editHover']));
      });
      this.$refs.form.$on('mgContainer.mouseLeave', function (container, specPath, componentIndex, e) {
        var component = _this.$refs.form.getComponentBySpecPath(specPath);

        var componentIndex = container.findChildIndex(component);
        container.$set(container.highlights, componentIndex, (container.highlights[componentIndex] || []).filter(function (c) {
          return c != 'editHover';
        }));
      });
    },
    methods: {
      /**
      * Stop editing / adding and return to regular mode
      * @param {string} [mode="collapsed"] Mode to switch to
      * @param {boolean} [clearHighlight=true] Also attempt to clear out any highlight and reset the aside panes
      */
      setMode: function setMode() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'collapsed';
        var clearHighlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        // Deselect the existing item (if we have one)
        if (this.editing && clearHighlight) {
          this.setComponentHighlight(this.editing, []);
          this.editing = undefined;
        }

        this.$set(this, 'mode', mode || 'collapsed');
        return true; // Signal to mgForm that we have handled this action
      },

      /**
      * Delete the active widget
      */
      deleteWidget: function deleteWidget() {
        if (!this.editing) {
          this.$macgyver.notify.warn('No widget selected to delete'); // Not editing anyway
        } else {
          this.removeWidget(this.editing.$props.$specPath);
        }

        return true; // Signal to mgForm that we have handled this action
      },

      /**
      * Set the component.highlight[index] to the given list of CSS classes
      * @param {VueController} component The VueController to set the highlight of within its mgContainer
      * @param {array<string>} classes Array of string classes to set
      */
      setComponentHighlight: function setComponentHighlight(component, classes) {
        if (!_.isArray(classes)) throw new Error('setComponentHighlight must be passed an array');
        var container = false;
        component.$emit.up('mgIdentify', function (component) {
          if (!container && component.$props.$type == 'mgContainer') container = component;
        });
        if (!container) return console.warn('[mgFormEditor] setComponentHighlight component failed to find enclosing container', {
          component: component
        });
        var childOffset = container.findChildIndex(component);
        if (childOffset === false) return console.warn('[mgFormEditor]', 'Cannot locate component within container', {
          container: container,
          component: component
        });
        console.log('Set highlight', childOffset, classes);
        container.$set(container.highlights, childOffset, classes);
      },

      /**
      * Edit a widget by its specPath or component
      * @param {VueComponent|string} component Either the VueComponent to edit or the specPath of the widget to edit
      */
      editWidget: function editWidget(component) {
        var component; // The Vue component from the widget path

        if (!_.isObject(component) && !_.isString(component)) throw new Error('editWidget requires either a specPath or VueComponent');
        if (_.isObject(component) && !component._uid) throw new Error('editWidget() requires a valid VueComponent object (or specPath string)');
        if (_.isString(component) || _.isArray(component)) component = this.$refs.form.getComponentBySpecPath(component); // Resolve specPath into actual component if eneded

        this.setMode();
        this.$set(this, 'editing', component);
        this.$set(this, 'mode', 'editing');
        this.setComponentHighlight(component, ['editEditing']);
        var widget = this.$macgyver.widgets[component.$props.$type];

        if (widget) {
          this.$set(this, 'editConfig', [{
            // Header area
            type: 'mgContainer',
            layout: 'columns',
            border: false,
            rowClass: 'aside-header',
            showTitle: false,
            items: [{
              id: 'metaIcon',
              type: 'mgIcon'
            }, {
              id: 'id',
              type: 'mgText',
              placeholder: 'No ID'
            }, {
              type: 'mgContainer',
              layout: 'columns',
              border: false,
              showTitle: false,
              rowClass: 'aside-actions',
              items: [{
                type: 'mgButton',
                action: 'deleteWidget',
                "class": 'btn btn-link btn-link-danger btn-xs',
                icon: 'far fa-trash',
                tooltip: 'Delete this widget'
              }, {
                type: 'mgButton',
                action: 'setMode',
                text: '',
                "class": 'btn btn-link btn-xs',
                icon: 'far fa-times'
              }]
            }]
          }, {
            // Body area
            type: 'mgContainer',
            layout: 'form',
            formClass: 'titles-above',
            rowClass: 'aside-body',
            showTitle: false,
            items: _.map(widget.props, function (v, k) {
              return _.set(v, 'id', k);
            })
          }]);
          this.$set(this, 'editData', _(widget.props).mapValues(function (v, k) {
            return _.get(component.$props, k) || _.get(widget.props, k)["default"];
          }).set('id', component.$props.$dataPath).set('metaIcon', widget.meta.icon).value());
          console.log('Set editData', this.editData);
        } else {
          var _component$$props;

          this.$macgyver.notify.warn("Cannot edit unknown widget \"".concat(((_component$$props = component.$props) === null || _component$$props === void 0 ? void 0 : _component$$props.$type) || 'Unknown type', "\""));
          this.setMode();
        }
      },

      /**
      * Change the value of a nested config path
      * @param {string} path The dotted / array notation path to mutate
      * @param {*} value The value to set, if undefined the key is removed
      * @emits change Emitted with the entire deep copied config object
      * @emits changeItem Emitted as `{path, value}` for a single item mutation
      */
      mutatePath: function mutatePath(path, value) {
        console.log('mutatePath', path, value); // Only bother cloning the entire object if something is listening to 'change'

        if (this.$emit.hasListeners('change')) {
          var configCopy = _.cloneDeep(this.config);

          this.$setPath(configCopy, path, value);
          this.$emit('change', configCopy);
        }

        this.$emit('changeItem', {
          path: path,
          value: value
        });
      },

      /**
      * Splice items into a deep copy of the config object, emitting change events
      * @param {string} path The dotted / array notation path to mutate
      * @param {number} index The index to work from
      * @param {number} [remove] The number of items to remove
      * @param {*} [value...] The value(s) to set, if undefined the key is removed
      * @emits change Emitted with the entire deep copied config object
      * @emits changeItem Emitted as `{path, value}` for a single item mutation
      */
      mutateSplice: function mutateSplice(path, index, remove) {
        var configCopy = _.cloneDeep(this.config); // Copy entire object


        var spliceContents = _.get(configCopy, path); // Extract path from nested object


        if (!_.isArray(spliceContents)) throw new Error('Refusing to splice a non-array');

        for (var _len = arguments.length, value = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          value[_key - 3] = arguments[_key];
        }

        spliceContents.splice.apply(spliceContents, [index, remove].concat(value)); // Perform splice

        this.$setPath(configCopy, path, spliceContents); // Place back in mutated object

        this.$emit('change', configCopy);
        this.$emit('changeItem', path, spliceContents);
      },

      /**
      * Insert a widget at a given path
      * @param {Object} widget The widget to insert, this must contain at least a `type` key
      * @param {Object} [options] Additional options
      * @param {string|array} [options.specPath] The lodash notation specPath to target instead of the last element on the form
      * @param {string} [options.orientation='after'] Where to insert. ENUM: 'before', 'after', 'last'
      * @param {boolean} [options.useContainer=true] If no spec path, try and fit the new widget within the last container if one exists
      * @param {boolean} [options.allocateTitle=true] Try to allocate a title if not supplied
      * @param {boolean} [options.allocateId=true] Try to allocate an ID if not supplied and the widget has `preferId`
      * @param {boolean} [options.edit=true] Show the edit dialog after inserting the component
      * @returns {Object} The inserted widget object (complete with ID if allocateId is specified)
      */
      insertWidget: function insertWidget(widget, options) {
        var _this2 = this;

        console.log('insertWidget', widget, options);

        var settings = _objectSpread2({
          specPath: undefined,
          orientation: 'after',
          useContainer: true,
          allocateTitle: true,
          allocateId: true,
          edit: true
        }, options);

        if (!widget.type) throw new Error('Widget.type must be specified as a minimum for insertWidget()'); // options.allocateTitle / settings.alloacteId {{{

        if ( // A field we want is missing
        settings.allocateTitle && !widget.title || settings.allocateId && !widget.id) {
          var widgetOffset = // Compute how many of this widget are on the form
          this.$macgyver.flatten(this.$props.config, {
            want: 'array'
          }).reduce(function (offset, widget) {
            return widget.type == _this2.addData.addType ? offset + 1 : offset;
          }, 0);
          if (settings.allocateTitle && !widget.title) widget.title = this.$macgyver.widgets[this.addData.addType].meta.title + String(widgetOffset == 0 ? '' : widgetOffset);
          if (settings.allocateId && !widget.id && this.$macgyver.widgets[this.addData.addType].meta.preferId) widget.id = // Guess at an ID
          _.chain(this.addData.addType).replace(/^mg/, '') // Remove first `mg` bit
          .camelCase().replace(/$/, widgetOffset == 0 ? '' : widgetOffset) // Append numeric offset (if there is more than one of this type)
          .value();
        } // }}}


        switch (settings.orientation) {
          case 'last':
            if ( // Container -> Container:Last -> New widget
            settings.useContainer // Insert within container?
            && this.config.type == 'mgContainer' // First item is a container
            && _.last(this.config.items).type == 'mgContainer' // Last child is also a container - use this
            ) {
                this.mutateSplice("items.".concat(this.config.items.length - 1, ".items"), _.last(this.config.items).items.length, 0, widget);
              } else if ( // Container:Last -> New widget
            settings.useContainer // Insert within container?
            && this.config.type == 'mgContainer' // First item is a container
            ) {
                this.mutateSplice('items', this.config.items.length, 0, widget);
              } else if (_.isArray(this.config)) {
              // Append to end of config array
              this.mutateSplice('', this.config.items.length, 0, widget);
            } else {
              throw new Error('Dont know how to append widget to form config');
            }

            break;

          case 'before':
          case 'after':
            if (!settings.specPath) throw new Error('Inserting with orientations before / after requires a specPath');
            var parentItems = _.isArray(settings.specPath) ? settings.specPath : settings.specPath.split('.');
            var targetWidget = parentItems.pop();
            this.mutateSplice(parentItems, settings.orientation == 'after' ? +targetWidget + 1 : targetWidget, 0, widget);
            break;

          default:
            throw new Error("Dont know how to handle insert of component at with orientation \"".concat(settings.orientation, "\""));
        }

        if (settings.edit) {
          console.warn('FIXME: Unsupported post edit when editing components'); // this.editWidget(widget.id);
        }

        return widget;
      },

      /**
      * Remove a widget by its specPath
      * @param {string|array} specPath The lodash notation specPath to remove
      */
      removeWidget: function removeWidget(specPath) {
        this.setMode(); // Reset mode to close edit panel
        // FIXME: Splitting non-array, condition backwards?

        var parentItems = _.isArray(specPath) ? specPath : specPath.split('.');
        var targetIndex = parentItems.pop();
        this.mutateSplice(parentItems, targetIndex, 1);
      },

      /**
      * Duplicate a widget by its specPath
      * @param {string|array} specPath The lodash notation specPath to remove
      */
      duplicateWidget: function duplicateWidget(specPath) {
        var _this3 = this;

        var parentItems = _.isArray(specPath) ? specPath : specPath.split('.');
        var targetIndex = parentItems.pop();
        this.setMode(); // Reset mode to close edit panel

        this.mutatePath(parentItems, _(_.get(this.config, parentItems)).map(function (v, i) {
          return i == targetIndex // Duplicate this item when we find its index
          ? [v, // Original object
          _.chain(v).cloneDeep().pickBy(function (v, k) {
            return !k.startsWith('$');
          }).set('id', _this3.$macgyver.utils.incrementId(v.id)) // Also increment its ID
          .value()] : v;
        }).flatten().value());
      },

      /**
      * Move a widget in a given direction
      * @param {string|array} specPath The lodash notation SpecPath to move
      * @param {string} direction The direction to move. ENUM: 'up', 'down'
      */
      moveWidget: function moveWidget(specPath, direction) {
        if (!['up', 'down'].includes(direction)) throw new Error('Unsupported direction');
        var parentItems = _.isArray(specPath) ? specPath : specPath.split('.');
        var targetIndex = parentItems.pop();
        this.setMode(); // Reset mode to close edit panel

        this.mutatePath(parentItems, _.chain(_.get(this.config, parentItems)).clone().thru(function (v) {
          targetIndex = +targetIndex; // Splat into number

          if (direction == 'up' && targetIndex > 0) {
            var _ref = [v[targetIndex - 1], v[targetIndex]];
            v[targetIndex] = _ref[0];
            v[targetIndex - 1] = _ref[1];
          } else if (direction == 'down' && targetIndex < v.length) {
            console.log('SWAP', targetIndex, targetIndex + 1);
            var _ref2 = [v[targetIndex + 1], v[targetIndex]];
            v[targetIndex] = _ref2[0];
            v[targetIndex + 1] = _ref2[1];
          }

          return v;
        }).value());
      },

      /**
      * Begin drag sequence for a widget
      * @param {string|array} specPath The lodash notation SpecPath to drag
      */
      dragWidget: function dragWidget(specPath) {
        console.warn('FIXME: dragWidget() not yet supported');
      },
      rawEdit: function rawEdit() {
        var _this4 = this;

        this.$prompt.macgyver({
          title: 'Template JSON',
          macgyver: {
            id: 'code',
            type: 'mgCode',
            syntax: 'json',
            convert: true,
            "default": this.$props.config
          }
        }).then(function (form) {
          return _this4.$set(_this4, 'config', form.code);
        });
      },
      // Form layouts {{{

      /**
      * Generate the config layout for the Table-Of-Contents sidebar
      */
      generateConfigToc: function generateConfigToc() {
        var _this5 = this;

        var genTreeBranch = function genTreeBranch(root) {
          return root.map(function (widget) {
            return {
              title: "".concat(widget.type, " #").concat(widget.id),
              icon: _this5.$macgyver.widgets[widget.type].icon,
              "enum": widget.items ? genTreeBranch(widget.items) : undefined
            };
          });
        };

        return [{
          // Header area
          type: 'mgContainer',
          layout: 'columns',
          border: false,
          rowClass: 'aside-header',
          showTitle: false,
          items: [{
            type: 'mgHeading',
            text: 'Form layout'
          }, {
            type: 'mgContainer',
            layout: 'columns',
            border: false,
            showTitle: false,
            rowClass: 'aside-actions',
            items: [{
              type: 'mgButton',
              action: 'setMode',
              text: '',
              "class": 'btn btn-link btn-xs',
              icon: 'far fa-times'
            }]
          }]
        }, {
          // Body area
          type: 'mgContainer',
          layout: 'form',
          rowClass: 'aside-body',
          showTitles: false,
          items: [{
            type: 'mgChoiceTree',
            title: 'Layout tree',
            change: function change(item) {
              console.log('TREE CLICK', item);
            },
            "enum": genTreeBranch([this.$macgyver.compileSpec(this.$props.config, {
              clone: false
            }).spec])
          }]
        }];
      },

      /**
      * Generate the config layout for the "add widget" sidebar
      */
      generateConfigAdding: function generateConfigAdding() {
        var _this6 = this;

        return [{
          // Header area
          type: 'mgContainer',
          layout: 'columns',
          border: false,
          rowClass: 'aside-header',
          showTitle: false,
          items: [{
            type: 'mgHeading',
            text: 'Add widget'
          }, {
            type: 'mgContainer',
            layout: 'columns',
            border: false,
            showTitle: false,
            rowClass: 'aside-actions',
            items: [{
              type: 'mgButton',
              action: 'setMode',
              text: '',
              "class": 'btn btn-link btn-xs',
              icon: 'far fa-times'
            }]
          }]
        }, {
          // Body area
          type: 'mgContainer',
          layout: 'form',
          rowClass: 'aside-body',
          showTitles: false,
          items: [{
            id: 'addType',
            type: 'mgChoiceList',
            title: 'Widget type to add',
            "enum": _(this.$macgyver.widgets).map(function (w, k) {
              return {
                id: k,
                title: w.meta.title,
                icon: "".concat(w.meta.icon, " fa-fw")
              };
            }).sortBy('title').value(),
            change: function change(type) {
              var inserted = _this6.insertWidget({
                type: type
              }, {
                orientation: 'last',
                useContainer: true,
                edit: true
              });
            }
          }]
        }];
      } // }}}

    }
  });

  /* script */
  const __vue_script__$n = script$m;

  /* template */
  var __vue_render__$g = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-form-editor" },
      [
        _c(
          "aside",
          {
            class: [
              _vm.mode == "collapsed"
                ? _vm.$props.asideClassActive
                : _vm.$props.asideClassInactive,
              _vm.$props.asideClassModeCollapsed
            ]
          },
          [
            _vm.mode == "collapsed"
              ? _c("mg-form", {
                  attrs: {
                    form: _vm.id + "-collapsed",
                    config: _vm.$props.generalVerbs,
                    actions: { setMode: _vm.setMode, rawEdit: _vm.rawEdit }
                  }
                })
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "aside",
          {
            class: [
              _vm.mode == "toc"
                ? _vm.$props.asideClassActive
                : _vm.$props.asideClassInactive,
              _vm.$props.asideClassModeToc
            ]
          },
          [
            _vm.mode == "toc"
              ? _c("mg-form", {
                  attrs: {
                    form: _vm.id + "-toc",
                    config: _vm.generateConfigToc(),
                    actions: { setMode: _vm.setMode }
                  }
                })
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "aside",
          {
            class: [
              _vm.mode == "adding"
                ? _vm.$props.asideClassActive
                : _vm.$props.asideClassInactive,
              _vm.$props.asideClassModeAdding
            ]
          },
          [
            _vm.mode == "adding"
              ? _c("mg-form", {
                  ref: "formAdd",
                  attrs: {
                    config: _vm.generateConfigAdding(),
                    data: _vm.addData,
                    actions: { setMode: _vm.setMode }
                  },
                  on: {
                    change: function($event) {
                      _vm.addData = $event;
                    }
                  }
                })
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "aside",
          {
            class: [
              _vm.mode == "editing"
                ? _vm.$props.asideClassActive
                : _vm.$props.asideClassInactive,
              _vm.$props.asideClassModeEditing
            ]
          },
          [
            _vm.mode == "editing"
              ? _c("mg-form", {
                  attrs: {
                    form: _vm.id + "-edit",
                    config: _vm.editConfig,
                    data: _vm.editData,
                    actions: {
                      setMode: _vm.setMode,
                      deleteWidget: _vm.deleteWidget
                    }
                  },
                  on: {
                    changeItem: function($event) {
                      return _vm.mutatePath(
                        _vm.editing.$specPath + "." + $event.path,
                        $event.value
                      )
                    }
                  }
                })
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _c("mg-form", {
          ref: "form",
          attrs: { config: _vm.$props.config, data: _vm.$props.data }
        })
      ],
      1
    )
  };
  var __vue_staticRenderFns__$g = [];
  __vue_render__$g._withStripped = true;

    /* style */
    const __vue_inject_styles__$n = function (inject) {
      if (!inject) return
      inject("data-v-2cba79d2_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Variables {{{ */\n:root {\n\t--mg-form-editor-selected-bg: #007bff;\n\t--mg-form-editor-selected-fg: #fff;;\n\t--mg-form-editor-selected-highlight: #5dabff;\n\t--mg-form-editor-selected-danger: #dc3545;\n\t--mg-form-editor-hover-bg: #77b9ff;\n\t--mg-form-editor-hover-fg: #fff;\n}\n/* }}} */\n\n/* Aside styles - .mgfe-aside {{{ */\n.mgfe-aside {\n\ttransition: transform 0.2s ease-out;\n}\n.mgfe-aside .mg-form {\n\tmargin: 0;\n}\n.mgfe-aside.aside-right.open.open { /* Silly hack to force the transform when open (overrides .asign-sm in priority) */\n\ttransform: translateX(0px);\n}\n.mgfe-aside.aside-right {\n\tposition: fixed;\n\ttop: 0px;\n\tright: 0px;\n\tbottom: 0px;\n\tbackground: #FFF;\n\tz-index: 100;\n\tbox-shadow: 0 1px 5px rgba(0,0,0,.3);\n\twidth: 350px;\n\ttransform: translateX(380px);\n}\n\n/* .mgfe-aside-sm {{{ */\n.mgfe-aside.aside-right.aside-sm {\n\twidth: 40px;\n\ttransform: translateX(50px);\n\ttop: calc(50% - 30px); /* Approx middle of the screen */\n\tbottom: inherit;\n\tborder-radius: 5px;\n}\n.mgfe-aside.aside-right.aside-sm .form-group {\n\tmargin: 0;\n}\n\n/* Remove BS padding from sub-elements */\n.mgfe-aside.aside-right.aside-sm .form-group [class*=\"col-\"] {\n\tpadding: 0;\n}\n/* }}} */\n\n/* Headers {{{ */\n.mgfe-aside .aside-header {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: flex-end;\n\tborder-bottom: 1px solid #e9ecef;\n\tmargin: 0;\n}\n.mgfe-aside .aside-header h4 {\n\tflex-grow: 1;\n}\n.mgfe-aside .aside-header legend.form-control-static {\n\tborder-bottom: none;\n\tfont-size: 17pt;\n}\n.mgfe-aside .aside-header .close {\n\tcolor: #5e5e5e;\n}\n.mgfe-aside .aside-header .close:hover {\n\tcolor: #000;\n}\n.mgfe-aside .aside-header .close::after {\n\tdisplay: inline-block;\n\tfont-family: 'Font Awesome 5 Pro';\n\tfont-weight: 900;\n\tcontent: \"\\f00d\";\n}\n/* }}} */\n\n/* Actions {{{ */\n.mgfe-aside .aside-actions {\n\tjustify-self: flex-end;\n\tmargin-right: 10px;\n}\n.mgfe-aside .aside-actions .btn-group {\n\tborder: none;\n\tbox-shadow: none;\n}\n.mgfe-aside .aside-actions a {\n\tpadding: 8px;\n\tfont-size: 125%;\n}\n/* }}} */\n\n/* Body {{{ */\n.mgfe-aside .aside-body {\n\tmargin-left: 0;\n\tmargin: 10px 0 0;\n\n\t/* Body scrolling */\n\toverflow: auto;\n\theight: calc(100vh - 80px);\n}\n/* }}} */\n/* }}} */\n\n/* Component highlighting {{{\n\n/* Highlight applied to active elements inside an mgContainer */\n.mg-form-editor-target {\n\tborder: 2px solid var(--blue);\n\tborder-radius: 5px;\n\tposition: relative;\n\ttop: -4px;\n\tleft: -4px;\n\tpadding: 2px;\n}\n.mg-form-editor-drop-target {\n}\n.mg-form-editor-drop-target-before {\n\tborder-top: 4px dashed var(--blue);\n}\n.mg-form-editor-drop-target-after {\n\tborder-bottom: 4px dashed var(--blue);\n}\n/* }}} */\n\n/* Drag + Drop {{{ */\nbody.mg-form-editor-dragging * {\n\tcursor: grabbing;\n}\n#mg-form-editor-drag {\n\tdisplay: block;\n\tz-index: 1000;\n\tposition: absolute;\n\ttop: -10000px;\n\tleft: -10000px;\n\tmin-width: 160px;\n\theight: 40px;\n\tborder-radius: 5px;\n\tbackground: #2196F3;\n\tbox-shadow: 1px 1px 4px rgba(0,0,0,.3);\n\tpadding: 10px;\n\tcolor: #FFF;\n}\n#mg-form-editor-drag > i {\n\tmargin-right: 5px;\n}\n/* }}} */\n\n/* Misc fixes {{{ */\n/* Buttons that are also fixed with look weird */\n.mg-form-editor .btn.fa-fw {\n\twidth: 2.30em;\n\tpadding: 4px 2px !important;\n}\n/* }}} */\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgFormEditor.vue"],"names":[],"mappingsoBA,kBAAA;AACA;CACA,qCAAA;CACA,kCAAA;CACA,4CAAA;CACA,yCAAA;CACA,kCAAA;CACA,+BAAA;AACA;AACA,QAAA;;AAEA,mCAAA;AACA;CACA,mCAAA;AACA;AAEA;CACA,SAAA;AACA;AAEA,oCAAA,kFAAA;CACA,0BAAA;AACA;AAEA;CACA,eAAA;CACA,QAAA;CACA,UAAA;CACA,WAAA;CACA,gBAAA;CACA,YAAA;CACA,oCAAA;CACA,YAAA;CACA,4BAAA;AACA;;AAEA,uBAAA;AACA;CACA,WAAA;CACA,2BAAA;CACA,qBAAA,EAAA,gCAAA;CACA,eAAA;CACA,kBAAA;AACA;AAEA;CACA,SAAA;AACA;;AAEA,wCAAA;AACA;CACA,UAAA;AACA;AACA,QAAA;;AAEA,gBAAA;AACA;CACA,aAAA;CACA,mBAAA;CACA,yBAAA;CACA,gCAAA;CACA,SAAA;AACA;AAEA;CACA,YAAA;AACA;AAEA;CACA,mBAAA;CACA,eAAA;AACA;AAEA;CACA,cAAA;AACA;AAEA;CACA,WAAA;AACA;AAEA;CACA,qBAAA;CACA,iCAAA;CACA,gBAAA;CACA,gBAAA;AACA;AACA,QAAA;;AAEA,gBAAA;AACA;CACA,sBAAA;CACA,kBAAA;AACA;AAEA;CACA,YAAA;CACA,gBAAA;AACA;AAEA;CACA,YAAA;CACA,eAAA;AACA;AACA,QAAA;;AAEA,aAAA;AACA;CACA,cAAA;CACA,gBAAA;;CAEA,mBAAA;CACA,cAAA;CACA,0BAAA;AACA;AACA,QAAA;AACA,QAAA;;AAEA;;+DAEA;AACA;CACA,6BAAA;CACA,kBAAA;CACA,kBAAA;CACA,SAAA;CACA,UAAA;CACA,YAAA;AACA;AAEA;AACA;AAEA;CACA,kCAAA;AACA;AAEA;CACA,qCAAA;AACA;AACA,QAAA;;AAEA,oBAAA;AACA;CACA,gBAAA;AACA;AAEA;CACA,cAAA;CACA,aAAA;CACA,kBAAA;CACA,aAAA;CACA,cAAA;CACA,gBAAA;CACA,YAAA;CACA,kBAAA;CACA,mBAAA;CACA,sCAAA;CACA,aAAA;CACA,WAAA;AACA;AAEA;CACA,iBAAA;AACA;AACA,QAAA;;AAEA,mBAAA;AACA,gDAAA;AACA;CACA,aAAA;CACA,2BAAA;AACA;AACA,QAAA","file":"mgFormEditor.vue","sourcesContent":["<script>\nimport mgFormEditorControls from './mgFormEditorControls';\n\n/**\n* mg-form-editor - Drag-and-drop form designer for MacGyver\n*\n* @param {Object|Array} config mgForm compatible spec to edit\n* @param {Object} [data] Optional data bindings for the form\n* @param {array<Object>} [verbs] Verb edit mgForm to show in the small edit sidebar, defaults to selecting widgets / adding widgets buttons\n* @param {string} [asideClassActive=\"mgfe-aside aside-right open\"] Class to set all editing sidebars to when inactive\n* @param {string} [asideClassInactive=\"mgfe-aside aside-right\"] Class to set all editing sidebar to when inactive\n* @param {string} [asideClassModeCollapsed=\"aside-sm\"] Class to associate with the smaller toolkit display when editing\n* @param {string} [asideClassModeToc=\"aside-sm\"] Class to associate with the Table-Of-Contents sidebar\n* @param {string} [asideClassModeAdding=\"\"] Class to associate with the editing sidebar when adding\n* @param {string} [asideClassModeEditing=\"\"] Class to associate with the editing sidebar when editing\n*\n* @emits change Emitted as `(config)` on any item configuration change. WARNING, subscribing to this involves an entire deep copy of the config structure, subscribe to changeItem if possible\n* @emits changeItem Emitted as `({path, value})` when a single config item changes, inexpensive compared to `change`\n*/\nexport default Vue.component('mgFormEditor', {\n\tprovide() { return {\n\t\t$mgFormEditor: this,\n\t}},\n\tcomponents: {\n\t\tmgFormEditorControls,\n\t},\n\tdata() { return {\n\t\tmode: 'collapsed', // ENUM: collapsed, toc, editing, adding\n\t\tid: this.$macgyver.nextId(), // ID of the editing form item\n\t\tediting: undefined, // The active item we are editing\n\t\twidgetListMode: 'grid',\n\n\t\t// Asides\n\t\teditConfig: [],\n\t\teditData: {},\n\n\t\taddTarget: undefined, // Spec path to add after, if any\n\t\taddOrientation: 'after',\n\n\t\t// Holding data for various form states\n\t\taddData: {},\n\t}},\n\tprops: {\n\t\t// FIXME: Does not like array type specs.\n\t\tconfig: [Object, Array], // Can be a single object, array of objects or shorthand style\n\t\tdata: Object,\n\t\tasideClassActive: {type: String, default: 'mgfe-aside aside-right open'},\n\t\tasideClassInactive: {type: String, default: 'mgfe-aside aside-right'},\n\t\tasideClassModeCollapsed: {type: String, default: 'aside-sm'},\n\t\tasideClassModeToc: {type: String, default: ''},\n\t\tasideClassModeAdding: {type: String, default: ''},\n\t\tasideClassModeEditing: {type: String, default: ''},\n\t\tgeneralVerbs: {\n\t\t\ttype: Array,\n\t\t\tdefault() {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mgButton',\n\t\t\t\t\t\taction: \"setMode()\",\n\t\t\t\t\t\tclass: 'btn btn-primary text-white px-2',\n\t\t\t\t\t\ticon: 'fa fa-mouse-pointer fa-fw',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\t// FIXME: Why were tooltips failing as Object type?\n\t\t\t\t\t\ttooltip: 'Select widgets to edit',\n\t\t\t\t\t\t//tooltip: \"{content: 'Select widgets to edit', placement: 'left'}\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mgButton',\n\t\t\t\t\t\taction: \"setMode('toc')\",\n\t\t\t\t\t\tclass: 'btn btn-outline-light border-0 px-2',\n\t\t\t\t\t\ticon: 'fa fa-stream fa-fw',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\ttooltip: 'Select widgets to edit',\n\t\t\t\t\t\t//tooltip: {content: 'Select widgets to edit', placement: 'left'},\n\t\t\t\t\t},\n\t\t\t\t\t...(this.$prompt?.macgyver ? [{ // Include JSON editing if $prompt.macgyver() is available\n\t\t\t\t\t\ttype: 'mgButton',\n\t\t\t\t\t\taction: \"rawEdit()\",\n\t\t\t\t\t\tclass: 'btn btn-outline-light border-0 px-2',\n\t\t\t\t\t\ticon: 'fa fa-code fa-fw',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\ttooltip: 'Edit the form contents as JSON',\n\t\t\t\t\t\t//tooltip: {content: 'Edit the form contents as JSON', placement: 'left'},\n\t\t\t\t\t}] : []),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mgButton',\n\t\t\t\t\t\taction: \"setMode('adding')\",\n\t\t\t\t\t\tclass: 'btn btn-outline-light border-0 px-2',\n\t\t\t\t\t\ticon: 'far fa-plus fa-fw',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\ttooltip: 'Add a new widget',\n\t\t\t\t\t\t//tooltip: {content: 'Add a new widget', placement: 'left'},\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t},\n\t\t},\n\t},\n\tmounted() {\n\t\tthis.$refs.form.$on('mgContainer.click', (container, specPath, componentIndex, e) => {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t\tthis.editWidget(specPath);\n\t\t});\n\n\t\tthis.$refs.form.$on('mgContainer.mouseEnter', (container, specPath, componentIndex, e) => {\n\t\t\tvar component = this.$refs.form.getComponentBySpecPath(specPath);\n\t\t\tvar componentIndex = container.findChildIndex(component);\n\n\t\t\tcontainer.$set(container.highlights, componentIndex, (container.highlights[componentIndex] || []).concat(['editHover']));\n\t\t});\n\n\t\tthis.$refs.form.$on('mgContainer.mouseLeave', (container, specPath, componentIndex, e) => {\n\t\t\tvar component = this.$refs.form.getComponentBySpecPath(specPath);\n\t\t\tvar componentIndex = container.findChildIndex(component);\n\n\t\t\tcontainer.$set(container.highlights, componentIndex, (container.highlights[componentIndex] || []).filter(c => c != 'editHover'));\n\t\t});\n\t},\n\tmethods: {\n\t\t/**\n\t\t* Stop editing / adding and return to regular mode\n\t\t* @param {string} [mode=\"collapsed\"] Mode to switch to\n\t\t* @param {boolean} [clearHighlight=true] Also attempt to clear out any highlight and reset the aside panes\n\t\t*/\n\t\tsetMode(mode = 'collapsed', clearHighlight = true) {\n\t\t\t// Deselect the existing item (if we have one)\n\t\t\tif (this.editing && clearHighlight) {\n\t\t\t\tthis.setComponentHighlight(this.editing, []);\n\t\t\t\tthis.editing = undefined;\n\t\t\t}\n\n\t\t\tthis.$set(this, 'mode', mode || 'collapsed');\n\t\t\treturn true; // Signal to mgForm that we have handled this action\n\t\t},\n\n\n\t\t/**\n\t\t* Delete the active widget\n\t\t*/\n\t\tdeleteWidget() {\n\t\t\tif (!this.editing) {\n\t\t\t\tthis.$macgyver.notify.warn('No widget selected to delete'); // Not editing anyway\n\t\t\t} else {\n\t\t\t\tthis.removeWidget(this.editing.$props.$specPath);\n\t\t\t}\n\n\t\t\treturn true; // Signal to mgForm that we have handled this action\n\t\t},\n\n\n\t\t/**\n\t\t* Set the component.highlight[index] to the given list of CSS classes\n\t\t* @param {VueController} component The VueController to set the highlight of within its mgContainer\n\t\t* @param {array<string>} classes Array of string classes to set\n\t\t*/\n\t\tsetComponentHighlight(component, classes) {\n\t\t\tif (!_.isArray(classes)) throw new Error('setComponentHighlight must be passed an array');\n\n\t\t\tvar container = false;\n\t\t\tcomponent.$emit.up('mgIdentify', component => {\n\t\t\t\tif (!container && component.$props.$type == 'mgContainer') container = component;\n\t\t\t});\n\t\t\tif (!container) return console.warn('[mgFormEditor] setComponentHighlight component failed to find enclosing container', {component});\n\n\t\t\tvar childOffset = container.findChildIndex(component);\n\t\t\tif (childOffset === false) return console.warn('[mgFormEditor]', 'Cannot locate component within container', {container, component});\n\n\t\t\tconsole.log('Set highlight', childOffset, classes);\n\t\t\tcontainer.$set(container.highlights, childOffset, classes);\n\t\t},\n\n\n\t\t/**\n\t\t* Edit a widget by its specPath or component\n\t\t* @param {VueComponent|string} component Either the VueComponent to edit or the specPath of the widget to edit\n\t\t*/\n\t\teditWidget(component) {\n\t\t\tvar component; // The Vue component from the widget path\n\t\t\tif (!_.isObject(component) && !_.isString(component)) throw new Error('editWidget requires either a specPath or VueComponent');\n\t\t\tif (_.isObject(component) && !component._uid) throw new Error('editWidget() requires a valid VueComponent object (or specPath string)');\n\n\t\t\tif (_.isString(component) || _.isArray(component)) component = this.$refs.form.getComponentBySpecPath(component); // Resolve specPath into actual component if eneded\n\n\t\t\tthis.setMode();\n\n\t\t\tthis.$set(this, 'editing', component);\n\t\t\tthis.$set(this, 'mode', 'editing');\n\n\t\t\tthis.setComponentHighlight(component, ['editEditing']);\n\n\t\t\tvar widget = this.$macgyver.widgets[component.$props.$type];\n\t\t\tif (widget) {\n\t\t\t\tthis.$set(this, 'editConfig', [\n\t\t\t\t\t{ // Header area\n\t\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\t\tborder: false,\n\t\t\t\t\t\trowClass: 'aside-header',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t{id: 'metaIcon', type: 'mgIcon'},\n\t\t\t\t\t\t\t{id: 'id', type: 'mgText', placeholder: 'No ID'},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\t\t\t\tborder: false,\n\t\t\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\t\t\trowClass: 'aside-actions',\n\t\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t\t{type: 'mgButton', action: 'deleteWidget', class: 'btn btn-link btn-link-danger btn-xs', icon: 'far fa-trash', tooltip: 'Delete this widget'},\n\t\t\t\t\t\t\t\t\t{type: 'mgButton', action: 'setMode', text: '', class: 'btn btn-link btn-xs', icon: 'far fa-times'},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{ // Body area\n\t\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\t\tlayout: 'form',\n\t\t\t\t\t\tformClass: 'titles-above',\n\t\t\t\t\t\trowClass: 'aside-body',\n\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\titems: _.map(widget.props, (v, k) => _.set(v, 'id', k)),\n\t\t\t\t\t},\n\t\t\t\t]);\n\n\t\t\t\tthis.$set(this, 'editData',\n\t\t\t\t\t_(widget.props)\n\t\t\t\t\t\t.mapValues((v, k) => _.get(component.$props, k) || _.get(widget.props, k).default)\n\t\t\t\t\t\t.set('id', component.$props.$dataPath)\n\t\t\t\t\t\t.set('metaIcon', widget.meta.icon)\n\t\t\t\t\t\t.value()\n\t\t\t\t);\n\t\t\t\tconsole.log('Set editData', this.editData);\n\t\t\t} else {\n\t\t\t\tthis.$macgyver.notify.warn(`Cannot edit unknown widget \"${component.$props?.$type || 'Unknown type'}\"`);\n\t\t\t\tthis.setMode();\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t* Change the value of a nested config path\n\t\t* @param {string} path The dotted / array notation path to mutate\n\t\t* @param {*} value The value to set, if undefined the key is removed\n\t\t* @emits change Emitted with the entire deep copied config object\n\t\t* @emits changeItem Emitted as `{path, value}` for a single item mutation\n\t\t*/\n\t\tmutatePath(path, value) {\n\t\t\tconsole.log('mutatePath', path, value);\n\t\t\t// Only bother cloning the entire object if something is listening to 'change'\n\t\t\tif (this.$emit.hasListeners('change')) {\n\t\t\t\tvar configCopy = _.cloneDeep(this.config);\n\t\t\t\tthis.$setPath(configCopy, path, value);\n\t\t\t\tthis.$emit('change', configCopy);\n\t\t\t}\n\n\t\t\tthis.$emit('changeItem', {path: path, value: value});\n\t\t},\n\n\n\t\t/**\n\t\t* Splice items into a deep copy of the config object, emitting change events\n\t\t* @param {string} path The dotted / array notation path to mutate\n\t\t* @param {number} index The index to work from\n\t\t* @param {number} [remove] The number of items to remove\n\t\t* @param {*} [value...] The value(s) to set, if undefined the key is removed\n\t\t* @emits change Emitted with the entire deep copied config object\n\t\t* @emits changeItem Emitted as `{path, value}` for a single item mutation\n\t\t*/\n\t\tmutateSplice(path, index, remove, ...value) {\n\t\t\tvar configCopy = _.cloneDeep(this.config); // Copy entire object\n\t\t\tvar spliceContents = _.get(configCopy, path); // Extract path from nested object\n\t\t\tif (!_.isArray(spliceContents)) throw new Error('Refusing to splice a non-array');\n\t\t\tspliceContents.splice(index, remove, ...value); // Perform splice\n\n\t\t\tthis.$setPath(configCopy, path, spliceContents); // Place back in mutated object\n\n\t\t\tthis.$emit('change', configCopy);\n\t\t\tthis.$emit('changeItem', path, spliceContents);\n\t\t},\n\n\n\t\t/**\n\t\t* Insert a widget at a given path\n\t\t* @param {Object} widget The widget to insert, this must contain at least a `type` key\n\t\t* @param {Object} [options] Additional options\n\t\t* @param {string|array} [options.specPath] The lodash notation specPath to target instead of the last element on the form\n\t\t* @param {string} [options.orientation='after'] Where to insert. ENUM: 'before', 'after', 'last'\n\t\t* @param {boolean} [options.useContainer=true] If no spec path, try and fit the new widget within the last container if one exists\n\t\t* @param {boolean} [options.allocateTitle=true] Try to allocate a title if not supplied\n\t\t* @param {boolean} [options.allocateId=true] Try to allocate an ID if not supplied and the widget has `preferId`\n\t\t* @param {boolean} [options.edit=true] Show the edit dialog after inserting the component\n\t\t* @returns {Object} The inserted widget object (complete with ID if allocateId is specified)\n\t\t*/\n\t\tinsertWidget(widget, options) {\n\t\t\tconsole.log('insertWidget', widget, options);\n\t\t\tvar settings = {\n\t\t\t\tspecPath: undefined,\n\t\t\t\torientation: 'after',\n\t\t\t\tuseContainer: true,\n\t\t\t\tallocateTitle: true,\n\t\t\t\tallocateId: true,\n\t\t\t\tedit: true,\n\t\t\t\t...options,\n\t\t\t};\n\n\t\t\tif (!widget.type) throw new Error('Widget.type must be specified as a minimum for insertWidget()');\n\n\t\t\t// options.allocateTitle / settings.alloacteId {{{\n\t\t\tif ( // A field we want is missing\n\t\t\t\t(settings.allocateTitle && !widget.title)\n\t\t\t\t|| (settings.allocateId && !widget.id)\n\t\t\t) {\n\t\t\t\tvar widgetOffset = // Compute how many of this widget are on the form\n\t\t\t\t\tthis.$macgyver.flatten(this.$props.config, {want: 'array'}).reduce((offset, widget) =>\n\t\t\t\t\t\twidget.type == this.addData.addType ? offset + 1 : offset\n\t\t\t\t\t, 0);\n\n\t\t\t\tif (settings.allocateTitle && !widget.title) widget.title =\n\t\t\t\t\tthis.$macgyver.widgets[this.addData.addType].meta.title\n\t\t\t\t\t+ String(widgetOffset == 0 ? '' : widgetOffset);\n\n\t\t\t\tif (settings.allocateId && !widget.id && this.$macgyver.widgets[this.addData.addType].meta.preferId) widget.id = // Guess at an ID\n\t\t\t\t\t_.chain(this.addData.addType)\n\t\t\t\t\t\t.replace(/^mg/, '') // Remove first `mg` bit\n\t\t\t\t\t\t.camelCase()\n\t\t\t\t\t\t.replace(/$/, widgetOffset == 0 ? '' : widgetOffset) // Append numeric offset (if there is more than one of this type)\n\t\t\t\t\t\t.value()\n\t\t\t}\n\t\t\t// }}}\n\n\t\t\tswitch (settings.orientation) {\n\t\t\t\tcase 'last':\n\t\t\t\t\tif ( // Container -> Container:Last -> New widget\n\t\t\t\t\t\tsettings.useContainer // Insert within container?\n\t\t\t\t\t\t&& this.config.type == 'mgContainer' // First item is a container\n\t\t\t\t\t\t&& _.last(this.config.items).type == 'mgContainer' // Last child is also a container - use this\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.mutateSplice(`items.${this.config.items.length - 1}.items`, _.last(this.config.items).items.length, 0, widget);\n\t\t\t\t\t} else if ( // Container:Last -> New widget\n\t\t\t\t\t\tsettings.useContainer // Insert within container?\n\t\t\t\t\t\t&& this.config.type == 'mgContainer' // First item is a container\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.mutateSplice('items', this.config.items.length, 0, widget);\n\t\t\t\t\t} else if (_.isArray(this.config)) { // Append to end of config array\n\t\t\t\t\t\tthis.mutateSplice('', this.config.items.length, 0, widget);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Dont know how to append widget to form config');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'before':\n\t\t\t\tcase 'after':\n\t\t\t\t\tif (!settings.specPath) throw new Error('Inserting with orientations before / after requires a specPath');\n\t\t\t\t\tvar parentItems = _.isArray(settings.specPath) ? settings.specPath : settings.specPath.split('.');\n\t\t\t\t\tvar targetWidget = parentItems.pop();\n\n\t\t\t\t\tthis.mutateSplice(\n\t\t\t\t\t\tparentItems,\n\t\t\t\t\t\tsettings.orientation == 'after' ? +targetWidget + 1 : targetWidget,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\twidget\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Dont know how to handle insert of component at with orientation \"${settings.orientation}\"`);\n\t\t\t}\n\n\t\t\tif (settings.edit) {\n\t\t\t\tconsole.warn('FIXME: Unsupported post edit when editing components');\n\t\t\t\t// this.editWidget(widget.id);\n\t\t\t}\n\n\t\t\treturn widget;\n\t\t},\n\n\n\t\t/**\n\t\t* Remove a widget by its specPath\n\t\t* @param {string|array} specPath The lodash notation specPath to remove\n\t\t*/\n\t\tremoveWidget(specPath) {\n\t\t\tthis.setMode(); // Reset mode to close edit panel\n\n\t\t\t// FIXME: Splitting non-array, condition backwards?\n\t\t\tvar parentItems = _.isArray(specPath) ? specPath : specPath.split('.');\n\t\t\tvar targetIndex = parentItems.pop();\n\n\t\t\tthis.mutateSplice(parentItems, targetIndex, 1);\n\t\t},\n\n\n\t\t/**\n\t\t* Duplicate a widget by its specPath\n\t\t* @param {string|array} specPath The lodash notation specPath to remove\n\t\t*/\n\t\tduplicateWidget(specPath) {\n\t\t\tvar parentItems = _.isArray(specPath) ? specPath : specPath.split('.');\n\t\t\tvar targetIndex = parentItems.pop();\n\n\t\t\tthis.setMode(); // Reset mode to close edit panel\n\t\t\tthis.mutatePath(\n\t\t\t\tparentItems,\n\t\t\t\t_(_.get(this.config, parentItems))\n\t\t\t\t\t.map((v, i) => i == targetIndex // Duplicate this item when we find its index\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\tv, // Original object\n\t\t\t\t\t\t\t_.chain(v)\n\t\t\t\t\t\t\t\t.cloneDeep()\n\t\t\t\t\t\t\t\t.pickBy((v, k) => !k.startsWith('$'))\n\t\t\t\t\t\t\t\t.set('id', this.$macgyver.utils.incrementId(v.id)) // Also increment its ID\n\t\t\t\t\t\t\t\t.value(),\n\t\t\t\t\t\t]\n\t\t\t\t\t\t: v\n\t\t\t\t\t)\n\t\t\t\t\t.flatten()\n\t\t\t\t\t.value()\n\t\t\t);\n\t\t},\n\n\n\t\t/**\n\t\t* Move a widget in a given direction\n\t\t* @param {string|array} specPath The lodash notation SpecPath to move\n\t\t* @param {string} direction The direction to move. ENUM: 'up', 'down'\n\t\t*/\n\t\tmoveWidget(specPath, direction) {\n\t\t\tif (!['up', 'down'].includes(direction)) throw new Error('Unsupported direction');\n\n\t\t\tvar parentItems = _.isArray(specPath) ? specPath : specPath.split('.');\n\t\t\tvar targetIndex = parentItems.pop();\n\n\t\t\tthis.setMode(); // Reset mode to close edit panel\n\t\t\tthis.mutatePath(\n\t\t\t\tparentItems,\n\t\t\t\t_.chain(_.get(this.config, parentItems))\n\t\t\t\t\t.clone()\n\t\t\t\t\t.thru(v => {\n\t\t\t\t\t\ttargetIndex = +targetIndex; // Splat into number\n\t\t\t\t\t\tif (direction == 'up' && targetIndex > 0) {\n\t\t\t\t\t\t\t[v[targetIndex], v[targetIndex-1]]\n\t\t\t\t\t\t\t=\n\t\t\t\t\t\t\t[v[targetIndex-1], v[targetIndex]]\n\t\t\t\t\t\t} else if (direction == 'down' && targetIndex < v.length) {\n\t\t\t\t\t\t\tconsole.log('SWAP', targetIndex, targetIndex + 1);\n\t\t\t\t\t\t\t[v[targetIndex], v[targetIndex+1]]\n\t\t\t\t\t\t\t=\n\t\t\t\t\t\t\t[v[targetIndex+1], v[targetIndex]]\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t})\n\t\t\t\t\t.value()\n\t\t\t);\n\t\t},\n\n\n\t\t/**\n\t\t* Begin drag sequence for a widget\n\t\t* @param {string|array} specPath The lodash notation SpecPath to drag\n\t\t*/\n\t\tdragWidget(specPath) {\n\t\t\tconsole.warn('FIXME: dragWidget() not yet supported');\n\t\t},\n\n\n\t\trawEdit() {\n\t\t\tthis.$prompt.macgyver({\n\t\t\t\ttitle: 'Template JSON',\n\t\t\t\tmacgyver: {\n\t\t\t\t\tid: 'code',\n\t\t\t\t\ttype: 'mgCode',\n\t\t\t\t\tsyntax: 'json',\n\t\t\t\t\tconvert: true,\n\t\t\t\t\tdefault: this.$props.config,\n\t\t\t\t},\n\t\t\t}).then(form => this.$set(this, 'config', form.code))\n\t\t},\n\n\n\t\t// Form layouts {{{\n\t\t/**\n\t\t* Generate the config layout for the Table-Of-Contents sidebar\n\t\t*/\n\t\tgenerateConfigToc() {\n\t\t\tvar genTreeBranch = root =>\n\t\t\t\troot.map(widget => ({\n\t\t\t\t\ttitle: `${widget.type} #${widget.id}`,\n\t\t\t\t\ticon: this.$macgyver.widgets[widget.type].icon,\n\t\t\t\t\tenum: widget.items ? genTreeBranch(widget.items) : undefined,\n\t\t\t\t}));\n\n\t\t\treturn [\n\t\t\t\t{ // Header area\n\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\tborder: false,\n\t\t\t\t\trowClass: 'aside-header',\n\t\t\t\t\tshowTitle: false,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{type: 'mgHeading', text: 'Form layout'},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\t\t\tborder: false,\n\t\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\t\trowClass: 'aside-actions',\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{type: 'mgButton', action: 'setMode', text: '', class: 'btn btn-link btn-xs', icon: 'far fa-times'},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{ // Body area\n\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\tlayout: 'form',\n\t\t\t\t\trowClass: 'aside-body',\n\t\t\t\t\tshowTitles: false,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mgChoiceTree',\n\t\t\t\t\t\t\ttitle: 'Layout tree',\n\t\t\t\t\t\t\tchange: item => {\n\t\t\t\t\t\t\t\tconsole.log('TREE CLICK', item);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenum: genTreeBranch(\n\t\t\t\t\t\t\t\t[ this.$macgyver.compileSpec(this.$props.config, {clone: false}).spec ]\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t];\n\t\t},\n\n\n\t\t/**\n\t\t* Generate the config layout for the \"add widget\" sidebar\n\t\t*/\n\t\tgenerateConfigAdding() {\n\t\t\treturn [\n\t\t\t\t{ // Header area\n\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\tborder: false,\n\t\t\t\t\trowClass: 'aside-header',\n\t\t\t\t\tshowTitle: false,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{type: 'mgHeading', text: 'Add widget'},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\t\t\tlayout: 'columns',\n\t\t\t\t\t\t\tborder: false,\n\t\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\t\trowClass: 'aside-actions',\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{type: 'mgButton', action: 'setMode', text: '', class: 'btn btn-link btn-xs', icon: 'far fa-times'},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{ // Body area\n\t\t\t\t\ttype: 'mgContainer',\n\t\t\t\t\tlayout: 'form',\n\t\t\t\t\trowClass: 'aside-body',\n\t\t\t\t\tshowTitles: false,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'addType',\n\t\t\t\t\t\t\ttype: 'mgChoiceList',\n\t\t\t\t\t\t\ttitle: 'Widget type to add',\n\t\t\t\t\t\t\tenum: _(this.$macgyver.widgets)\n\t\t\t\t\t\t\t\t.map((w, k) => ({\n\t\t\t\t\t\t\t\t\tid: k,\n\t\t\t\t\t\t\t\t\ttitle: w.meta.title,\n\t\t\t\t\t\t\t\t\ticon: `${w.meta.icon} fa-fw`,\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t.sortBy('title')\n\t\t\t\t\t\t\t\t.value(),\n\t\t\t\t\t\t\tchange: type => {\n\t\t\t\t\t\t\t\tvar inserted = this.insertWidget({type}, {\n\t\t\t\t\t\t\t\t\torientation: 'last',\n\t\t\t\t\t\t\t\t\tuseContainer: true,\n\t\t\t\t\t\t\t\t\tedit: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t];\n\t\t},\n\t\t// }}}\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-form-editor\">\n\t\t<!-- Aside collapsed mode {{{ -->\n\t\t<aside :class=\"[mode == 'collapsed' ? $props.asideClassActive : $props.asideClassInactive, $props.asideClassModeCollapsed]\">\n\t\t\t<mg-form\n\t\t\t\tv-if=\"mode == 'collapsed'\"\n\t\t\t\t:form=\"`${id}-collapsed`\"\n\t\t\t\t:config=\"$props.generalVerbs\"\n\t\t\t\t:actions=\"{setMode, rawEdit}\"\n\t\t\t/>\n\t\t</aside>\n\t\t<!-- }}} -->\n\t\t<!-- Aside toc (table-of-contents) mode {{{ -->\n\t\t<aside :class=\"[mode == 'toc' ? $props.asideClassActive : $props.asideClassInactive, $props.asideClassModeToc]\">\n\t\t\t<mg-form\n\t\t\t\tv-if=\"mode == 'toc'\"\n\t\t\t\t:form=\"`${id}-toc`\"\n\t\t\t\t:config=\"generateConfigToc()\"\n\t\t\t\t:actions=\"{setMode}\"\n\t\t\t/>\n\t\t</aside>\n\t\t<!-- }}} -->\n\t\t<!-- Aside widget library (add widget) {{{ -->\n\t\t<aside :class=\"[mode == 'adding' ? $props.asideClassActive : $props.asideClassInactive, $props.asideClassModeAdding]\">\n\t\t\t<mg-form\n\t\t\t\tv-if=\"mode == 'adding'\"\n\t\t\t\tref=\"formAdd\"\n\t\t\t\t:config=\"generateConfigAdding()\"\n\t\t\t\t:data=\"addData\"\n\t\t\t\t:actions=\"{setMode}\"\n\t\t\t\t@change=\"addData = $event\"\n\t\t\t/>\n\t\t</aside>\n\t\t<!-- }}} -->\n\t\t<!-- Aside item editor (edit widget) {{{ -->\n\t\t<aside :class=\"[mode == 'editing' ? $props.asideClassActive : $props.asideClassInactive, $props.asideClassModeEditing]\">\n\t\t\t<mg-form\n\t\t\t\tv-if=\"mode == 'editing'\"\n\t\t\t\t:form=\"`${id}-edit`\"\n\t\t\t\t:config=\"editConfig\"\n\t\t\t\t:data=\"editData\"\n\t\t\t\t:actions=\"{setMode, deleteWidget}\"\n\t\t\t\t@changeItem=\"mutatePath(`${editing.$specPath}.${$event.path}`, $event.value)\"\n\t\t\t/>\n\t\t</aside>\n\t\t<!-- }}} -->\n\n\t\t<!-- Display form {{{ -->\n\t\t<mg-form\n\t\t\tref=\"form\"\n\t\t\t:config=\"$props.config\"\n\t\t\t:data=\"$props.data\"\n\t\t/>\n\t\t<!-- }}} -->\n\t</div>\n</template>\n\n<style>\n/* Variables {{{ */\n:root {\n\t--mg-form-editor-selected-bg: #007bff;\n\t--mg-form-editor-selected-fg: #fff;;\n\t--mg-form-editor-selected-highlight: #5dabff;\n\t--mg-form-editor-selected-danger: #dc3545;\n\t--mg-form-editor-hover-bg: #77b9ff;\n\t--mg-form-editor-hover-fg: #fff;\n}\n/* }}} */\n\n/* Aside styles - .mgfe-aside {{{ */\n.mgfe-aside {\n\ttransition: transform 0.2s ease-out;\n}\n\n.mgfe-aside .mg-form {\n\tmargin: 0;\n}\n\n.mgfe-aside.aside-right.open.open { /* Silly hack to force the transform when open (overrides .asign-sm in priority) */\n\ttransform: translateX(0px);\n}\n\n.mgfe-aside.aside-right {\n\tposition: fixed;\n\ttop: 0px;\n\tright: 0px;\n\tbottom: 0px;\n\tbackground: #FFF;\n\tz-index: 100;\n\tbox-shadow: 0 1px 5px rgba(0,0,0,.3);\n\twidth: 350px;\n\ttransform: translateX(380px);\n}\n\n/* .mgfe-aside-sm {{{ */\n.mgfe-aside.aside-right.aside-sm {\n\twidth: 40px;\n\ttransform: translateX(50px);\n\ttop: calc(50% - 30px); /* Approx middle of the screen */\n\tbottom: inherit;\n\tborder-radius: 5px;\n}\n\n.mgfe-aside.aside-right.aside-sm .form-group {\n\tmargin: 0;\n}\n\n/* Remove BS padding from sub-elements */\n.mgfe-aside.aside-right.aside-sm .form-group [class*=\"col-\"] {\n\tpadding: 0;\n}\n/* }}} */\n\n/* Headers {{{ */\n.mgfe-aside .aside-header {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: flex-end;\n\tborder-bottom: 1px solid #e9ecef;\n\tmargin: 0;\n}\n\n.mgfe-aside .aside-header h4 {\n\tflex-grow: 1;\n}\n\n.mgfe-aside .aside-header legend.form-control-static {\n\tborder-bottom: none;\n\tfont-size: 17pt;\n}\n\n.mgfe-aside .aside-header .close {\n\tcolor: #5e5e5e;\n}\n\n.mgfe-aside .aside-header .close:hover {\n\tcolor: #000;\n}\n\n.mgfe-aside .aside-header .close::after {\n\tdisplay: inline-block;\n\tfont-family: 'Font Awesome 5 Pro';\n\tfont-weight: 900;\n\tcontent: \"\\f00d\";\n}\n/* }}} */\n\n/* Actions {{{ */\n.mgfe-aside .aside-actions {\n\tjustify-self: flex-end;\n\tmargin-right: 10px;\n}\n\n.mgfe-aside .aside-actions .btn-group {\n\tborder: none;\n\tbox-shadow: none;\n}\n\n.mgfe-aside .aside-actions a {\n\tpadding: 8px;\n\tfont-size: 125%;\n}\n/* }}} */\n\n/* Body {{{ */\n.mgfe-aside .aside-body {\n\tmargin-left: 0;\n\tmargin: 10px 0 0;\n\n\t/* Body scrolling */\n\toverflow: auto;\n\theight: calc(100vh - 80px);\n}\n/* }}} */\n/* }}} */\n\n/* Component highlighting {{{\n\n/* Highlight applied to active elements inside an mgContainer */\n.mg-form-editor-target {\n\tborder: 2px solid var(--blue);\n\tborder-radius: 5px;\n\tposition: relative;\n\ttop: -4px;\n\tleft: -4px;\n\tpadding: 2px;\n}\n\n.mg-form-editor-drop-target {\n}\n\n.mg-form-editor-drop-target-before {\n\tborder-top: 4px dashed var(--blue);\n}\n\n.mg-form-editor-drop-target-after {\n\tborder-bottom: 4px dashed var(--blue);\n}\n/* }}} */\n\n/* Drag + Drop {{{ */\nbody.mg-form-editor-dragging * {\n\tcursor: grabbing;\n}\n\n#mg-form-editor-drag {\n\tdisplay: block;\n\tz-index: 1000;\n\tposition: absolute;\n\ttop: -10000px;\n\tleft: -10000px;\n\tmin-width: 160px;\n\theight: 40px;\n\tborder-radius: 5px;\n\tbackground: #2196F3;\n\tbox-shadow: 1px 1px 4px rgba(0,0,0,.3);\n\tpadding: 10px;\n\tcolor: #FFF;\n}\n\n#mg-form-editor-drag > i {\n\tmargin-right: 5px;\n}\n/* }}} */\n\n/* Misc fixes {{{ */\n/* Buttons that are also fixed with look weird */\n.mg-form-editor .btn.fa-fw {\n\twidth: 2.30em;\n\tpadding: 4px 2px !important;\n}\n/* }}} */\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$n = undefined;
    /* module identifier */
    const __vue_module_identifier__$n = undefined;
    /* functional template */
    const __vue_is_functional_template__$n = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$n = normalizeComponent(
      { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
      __vue_inject_styles__$n,
      __vue_script__$n,
      __vue_scope_id__$n,
      __vue_is_functional_template__$n,
      __vue_module_identifier__$n,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgFormEditor = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$n
  });

  /**
  * The top level MacGyver form
  * @param {string} [form] Unique form name
  * @param {Object|Array} config The MacGyver form object either in long form nested array structure or short form object (which is converted)
  * @param {boolean} [populateDefaults=true] Apply initial defaults to the data when the config is ready, if false you can call vm.assignDefaults() manually if needed
  * @param {boolean} [actionsFallback=true] Use vm.$eval as a runner when no action listener is found
  * @param {Object|function} [actions] Actions subscribers as an object as a lookup list of action definition string keys and their firable function. Subscriber functions are called with the context as `(...params)`. If the value is a function it is called as the raw contents of the action.
  * @param {Object} [data] The data binding
  *
  * @emits change Emitted as `(data)` whenever any data changes
  * @emits changeItem Emitted as `({path, value})` when any single item changes
  * @emits onAction Emitted as `({action, params})` when any action is fired
  * @emits mgComponent.click Emitted as `(component, event)` on native clicks of a component
  * @emits mgComponent.mouseDown Emitted as `(component, event)` on the native mouseDown event of a component
  * @emits mgComponent.mouseUp Emitted as `(component, event)` on the native mouseUp event of a component
  * @emits mgComponent.mouseMove Emitted as `(component, event)` on the native mouseMove event of a component
  * @emits mgComponent.mouseEnter Emitted as `(component, event)` on the native mouseEnter event of a component
  * @emits mgComponent.mouseLeave Emitted as `(component, event)` on the native mouseLeave event of a component
  * @emits mgComponent.mouseOver Emitted as `(component, event)` on the native mouseOver event of a component
  * @emits mgComponent.mouseOut Emitted as `(component, event)` on the native mouseOut event of a component
  * @emits mgContainer.click Emitted as `(container, specPath, event)` on the native click event of a component within a container
  * @emits mgContainer.mouseEnter Emitted as `(container, specPath, event)` on the native mouseEnter event of a component within a container
  * @emits mgContainer.mouseLeave Emitted as `(container, specPath, event)` on the native mouseLeave event of a component within a container
  */
  var script$n = Vue.component('mgForm', {
    provide: function provide() {
      return {
        $mgForm: this
      };
    },
    data: function data() {
      return {
        id: undefined,
        // Set on create
        editing: false,
        // Set by mgFormEditor when its this components parent
        errors: [],
        // array <Object> {error}
        spec: undefined,
        // Calculated version of config after its been though $macgyver.compileSpec()
        formData: {},
        // Calculated version of $props.data after default population
        inRefresh: false // Whether we are doing a refresh from the top-down, prevents recursive refreshing

      };
    },
    props: {
      form: String,
      // Optional overriding form ID
      config: [Object, Array],
      // Can be a single object, array of objects or shorthand style
      data: Object,
      populateDefaults: {
        type: Boolean,
        "default": true
      },
      onAction: Function,
      actionsFallback: {
        type: Boolean,
        "default": true
      },
      actions: {
        // Object of functions e.g. `{customFunc: ()=> {}}`
        type: [Function, Object],
        validator: function validator(v) {
          return _.isFunction(v) || _.every(function (v) {
            return _.isFunction(v);
          });
        }
      }
    },
    created: function created() {
      this.id = this.id || this.$props.form || this.$macgyver.nextId();
    },
    mounted: function mounted() {
      var _this = this;

      this.$watch('$props.config', function () {
        // console.log('mgForm config clobber', this.id, JSON.parse(JSON.stringify(this.$props.config)));
        _this.rebuild();
      }, {
        immediate: true,
        deep: true
      });
      this.$watch('$props.data', function () {
        // console.log('mgForm data clobber', this.id, JSON.parse(JSON.stringify(this.$props.config)));
        _this.rebuildData();
      }, {
        immediate: true,
        deep: true
      });
      this.$on('mgChange', function (data) {
        if (_this.inRefresh) return;

        _this.$macgyver.utils.setPath(_this.formData, data.path, data.value);

        _this.$emit('changeItem', data);

        _this.$emit('change', _objectSpread2({}, _this.formData)); // Has to be a shallow clone so we break the reference and Vue updates


        _this.refreshShowIfs();
      });
      this.$on('mgErrors', function (errors) {
        return _this.errors = errors;
      }); // this.$on('mgForm.rebuild', ()=> this.rebuild()); // FIXME: Needed after new mgForm config clobber detection?
    },
    methods: {
      /**
      * Force the form to rebuild its config
      */
      rebuild: function rebuild() {
        this.id = this.id || this.$props.form || this.$macgyver.nextId(); // console.log(`Rebuild form config for form "${this.id}"`);

        this.spec = this.$macgyver.compileSpec(this.$props.config);
        if (!this.spec || !this.spec.spec) throw new Error('Invalid Macgyver form spec');
      },

      /**
      * Force the form to rebuild its data set
      */
      rebuildData: function rebuildData() {
        var _this2 = this;

        if (this.inRefresh) return;
        this.inRefresh = true;
        this.formData = this.$props.data ? _.cloneDeep(this.$props.data) : {};
        if (this.$props.populateDefaults) this.assignDefaults();
        this.refreshShowIfs();
        this.$emit.down('mgRefreshForm');
        this.$nextTick(function () {
          return (// Wait one tick for all attempts to recall this function recursively to exhaust
            _this2.inRefresh = false
          );
        });
      },

      /**
      * Force recomputation of show via showIf values
      */
      refreshShowIfs: function refreshShowIfs() {
        var _this3 = this;

        if (!this.spec) return;
        this.spec.showIfs.forEach(function (widget) {
          return widget.show = _this3.$macgyver.utils.evalMatch(widget.showIf, _this3.formData);
        });
      },

      /**
      * Assign initial defaults if a value is not in the data object
      */
      assignDefaults: function assignDefaults() {
        if (!this.spec) return;

        _.defaultsDeep(this.formData, this.getPrototype());

        this.$emit('change', this.formData);
      },

      /**
      * Compute the data prototype of the form
      * This is an empty object with all the defaults populated
      * @returns {Object} A prototype data object with all defaults populated
      * @see $macgyver.forms.getPrototype()
      */
      getPrototype: function getPrototype() {
        if (!this.id) return {}; // Form not yet ready

        return this.$macgyver.forms.getPrototype(this.spec.spec);
      },

      /**
      * Execute a function within a form
      * The default behaviour of this function is documented within the function
      * @param {string|function} action The action(s) to execute
      * @param {*} [context] The context of the action, defaults to the form component
      * @param {*} [params...] Additional parameters to execute
      * @emits mgRun Event fired at the form level only with a single object of the form `{action, params}`. Use the form property handleActions to specify if the form should handle or trap the event to override
      */
      run: function run(action, context) {
        var _this$$props$onAction, _this$$macgyver$$eval;

        // 0. See if what we've been passed is already a function {{{
        if (typeof action == 'function') {
          return action.call(context !== null && context !== void 0 ? context : this);
        } // }}}
        // 1. Emit mgRun to parents and see if they want to handle it {{{


        var handled = false;

        for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          params[_key - 2] = arguments[_key];
        }

        this.$emit.up.call(context !== null && context !== void 0 ? context : this, 'mgRun', {
          action: action,
          params: params
        }, function (isHandled) {
          if (isHandled) handled = true;
        });
        if (handled) return; // }}}
        // 2. Use FORM.$props.onAction(action) and see if returns truthy {{{

        if (this.$props.onAction && (_this$$props$onAction = this.$props.onAction).call.apply(_this$$props$onAction, [context !== null && context !== void 0 ? context : this, action].concat(params))) return; // }}}
        // 3a. Does FORM.$props.actions exist and is a function which will handle everything? {{{

        if (this.$props.actions && _.isFunction(this.$props.actions)) {
          this.$props.actions.call(context !== null && context !== void 0 ? context : this, action);
          return;
        } // }}}
        // 3b. Does FORM.$props.actions[action] exist and if so whether it returns truthy {{{


        var _ref = /^([a-z0-9\_]*?)(\(.*\))?$/i.exec(action) || [],
            _ref2 = _slicedToArray(_ref, 3),
            junk = _ref2[0],
            actionReadable = _ref2[1],
            actionArgs = _ref2[2];

        if (actionReadable && this.$props.actions && this.$props.actions[actionReadable]) {
          // Collapse strings to functions
          var func = _.isString(this.$props.actions[actionReadable]) ? this[actionReadable] : this.$props.actions[actionReadable]; // Tidy up actionArgs

          actionArgs = (actionArgs || '').replace(/^\(/, '') // Remove preceeding '('
          .replace(/\)$/, '') // Remove succeeding ')'
          .split(',').map(function (i) {
            return i && JSON.parse(i.replace(/'/g, '"'));
          });
          if (func.call.apply(func, [context !== null && context !== void 0 ? context : this].concat(_toConsumableArray(actionArgs), params))) return;
        } // }}}
        // 4. If all else failed and FORM.$props.actionsFallback is true - handle it via vm.$eval {{{


        (_this$$macgyver$$eval = this.$macgyver.$eval).call.apply(_this$$macgyver$$eval, [context !== null && context !== void 0 ? context : this, action].concat(params)); // }}}

      },

      /**
      * Find a VueComponent instance from a specPath
      * @param {string|array} specPath The specPath to search for
      * @param {boolean} [throws=true] Throw an error if the path cannot be found (avoid downstream checking if the specPath is valid)
      * @returns {VueComponent} Either the found VueComponent or `false` if not found
      */
      getComponentBySpecPath: function getComponentBySpecPath(specPath) {
        var _throws = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var found = false;
        this.$emit.down('mgIdentify', function (widget) {
          if (!found && widget.$props.$specPath == specPath) found = widget;
        });
        if (!found && _throws) throw new Error("Cannot edit component by non-existant specPath \"".concat(specPath, "\""));
        return found;
      }
    }
  });

  /* script */
  const __vue_script__$o = script$n;

  /* template */
  var __vue_render__$h = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "form",
      {
        staticClass: "form-horizontal mg-form",
        on: {
          submit: function($event) {
            $event.preventDefault();
            return _vm.submit()
          }
        }
      },
      [
        _vm.errors.length
          ? _c("div", { staticClass: "alert alert-warning" }, [
              _c(
                "ul",
                _vm._l(_vm.errors, function(err) {
                  return _c("li", [_vm._v(_vm._s(err.error))])
                }),
                0
              )
            ])
          : _vm._e(),
        _vm._v(" "),
        _vm.spec
          ? _c("mg-component", { attrs: { config: _vm.spec.spec } })
          : _vm._e()
      ],
      1
    )
  };
  var __vue_staticRenderFns__$h = [];
  __vue_render__$h._withStripped = true;

    /* style */
    const __vue_inject_styles__$o = function (inject) {
      if (!inject) return
      inject("data-v-f36a6a62_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Add missing Bootstrap color variables */\n.mg-form {\n\t--btn-default-bg: #e9ecef;\n\t--btn-default-fg: #495057;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA,0CAAA;AACA;CACA,yBAAA;CACA,yBAAA;AACA","file":"mgForm.vue","sourcesContent":["<script>\n/**\n* The top level MacGyver form\n* @param {string} [form] Unique form name\n* @param {Object|Array} config The MacGyver form object either in long form nested array structure or short form object (which is converted)\n* @param {boolean} [populateDefaults=true] Apply initial defaults to the data when the config is ready, if false you can call vm.assignDefaults() manually if needed\n* @param {boolean} [actionsFallback=true] Use vm.$eval as a runner when no action listener is found\n* @param {Object|function} [actions] Actions subscribers as an object as a lookup list of action definition string keys and their firable function. Subscriber functions are called with the context as `(...params)`. If the value is a function it is called as the raw contents of the action.\n* @param {Object} [data] The data binding\n*\n* @emits change Emitted as `(data)` whenever any data changes\n* @emits changeItem Emitted as `({path, value})` when any single item changes\n* @emits onAction Emitted as `({action, params})` when any action is fired\n* @emits mgComponent.click Emitted as `(component, event)` on native clicks of a component\n* @emits mgComponent.mouseDown Emitted as `(component, event)` on the native mouseDown event of a component\n* @emits mgComponent.mouseUp Emitted as `(component, event)` on the native mouseUp event of a component\n* @emits mgComponent.mouseMove Emitted as `(component, event)` on the native mouseMove event of a component\n* @emits mgComponent.mouseEnter Emitted as `(component, event)` on the native mouseEnter event of a component\n* @emits mgComponent.mouseLeave Emitted as `(component, event)` on the native mouseLeave event of a component\n* @emits mgComponent.mouseOver Emitted as `(component, event)` on the native mouseOver event of a component\n* @emits mgComponent.mouseOut Emitted as `(component, event)` on the native mouseOut event of a component\n* @emits mgContainer.click Emitted as `(container, specPath, event)` on the native click event of a component within a container\n* @emits mgContainer.mouseEnter Emitted as `(container, specPath, event)` on the native mouseEnter event of a component within a container\n* @emits mgContainer.mouseLeave Emitted as `(container, specPath, event)` on the native mouseLeave event of a component within a container\n*/\nexport default Vue.component('mgForm', {\n\tprovide() { return {\n\t\t$mgForm: this,\n\t}},\n\tdata() { return {\n\t\tid: undefined, // Set on create\n\t\tediting: false, // Set by mgFormEditor when its this components parent\n\t\terrors: [], // array <Object> {error}\n\t\tspec: undefined, // Calculated version of config after its been though $macgyver.compileSpec()\n\t\tformData: {}, // Calculated version of $props.data after default population\n\t\tinRefresh: false, // Whether we are doing a refresh from the top-down, prevents recursive refreshing\n\t}},\n\tprops: {\n\t\tform: String, // Optional overriding form ID\n\t\tconfig: [Object, Array], // Can be a single object, array of objects or shorthand style\n\t\tdata: Object,\n\n\t\tpopulateDefaults: {type: Boolean, default: true},\n\t\tonAction: Function,\n\t\tactionsFallback: {type: Boolean, default: true},\n\t\tactions: { // Object of functions e.g. `{customFunc: ()=> {}}`\n\t\t\ttype: [Function, Object],\n\t\t\tvalidator: v => _.isFunction(v) || _.every(v => _.isFunction(v)),\n\t\t},\n\t},\n\tcreated() {\n\t\tthis.id = this.id || this.$props.form || this.$macgyver.nextId();\n\t},\n\tmounted() {\n\t\tthis.$watch('$props.config', ()=> {\n\t\t\t// console.log('mgForm config clobber', this.id, JSON.parse(JSON.stringify(this.$props.config)));\n\t\t\tthis.rebuild();\n\t\t}, {immediate: true, deep: true});\n\n\t\tthis.$watch('$props.data', ()=> {\n\t\t\t// console.log('mgForm data clobber', this.id, JSON.parse(JSON.stringify(this.$props.config)));\n\t\t\tthis.rebuildData();\n\t\t}, {immediate: true, deep: true});\n\n\t\tthis.$on('mgChange', data => {\n\t\t\tif (this.inRefresh) return;\n\t\t\tthis.$macgyver.utils.setPath(this.formData, data.path, data.value);\n\t\t\tthis.$emit('changeItem', data);\n\n\t\t\tthis.$emit('change', {...this.formData}); // Has to be a shallow clone so we break the reference and Vue updates\n\t\t\tthis.refreshShowIfs();\n\t\t});\n\n\t\tthis.$on('mgErrors', errors => this.errors = errors);\n\t\t// this.$on('mgForm.rebuild', ()=> this.rebuild()); // FIXME: Needed after new mgForm config clobber detection?\n\t},\n\tmethods: {\n\t\t/**\n\t\t* Force the form to rebuild its config\n\t\t*/\n\t\trebuild() {\n\t\t\tthis.id = this.id || this.$props.form || this.$macgyver.nextId();\n\t\t\t// console.log(`Rebuild form config for form \"${this.id}\"`);\n\n\t\t\tthis.spec = this.$macgyver.compileSpec(this.$props.config);\n\t\t\tif (!this.spec || !this.spec.spec) throw new Error('Invalid Macgyver form spec');\n\t\t},\n\n\n\t\t/**\n\t\t* Force the form to rebuild its data set\n\t\t*/\n\t\trebuildData() {\n\t\t\tif (this.inRefresh) return;\n\t\t\tthis.inRefresh = true;\n\n\t\t\tthis.formData = this.$props.data ? _.cloneDeep(this.$props.data) : {};\n\n\t\t\tif (this.$props.populateDefaults) this.assignDefaults();\n\t\t\tthis.refreshShowIfs();\n\t\t\tthis.$emit.down('mgRefreshForm');\n\t\t\tthis.$nextTick(()=> // Wait one tick for all attempts to recall this function recursively to exhaust\n\t\t\t\tthis.inRefresh = false\n\t\t\t);\n\t\t},\n\n\n\t\t/**\n\t\t* Force recomputation of show via showIf values\n\t\t*/\n\t\trefreshShowIfs() {\n\t\t\tif (!this.spec) return;\n\t\t\tthis.spec.showIfs.forEach(widget =>\n\t\t\t\twidget.show = this.$macgyver.utils.evalMatch(widget.showIf, this.formData)\n\t\t\t);\n\t\t},\n\n\n\t\t/**\n\t\t* Assign initial defaults if a value is not in the data object\n\t\t*/\n\t\tassignDefaults() {\n\t\t\tif (!this.spec) return;\n\t\t\t_.defaultsDeep(this.formData, this.getPrototype());\n\t\t\tthis.$emit('change', this.formData);\n\t\t},\n\n\n\t\t/**\n\t\t* Compute the data prototype of the form\n\t\t* This is an empty object with all the defaults populated\n\t\t* @returns {Object} A prototype data object with all defaults populated\n\t\t* @see $macgyver.forms.getPrototype()\n\t\t*/\n\t\tgetPrototype() {\n\t\t\tif (!this.id) return {}; // Form not yet ready\n\t\t\treturn this.$macgyver.forms.getPrototype(this.spec.spec);\n\t\t},\n\n\n\t\t/**\n\t\t* Execute a function within a form\n\t\t* The default behaviour of this function is documented within the function\n\t\t* @param {string|function} action The action(s) to execute\n\t\t* @param {*} [context] The context of the action, defaults to the form component\n\t\t* @param {*} [params...] Additional parameters to execute\n\t\t* @emits mgRun Event fired at the form level only with a single object of the form `{action, params}`. Use the form property handleActions to specify if the form should handle or trap the event to override\n\t\t*/\n\t\trun(action, context, ...params) {\n\t\t\t// 0. See if what we've been passed is already a function {{{\n\t\t\tif (typeof action == 'function') {\n\t\t\t\treturn action.call(context ?? this);\n\t\t\t}\n\t\t\t// }}}\n\n\t\t\t// 1. Emit mgRun to parents and see if they want to handle it {{{\n\t\t\tvar handled = false;\n\t\t\tthis.$emit.up.call(context ?? this, 'mgRun', {action, params}, isHandled => {\n\t\t\t\tif (isHandled) handled = true;\n\t\t\t});\n\t\t\tif (handled) return;\n\t\t\t// }}}\n\n\t\t\t// 2. Use FORM.$props.onAction(action) and see if returns truthy {{{\n\t\t\tif (this.$props.onAction && this.$props.onAction.call(context ?? this, action, ...params)) return;\n\t\t\t// }}}\n\n\t\t\t// 3a. Does FORM.$props.actions exist and is a function which will handle everything? {{{\n\t\t\tif (this.$props.actions && _.isFunction(this.$props.actions)) {\n\t\t\t\tthis.$props.actions.call(context ?? this, action);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// }}}\n\n\t\t\t// 3b. Does FORM.$props.actions[action] exist and if so whether it returns truthy {{{\n\t\t\tvar [junk, actionReadable, actionArgs] = /^([a-z0-9\\_]*?)(\\(.*\\))?$/i.exec(action) || [];\n\t\t\tif (actionReadable && this.$props.actions && this.$props.actions[actionReadable]) {\n\t\t\t\t// Collapse strings to functions\n\t\t\t\tvar func = _.isString(this.$props.actions[actionReadable]) ? this[actionReadable]\n\t\t\t\t\t: this.$props.actions[actionReadable];\n\n\t\t\t\t// Tidy up actionArgs\n\t\t\t\tactionArgs = (actionArgs || '')\n\t\t\t\t\t.replace(/^\\(/, '') // Remove preceeding '('\n\t\t\t\t\t.replace(/\\)$/, '') // Remove succeeding ')'\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map(i => i && JSON.parse(i.replace(/'/g, '\"')));\n\n\t\t\t\tif (func.call(context ?? this, ...actionArgs, ...params)) return;\n\t\t\t}\n\t\t\t// }}}\n\n\t\t\t// 4. If all else failed and FORM.$props.actionsFallback is true - handle it via vm.$eval {{{\n\t\t\tthis.$macgyver.$eval.call(context ?? this, action, ...params);\n\t\t\t// }}}\n\t\t},\n\n\n\t\t/**\n\t\t* Find a VueComponent instance from a specPath\n\t\t* @param {string|array} specPath The specPath to search for\n\t\t* @param {boolean} [throws=true] Throw an error if the path cannot be found (avoid downstream checking if the specPath is valid)\n\t\t* @returns {VueComponent} Either the found VueComponent or `false` if not found\n\t\t*/\n\t\tgetComponentBySpecPath(specPath, throws = true) {\n\t\t\tvar found = false;\n\t\t\tthis.$emit.down('mgIdentify', widget => {\n\t\t\t\tif (!found && widget.$props.$specPath == specPath)\n\t\t\t\t\tfound = widget;\n\t\t\t});\n\t\t\tif (!found && throws) throw new Error(`Cannot edit component by non-existant specPath \"${specPath}\"`);\n\t\t\treturn found;\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<form @submit.prevent=\"submit()\" class=\"form-horizontal mg-form\">\n\t\t<div v-if=\"errors.length\" class=\"alert alert-warning\">\n\t\t\t<ul>\n\t\t\t\t<li v-for=\"err in errors\">{{err.error}}</li>\n\t\t\t</ul>\n\t\t</div>\n\n\t\t<mg-component\n\t\t\tv-if=\"spec\"\n\t\t\t:config=\"spec.spec\"\n\t\t/>\n\t</form>\n</template>\n\n<style>\n/* Add missing Bootstrap color variables */\n.mg-form {\n\t--btn-default-bg: #e9ecef;\n\t--btn-default-fg: #495057;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$o = undefined;
    /* module identifier */
    const __vue_module_identifier__$o = undefined;
    /* functional template */
    const __vue_is_functional_template__$o = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$o = normalizeComponent(
      { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
      __vue_inject_styles__$o,
      __vue_script__$o,
      __vue_scope_id__$o,
      __vue_is_functional_template__$o,
      __vue_module_identifier__$o,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgForm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$o
  });

  var script$o = Vue.mgComponent('mgGrid', {
    meta: {
      title: 'Grid layout',
      icon: 'far fa-grip-horizontal',
      category: 'Layout'
    },
    props: {
      items: {
        type: 'mgUnknown',
        "default": []
      }
    }
  });

  /* script */
  const __vue_script__$p = script$o;

  /* template */
  var __vue_render__$i = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "table",
      { staticClass: "table table-striped table-bordered" },
      _vm._l(_vm.$props.items, function(row) {
        return _c(
          "tr",
          _vm._l(row.items, function(cell) {
            return _c(
              "td",
              [
                _c("mg-component", {
                  attrs: { form: _vm.$props.form, config: cell }
                })
              ],
              1
            )
          }),
          0
        )
      }),
      0
    )
  };
  var __vue_staticRenderFns__$i = [];
  __vue_render__$i._withStripped = true;

    /* style */
    const __vue_inject_styles__$p = undefined;
    /* scoped */
    const __vue_scope_id__$p = undefined;
    /* module identifier */
    const __vue_module_identifier__$p = undefined;
    /* functional template */
    const __vue_is_functional_template__$p = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$p = normalizeComponent(
      { render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i },
      __vue_inject_styles__$p,
      __vue_script__$p,
      __vue_scope_id__$p,
      __vue_is_functional_template__$p,
      __vue_module_identifier__$p,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgGrid = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$p
  });

  var script$p = Vue.mgComponent('mgHeading', {
    meta: {
      title: 'Heading',
      icon: 'far fa-heading',
      category: 'General Decoration'
    },
    props: {
      text: {
        type: 'mgText'
      }
    }
  });

  /* script */
  const __vue_script__$q = script$p;

  /* template */
  var __vue_render__$j = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("legend", { staticClass: "form-control-static" }, [
      _vm._v("\n\t" + _vm._s(_vm.data || _vm.$props.text) + "\n")
    ])
  };
  var __vue_staticRenderFns__$j = [];
  __vue_render__$j._withStripped = true;

    /* style */
    const __vue_inject_styles__$q = undefined;
    /* scoped */
    const __vue_scope_id__$q = undefined;
    /* module identifier */
    const __vue_module_identifier__$q = undefined;
    /* functional template */
    const __vue_is_functional_template__$q = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$q = normalizeComponent(
      { render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j },
      __vue_inject_styles__$q,
      __vue_script__$q,
      __vue_scope_id__$q,
      __vue_is_functional_template__$q,
      __vue_module_identifier__$q,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgHeading = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$q
  });

  var script$q = Vue.mgComponent('mgHtml', {
    meta: {
      title: 'Static HTML',
      icon: 'fab fa-html5',
      category: 'General Decoration'
    },
    inject: {
      $mgForm: {
        from: '$mgForm'
      },
      $mgFormEditor: {
        from: '$mgFormEditor',
        "default": false
      }
    },
    props: {
      text: {
        type: 'mgCode',
        syntax: 'html'
      }
    }
  });

  /* script */
  const __vue_script__$r = script$q;

  /* template */
  var __vue_render__$k = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        !_vm.$mgFormEditor
          ? _c("div", {
              staticClass: "form-control-static",
              domProps: { innerHTML: _vm._s(_vm.data || _vm.$props.text) }
            })
          : _c("mg-wysiwyg", {
              attrs: {
                value: _vm.data === undefined ? _vm.$props.text : _vm.data
              },
              on: {
                change: function($event) {
                  _vm.data = $event;
                }
              }
            })
      ],
      1
    )
  };
  var __vue_staticRenderFns__$k = [];
  __vue_render__$k._withStripped = true;

    /* style */
    const __vue_inject_styles__$r = undefined;
    /* scoped */
    const __vue_scope_id__$r = undefined;
    /* module identifier */
    const __vue_module_identifier__$r = undefined;
    /* functional template */
    const __vue_is_functional_template__$r = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$r = normalizeComponent(
      { render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k },
      __vue_inject_styles__$r,
      __vue_script__$r,
      __vue_scope_id__$r,
      __vue_is_functional_template__$r,
      __vue_module_identifier__$r,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgHtml = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$r
  });

  var script$r = Vue.mgComponent('mgIcon', {
    meta: {
      title: 'Icon',
      icon: 'far fa-flag',
      category: 'Simple Inputs',
      preferId: true
    },
    props: {
      iconFallback: {
        type: 'mgIcon',
        "default": 'far fa-info',
        help: 'The icon to use if non is selected'
      },
      required: {
        type: 'mgToggle',
        "default": false
      },
      "interface": {
        type: 'mgChoiceButtons',
        "default": 'modal',
        "enum": ['modal', 'dropdown']
      },
      iconFeed: {
        type: 'mgText',
        "default": '/api/webfonts/fa.json',
        advanced: true,
        help: 'The data source to import icon information',
        relative: true
      },
      className: {
        type: 'mgText',
        "default": 'btn btn-light btn-circle',
        advanced: true
      },
      classActive: {
        type: 'mgText',
        advanced: true
      },
      classInactive: {
        type: 'mgText',
        advanced: true
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      selectIcon: function selectIcon() {
        var _this2 = this;

        Promise.resolve().then(function () {
          return _this2.$macgyver.notify.loading(_this2._uid, true);
        }).then(function () {
          return _this2.$http.get(_this2.$props.iconFeed);
        }).then(function (res) {
          _this2.$macgyver.notify.loading(_this2._uid, false);

          return res;
        }).then(function (res) {
          return _this2.$macgyver.$prompt.macgyver({
            title: 'Select icon',
            buttons: [],
            // We're capturing the first click so we don't need confirm buttons
            macgyver: [{
              id: 'className',
              type: 'mgChoiceButtons',
              showTitle: false,
              classWrapper: '',
              "enum": res.data.map(function (icon) {
                return {
                  id: icon["class"],
                  "class": "btn btn-icon-fixed ".concat(icon["class"], " fa-fw"),
                  classActive: "btn btn-primary btn-icon-fixed ".concat(icon["class"], " fa-fw")
                };
              })
            }],
            onShow: function onShow() {
              // Bind to the mg-form element, detect the first change and close the dialog
              _this2.$macgyver.$prompt.settings.macgyverForm.$on('mgChange', function () {
                return setTimeout(function () {
                  // Timeout not really needed but it lets the button highlight before we close
                  _this2.$macgyver.$prompt.close(true, _this2.$macgyver.$prompt.settings.value);
                }, 100);
              });
            }
          });
        }).then(function (form) {
          return _this2.data = form.className;
        });
      }
    }
  });

  /* script */
  const __vue_script__$s = script$r;

  /* template */
  var __vue_render__$l = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-icon" },
      [
        _vm.$props.interface == "modal"
          ? _c("a", {
              staticClass: "btn btn-light btn-icon-fixed",
              class: _vm.data
                ? [_vm.data, _vm.$props.classActive || _vm.$props.className]
                : [
                    _vm.$props.iconFallback,
                    _vm.$props.classInactive || _vm.$props.className
                  ],
              on: {
                click: function($event) {
                  return _vm.selectIcon()
                }
              }
            })
          : _vm.$props.interface == "dropdown"
          ? _c("mg-choice-dropdown", {
              attrs: {
                "enum-source": "url",
                "enum-url": {
                  url: _vm.$props.iconFeed,
                  type: "array",
                  mappings: {
                    id: { required: true, from: "class" },
                    title: { required: true, from: "id" },
                    icon: { required: true, from: "class" }
                  }
                },
                default: _vm.$props.default,
                required: _vm.$props.required,
                value: _vm.data
              },
              on: {
                change: function($event) {
                  _vm.data = $event;
                }
              }
            })
          : _c("mg-error", {
              attrs: { "error-text": "Unknown mgIcon interface" }
            })
      ],
      1
    )
  };
  var __vue_staticRenderFns__$l = [];
  __vue_render__$l._withStripped = true;

    /* style */
    const __vue_inject_styles__$s = function (inject) {
      if (!inject) return
      inject("data-v-3817fda0_0", { source: "\n.btn.btn-icon-fixed {\n\tbox-shadow: none;\n\twidth: 32px;\n\theight: 32px;\n\tpadding: 7px 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgIcon.vue"],"names":[],"mappings":";AA0FA;CACA,gBAAA;CACA,WAAA;CACA,YAAA;CACA,cAAA;CACA,aAAA;CACA,uBAAA;CACA,mBAAA;AACA","file":"mgIcon.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgIcon', {\n\tmeta: {\n\t\ttitle: 'Icon',\n\t\ticon: 'far fa-flag',\n\t\tcategory: 'Simple Inputs',\n\t\tpreferId: true,\n\t},\n\tprops: {\n\t\ticonFallback: {type: 'mgIcon', default: 'far fa-info', help: 'The icon to use if non is selected'},\n\t\trequired: {type: 'mgToggle', default: false},\n\t\tinterface: {type: 'mgChoiceButtons', default: 'modal', enum: ['modal', 'dropdown']},\n\t\ticonFeed: {type: 'mgText', default: '/api/webfonts/fa.json', advanced: true, help: 'The data source to import icon information', relative: true},\n\t\tclassName: {type: 'mgText', default: 'btn btn-light btn-circle', advanced: true},\n\t\tclassActive: {type: 'mgText', advanced: true},\n\t\tclassInactive: {type: 'mgText', advanced: true},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t});\n\t},\n\tmethods: {\n\t\tselectIcon() {\n\t\t\tPromise.resolve()\n\t\t\t\t.then(()=> this.$macgyver.notify.loading(this._uid, true))\n\t\t\t\t.then(()=> this.$http.get(this.$props.iconFeed))\n\t\t\t\t.then(res => { this.$macgyver.notify.loading(this._uid, false); return res })\n\t\t\t\t.then(res => this.$macgyver.$prompt.macgyver({\n\t\t\t\t\ttitle: 'Select icon',\n\t\t\t\t\tbuttons: [], // We're capturing the first click so we don't need confirm buttons\n\t\t\t\t\tmacgyver: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'className',\n\t\t\t\t\t\t\ttype: 'mgChoiceButtons',\n\t\t\t\t\t\t\tshowTitle: false,\n\t\t\t\t\t\t\tclassWrapper: '',\n\t\t\t\t\t\t\tenum: res.data.map(icon => ({\n\t\t\t\t\t\t\t\tid: icon.class,\n\t\t\t\t\t\t\t\tclass: `btn btn-icon-fixed ${icon.class} fa-fw`,\n\t\t\t\t\t\t\t\tclassActive: `btn btn-primary btn-icon-fixed ${icon.class} fa-fw`,\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tonShow: ()=> {\n\t\t\t\t\t\t// Bind to the mg-form element, detect the first change and close the dialog\n\t\t\t\t\t\tthis.$macgyver.$prompt.settings.macgyverForm.$on('mgChange', ()=> setTimeout(()=> { // Timeout not really needed but it lets the button highlight before we close\n\t\t\t\t\t\t\tthis.$macgyver.$prompt.close(true, this.$macgyver.$prompt.settings.value);\n\t\t\t\t\t\t}, 100));\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t.then(form => this.data = form.className)\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-icon\">\n\t\t<a\n\t\t\tv-if=\"$props.interface == 'modal'\"\n\t\t\t@click=\"selectIcon()\"\n\t\t\tclass=\"btn btn-light btn-icon-fixed\"\n\t\t\t:class=\"data ? [data, $props.classActive || $props.className] : [$props.iconFallback, $props.classInactive || $props.className]\"\n\t\t/>\n\t\t<mg-choice-dropdown\n\t\t\tv-else-if=\"$props.interface == 'dropdown'\"\n\t\t\tenum-source=\"url\"\n\t\t\t:enum-url=\"{\n\t\t\t\turl: $props.iconFeed,\n\t\t\t\ttype: 'array',\n\t\t\t\tmappings: {\n\t\t\t\t\tid: {required: true, from: 'class'},\n\t\t\t\t\ttitle: {required: true, from: 'id'},\n\t\t\t\t\ticon: {required: true, from: 'class'},\n\t\t\t\t},\n\t\t\t}\"\n\t\t\t:default=\"$props.default\"\n\t\t\t:required=\"$props.required\"\n\t\t\t:value=\"data\"\n\t\t\t@change=\"data = $event\"\n\t\t/>\n\t\t<mg-error\n\t\t\tv-else\n\t\t\terror-text=\"Unknown mgIcon interface\"\n\t\t/>\n\t</div>\n</template>\n\n<style>\n.btn.btn-icon-fixed {\n\tbox-shadow: none;\n\twidth: 32px;\n\theight: 32px;\n\tpadding: 7px 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$s = undefined;
    /* module identifier */
    const __vue_module_identifier__$s = undefined;
    /* functional template */
    const __vue_is_functional_template__$s = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$s = normalizeComponent(
      { render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l },
      __vue_inject_styles__$s,
      __vue_script__$s,
      __vue_scope_id__$s,
      __vue_is_functional_template__$s,
      __vue_module_identifier__$s,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgIcon = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$s
  });

  var script$s = Vue.mgComponent('mgInfoBlock', {
    meta: {
      title: 'Info Block',
      icon: 'far fa-info-square',
      category: 'Data display',
      format: false
    },
    data: function data() {
      return {
        isLoading: false
      };
    },
    props: {
      text: {
        type: 'mgText',
        help: 'Text to display, if a URL is also specified this is overridden when the result loads',
        "default": ''
      },
      url: {
        type: 'mgUrl',
        relative: true,
        "default": '/api/datafeeds/random/number?$extract=number'
      },
      coloring: {
        type: 'mgChoiceDropdown',
        "default": 'bg-primary',
        "enum": [{
          id: 'bg-primary text-white',
          text: 'Primary'
        }, {
          id: 'bg-secondary',
          text: 'Secondary'
        }, {
          id: 'bg-success text-white',
          text: 'Success'
        }, {
          id: 'bg-danger text-white',
          text: 'Danger'
        }, {
          id: 'bg-warning text-white',
          text: 'Warning'
        }, {
          id: 'bg-info text-white',
          text: 'Info'
        }, {
          id: 'bg-light',
          text: 'Light'
        }, {
          id: 'bg-dark text-white',
          text: 'Dark'
        }, {
          id: 'bg-muted',
          text: 'Muted'
        }]
      },
      icon: {
        type: 'mgIcon',
        "default": 'far fa-info-circle'
      },
      iconLoading: {
        type: 'mgIcon',
        "default": 'far fa-spinner fa-spin',
        advanced: true
      },
      iconSize: {
        type: 'mgChoiceButtons',
        "default": 'fa-4x',
        advanced: true,
        "enum": [{
          id: '',
          text: 'Normal'
        }, {
          id: 'fa-2x',
          text: '2x'
        }, {
          id: 'fa-3x',
          text: '3x'
        }, {
          id: 'fa-4x',
          text: '4x'
        }, {
          id: 'fa-5x',
          text: '5x'
        }, {
          id: 'fa-6x',
          text: '6x'
        }, {
          id: 'fa-7x',
          text: '7x'
        }, {
          id: 'fa-8x',
          text: '8x'
        }]
      }
    },
    created: function created() {
      var _this = this;

      this.$watch('$props.url', function () {
        if (!_this.$props.url) return;
        Promise.resolve().then(function () {
          return _this.isLoading = true;
        }).then(function () {
          return _this.$macgyver.utils.fetch(_this.$props.url, {
            type: 'object',
            mappings: {
              extract: {
                required: true
              }
            },
            format: function format(d) {
              return d.extract;
            }
          });
        }).then(function (data) {
          return _this.$set(_this, 'data', data);
        }).then(function () {
          return _this.isLoading = false;
        });
      }, {
        immediate: true
      });
    }
  });

  /* script */
  const __vue_script__$t = script$s;

  /* template */
  var __vue_render__$m = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "card mg-info-block", class: _vm.$props.coloring },
      [
        _c("div", { staticClass: "card-body media" }, [
          _c("div", { staticClass: "mr-3" }, [
            _c("i", {
              class: [
                _vm.isLoading ? _vm.$props.iconLoading : _vm.$props.icon,
                _vm.$props.iconSize
              ]
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "media-body" }, [
            _c("div", { staticClass: "mg-info-block-text" }, [
              _vm._v(_vm._s(_vm.data || _vm.$props.text))
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "mg-info-block-title" }, [
              _vm._v(_vm._s(_vm.$props.title))
            ])
          ])
        ])
      ]
    )
  };
  var __vue_staticRenderFns__$m = [];
  __vue_render__$m._withStripped = true;

    /* style */
    const __vue_inject_styles__$t = function (inject) {
      if (!inject) return
      inject("data-v-31c83535_0", { source: "\n.mg-info-block {\n\tbackground: transparent;\n\tborder-radius: 5px;\n}\n.mg-info-block .mg-info-block-text {\n\tfont-size: 200%;\n\tfont-weight: bold;\n}\n.mg-info-block .mg-info-block-title {\n\tfont-size: 90%;\n\topacity: 0.8;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgInfoBlock.vue"],"names":[],"mappings":";AA+EA;CACA,uBAAA;CACA,kBAAA;AACA;AAEA;CACA,eAAA;CACA,iBAAA;AACA;AAEA;CACA,cAAA;CACA,YAAA;AACA","file":"mgInfoBlock.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgInfoBlock', {\n\tmeta: {\n\t\ttitle: 'Info Block',\n\t\ticon: 'far fa-info-square',\n\t\tcategory: 'Data display',\n\t\tformat: false,\n\t},\n\tdata() { return {\n\t\tisLoading: false,\n\t}},\n\tprops: {\n\t\ttext: {type: 'mgText', help: 'Text to display, if a URL is also specified this is overridden when the result loads', default: ''},\n\t\turl: {type: 'mgUrl', relative: true, default: '/api/datafeeds/random/number?$extract=number'},\n\t\tcoloring: {\n\t\t\ttype: 'mgChoiceDropdown',\n\t\t\tdefault: 'bg-primary',\n\t\t\tenum: [\n\t\t\t\t{id: 'bg-primary text-white', text: 'Primary'},\n\t\t\t\t{id: 'bg-secondary', text: 'Secondary'},\n\t\t\t\t{id: 'bg-success text-white', text: 'Success'},\n\t\t\t\t{id: 'bg-danger text-white', text: 'Danger'},\n\t\t\t\t{id: 'bg-warning text-white', text: 'Warning'},\n\t\t\t\t{id: 'bg-info text-white', text: 'Info'},\n\t\t\t\t{id: 'bg-light', text: 'Light'},\n\t\t\t\t{id: 'bg-dark text-white', text: 'Dark'},\n\t\t\t\t{id: 'bg-muted', text: 'Muted'},\n\t\t\t],\n\t\t},\n\t\ticon: {type: 'mgIcon', default: 'far fa-info-circle'},\n\t\ticonLoading: {type: 'mgIcon', default: 'far fa-spinner fa-spin', advanced: true},\n\t\ticonSize: {\n\t\t\ttype: 'mgChoiceButtons',\n\t\t\tdefault: 'fa-4x',\n\t\t\tadvanced: true,\n\t\t\tenum: [\n\t\t\t\t{id: '', text: 'Normal'},\n\t\t\t\t{id: 'fa-2x', text: '2x'},\n\t\t\t\t{id: 'fa-3x', text: '3x'},\n\t\t\t\t{id: 'fa-4x', text: '4x'},\n\t\t\t\t{id: 'fa-5x', text: '5x'},\n\t\t\t\t{id: 'fa-6x', text: '6x'},\n\t\t\t\t{id: 'fa-7x', text: '7x'},\n\t\t\t\t{id: 'fa-8x', text: '8x'},\n\t\t\t],\n\t\t},\n\t},\n\tcreated() {\n\t\tthis.$watch('$props.url', ()=> {\n\t\t\tif (!this.$props.url) return;\n\t\t\tPromise.resolve()\n\t\t\t\t.then(()=> this.isLoading = true)\n\t\t\t\t.then(()=> this.$macgyver.utils.fetch(this.$props.url, {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tmappings: {extract: {required: true}},\n\t\t\t\t\tformat: d => d.extract,\n\t\t\t\t}))\n\t\t\t\t.then(data => this.$set(this, 'data', data))\n\t\t\t\t.then(()=> this.isLoading = false)\n\t\t}, {immediate: true});\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"card mg-info-block\" :class=\"$props.coloring\">\n\t\t<div class=\"card-body media\">\n\t\t\t<div class=\"mr-3\">\n\t\t\t\t<i :class=\"[isLoading ? $props.iconLoading : $props.icon, $props.iconSize]\"/>\n\t\t\t</div>\n\t\t\t<div class=\"media-body\">\n\t\t\t\t<div class=\"mg-info-block-text\">{{data || $props.text}}</div>\n\t\t\t\t<div class=\"mg-info-block-title\">{{$props.title}}</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<style>\n.mg-info-block {\n\tbackground: transparent;\n\tborder-radius: 5px;\n}\n\n.mg-info-block .mg-info-block-text {\n\tfont-size: 200%;\n\tfont-weight: bold;\n}\n\n.mg-info-block .mg-info-block-title {\n\tfont-size: 90%;\n\topacity: 0.8;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$t = undefined;
    /* module identifier */
    const __vue_module_identifier__$t = undefined;
    /* functional template */
    const __vue_is_functional_template__$t = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$t = normalizeComponent(
      { render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m },
      __vue_inject_styles__$t,
      __vue_script__$t,
      __vue_scope_id__$t,
      __vue_is_functional_template__$t,
      __vue_module_identifier__$t,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgInfoBlock = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$t
  });

  var script$t = Vue.mgComponent('mgLabel', {
    meta: {
      title: 'Read-only label',
      icon: 'far fa-font',
      category: 'General Decoration'
    },
    props: {
      text: {
        type: 'mgText'
      },
      className: {
        type: 'mgText',
        "default": 'form-control-static',
        advanced: true
      }
    }
  });

  /* script */
  const __vue_script__$u = script$t;

  /* template */
  var __vue_render__$n = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { class: _vm.$props.className }, [
      _vm._v("\n\t" + _vm._s(_vm.data || _vm.$props.text) + "\n")
    ])
  };
  var __vue_staticRenderFns__$n = [];
  __vue_render__$n._withStripped = true;

    /* style */
    const __vue_inject_styles__$u = undefined;
    /* scoped */
    const __vue_scope_id__$u = undefined;
    /* module identifier */
    const __vue_module_identifier__$u = undefined;
    /* functional template */
    const __vue_is_functional_template__$u = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$u = normalizeComponent(
      { render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n },
      __vue_inject_styles__$u,
      __vue_script__$u,
      __vue_scope_id__$u,
      __vue_is_functional_template__$u,
      __vue_module_identifier__$u,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgLabel = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$u
  });

  var script$u = Vue.mgComponent('mgList', {
    meta: {
      title: 'List',
      icon: 'far fa-list-ul',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        return (v || []).join(', ');
      }
    },
    data: function data() {
      return {
        newItem: ''
      };
    },
    props: {
      allowDelete: {
        type: 'mgToggle',
        "default": true
      },
      min: {
        type: 'mgNumber',
        title: 'Minimum number of items'
      },
      max: {
        type: 'mgNumber',
        title: 'Maximum number of items'
      },
      required: {
        type: 'mgToggle',
        "default": false
      },
      numbered: {
        type: 'mgToggle',
        "default": true
      },
      addButtonActiveClass: {
        type: 'mgText',
        "default": 'btn btn-block btn-success fa fa-plus',
        advanced: true
      },
      addButtonInactiveClass: {
        type: 'mgText',
        "default": 'btn btn-block btn-disabled fa fa-plus',
        advanced: true
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && (!_this.data || !_this.data.length)) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.min && _.isString(_this.data) && _this.data.length < _this.$props.min) return reply("".concat(_this.$props.title, " must have at least ").concat(_this.$props.min, " items"));
        if (_this.$props.max && _.isString(_this.data) && _this.data.length > _this.$props.max) return reply("".concat(_this.$props.title, " must have at most ").concat(_this.$props.max, " items"));
      });
    },
    methods: {
      addItem: function addItem() {
        if (!_.isArray(this.data)) this.data = [];
        this.data.push(this.newItem);
        this.newItem = '';
      },
      changeItem: function changeItem(index, value) {
        this.$set(this.data, index, value);
      },
      removeItem: function removeItem(index) {
        this.data = this.data.filter(function (x, i) {
          return i != index;
        });
      }
    }
  });

  /* script */
  const __vue_script__$v = script$u;

  /* template */
  var __vue_render__$o = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("table", { staticClass: "table table-bordered mg-list" }, [
      _c(
        "tbody",
        _vm._l(_vm.data, function(row, rowIndex) {
          return _c("tr", [
            _vm.$props.numbered
              ? _c("td", { staticClass: "row-number-cell" }, [
                  _vm._v(_vm._s(_vm._f("number")(rowIndex + 1)))
                ])
              : _vm._e(),
            _vm._v(" "),
            _c("td", [
              _c("input", {
                staticClass: "form-control",
                attrs: { type: "text" },
                domProps: { value: row },
                on: {
                  change: function($event) {
                    return _vm.changeItem(rowIndex, $event.srcElement.value)
                  }
                }
              })
            ]),
            _vm._v(" "),
            _vm.$props.allowDelete
              ? _c("td", { staticClass: "verb-cell" }, [
                  _c(
                    "a",
                    {
                      staticClass:
                        "btn btn-link btn-link-danger btn-xs text-muted",
                      on: {
                        click: function($event) {
                          return _vm.removeItem(rowIndex)
                        }
                      }
                    },
                    [_c("i", { staticClass: "fa fa-trash" })]
                  )
                ])
              : _vm._e()
          ])
        }),
        0
      ),
      _vm._v(" "),
      _c("tfoot", { staticClass: "hidden-print" }, [
        _c("tr", [
          _vm.$props.numbered
            ? _c("td", { staticClass: "row-number-cell" }, [
                !_vm.$props.allowDelete
                  ? _c("a", {
                      class: _vm.newItem
                        ? _vm.$props.addButtonActiveClass
                        : _vm.$props.addButtonInactiveClass,
                      on: {
                        click: function($event) {
                          return _vm.addItem()
                        }
                      }
                    })
                  : _c("i", { staticClass: "far fa-asterisk" })
              ])
            : _vm._e(),
          _vm._v(" "),
          _c("td", { attrs: { colspan: _vm.$props.allowDelete ? 1 : 2 } }, [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.newItem,
                  expression: "newItem"
                }
              ],
              staticClass: "form-control",
              attrs: { type: "text" },
              domProps: { value: _vm.newItem },
              on: {
                keyup: function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                  ) {
                    return null
                  }
                  return _vm.addItem()
                },
                input: function($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.newItem = $event.target.value;
                }
              }
            })
          ]),
          _vm._v(" "),
          _vm.$props.allowDelete
            ? _c("td", { staticClass: "verb-cell" }, [
                _c("a", {
                  class: _vm.newItem
                    ? _vm.$props.addButtonActiveClass
                    : _vm.$props.addButtonInactiveClass,
                  on: {
                    click: function($event) {
                      return _vm.addItem()
                    }
                  }
                })
              ])
            : _vm._e()
        ])
      ])
    ])
  };
  var __vue_staticRenderFns__$o = [];
  __vue_render__$o._withStripped = true;

    /* style */
    const __vue_inject_styles__$v = function (inject) {
      if (!inject) return
      inject("data-v-4db17ef8_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Cell padding */\n.mg-list td {\n\tpadding: 0px !important;\n}\n.mg-list td input[type=\"text\"] {\n\tborder: none;\n}\n\n/* Row number cell */\n.mg-list td.row-number-cell {\n\ttext-align: center;\n\twidth: 30px;\n\tvertical-align: middle;\n}\n\n/* Verb cell */\n.mg-list .verb-cell {\n\twidth: 30px;\n\ttext-align: center;\n\tvertical-align: middle;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,iBAAA;AACA;CACA,uBAAA;AACA;AAEA;CACA,YAAA;AACA;;AAEA,oBAAA;AACA;CACA,kBAAA;CACA,WAAA;CACA,sBAAA;AACA;;AAEA,cAAA;AACA;CACA,WAAA;CACA,kBAAA;CACA,sBAAA;AACA","file":"mgList.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgList', {\n\tmeta: {\n\t\ttitle: 'List',\n\t\ticon: 'far fa-list-ul',\n\t\tcategory: 'Simple Inputs',\n\t\tpreferId: true,\n\t\tformat: v => (v || []).join(', '),\n\t},\n\tdata() { return {\n\t\tnewItem: '',\n\t}},\n\tprops: {\n\t\tallowDelete: {type: 'mgToggle', default: true},\n\t\tmin: {type: 'mgNumber', title: 'Minimum number of items'},\n\t\tmax: {type: 'mgNumber', title: 'Maximum number of items'},\n\t\trequired: {type: 'mgToggle', default: false},\n\t\tnumbered: {type: 'mgToggle', default: true},\n\t\taddButtonActiveClass: {type: 'mgText', default: 'btn btn-block btn-success fa fa-plus', advanced: true},\n\t\taddButtonInactiveClass: {type: 'mgText', default: 'btn btn-block btn-disabled fa fa-plus', advanced: true},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && (!this.data || !this.data.length)) return reply(`${this.$props.title} is required`);\n\t\t\tif (this.$props.min && _.isString(this.data) && this.data.length < this.$props.min) return reply(`${this.$props.title} must have at least ${this.$props.min} items`);\n\t\t\tif (this.$props.max && _.isString(this.data) && this.data.length > this.$props.max) return reply(`${this.$props.title} must have at most ${this.$props.max} items`);\n\t\t});\n\t},\n\tmethods: {\n\t\taddItem() {\n\t\t\tif (!_.isArray(this.data)) this.data = [];\n\t\t\tthis.data.push(this.newItem);\n\t\t\tthis.newItem = '';\n\t\t},\n\t\tchangeItem(index, value) {\n\t\t\tthis.$set(this.data, index, value);\n\t\t},\n\t\tremoveItem(index) {\n\t\t\tthis.data = this.data.filter((x, i) => i != index);\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<table class=\"table table-bordered mg-list\">\n\t\t<tbody>\n\t\t\t<tr v-for=\"(row, rowIndex) in data\">\n\t\t\t\t<td v-if=\"$props.numbered\" class=\"row-number-cell\">{{rowIndex + 1 | number}}</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input :value=\"row\" @change=\"changeItem(rowIndex, $event.srcElement.value)\" type=\"text\" class=\"form-control\"/>\n\t\t\t\t</td>\n\t\t\t\t<td v-if=\"$props.allowDelete\" class=\"verb-cell\">\n\t\t\t\t\t<a @click=\"removeItem(rowIndex)\" class=\"btn btn-link btn-link-danger btn-xs text-muted\"><i class=\"fa fa-trash\"></i></a>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot class=\"hidden-print\">\n\t\t\t<tr>\n\t\t\t\t<td v-if=\"$props.numbered\" class=\"row-number-cell\">\n\t\t\t\t\t<a v-if=\"!$props.allowDelete\" @click=\"addItem()\" :class=\"newItem ? $props.addButtonActiveClass : $props.addButtonInactiveClass\"/>\n\t\t\t\t\t<i v-else class=\"far fa-asterisk\"></i>\n\t\t\t\t</td>\n\t\t\t\t<td :colspan=\"$props.allowDelete ? 1 : 2\">\n\t\t\t\t\t<input @keyup.enter=\"addItem()\" v-model=\"newItem\" type=\"text\" class=\"form-control\"/>\n\t\t\t\t</td>\n\t\t\t\t<td v-if=\"$props.allowDelete\" class=\"verb-cell\">\n\t\t\t\t\t<a @click=\"addItem()\" :class=\"newItem ? $props.addButtonActiveClass : $props.addButtonInactiveClass\"/>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</template>\n\n<style>\n/* Cell padding */\n.mg-list td {\n\tpadding: 0px !important;\n}\n\n.mg-list td input[type=\"text\"] {\n\tborder: none;\n}\n\n/* Row number cell */\n.mg-list td.row-number-cell {\n\ttext-align: center;\n\twidth: 30px;\n\tvertical-align: middle;\n}\n\n/* Verb cell */\n.mg-list .verb-cell {\n\twidth: 30px;\n\ttext-align: center;\n\tvertical-align: middle;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$v = undefined;
    /* module identifier */
    const __vue_module_identifier__$v = undefined;
    /* functional template */
    const __vue_is_functional_template__$v = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$v = normalizeComponent(
      { render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o },
      __vue_inject_styles__$v,
      __vue_script__$v,
      __vue_scope_id__$v,
      __vue_is_functional_template__$v,
      __vue_module_identifier__$v,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgList = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$v
  });

  var script$v = Vue.mgComponent('mgNumber', {
    meta: {
      title: 'Number',
      icon: 'far fa-sort-numeric-down',
      category: 'Simple Inputs',
      preferId: true,
      shorthand: ['integer', 'int', 'float', 'num'],
      format: function format(v) {
        if (!v) return '';
        return (_.isNumber(v) ? v : parseInt(v)).toLocaleString();
      },
      formatClass: 'text-right'
    },
    props: {
      min: {
        type: 'mgNumber',
        title: 'Minimum value'
      },
      max: {
        type: 'mgNumber',
        title: 'Maximum value'
      },
      step: {
        type: 'mgNumber',
        title: 'Value to increment / decrement by'
      },
      placeholder: {
        type: 'mgNumber',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      },
      "interface": {
        type: 'mgChoiceDropdown',
        title: 'Interface',
        help: 'How to allow number input',
        "default": 'bumpers',
        "enum": [{
          id: 'bumpers',
          title: 'Number input with buttons'
        }, {
          id: 'slider',
          title: 'Slider bar'
        }, {
          id: 'input',
          title: 'Number input box only'
        }]
      },
      bumperDownClass: {
        type: 'mgText',
        "default": 'btn btn-light fa fa-arrow-down input-group-prepend',
        advanced: true,
        showIf: 'interface == "bumpers"'
      },
      bumperUpClass: {
        type: 'mgText',
        "default": 'btn btn-light fa fa-arrow-up input-group-append',
        advanced: true,
        showIf: 'interface == "bumpers"'
      },
      prefix: {
        type: 'mgText',
        title: 'Prefix',
        help: 'Prefix to show before the input',
        showIf: 'interface == "input"'
      },
      prefixClass: {
        type: 'mgText',
        "default": 'input-group-prepend input-group-text',
        advanced: true,
        showIf: 'interface == "input"'
      },
      suffix: {
        type: 'mgText',
        title: 'Suffix',
        help: 'Suffix to show after the input',
        showIf: 'interface == "input"'
      },
      suffixClass: {
        type: 'mgText',
        "default": 'input-group-append input-group-text',
        advanced: true,
        showIf: 'interface == "input"'
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.min && _this.data < _this.$props.min) return reply("".concat(_this.$props.title, " is too small (minimum value is ").concat(_this.$props.min, ")"));
        if (_this.$props.max && _this.data > _this.$props.max) return reply("".concat(_this.$props.title, " is too large (maximum value is ").concat(_this.$props.max, ")"));
      });
    },
    methods: {
      add: function add(steps) {
        if (!_.isNumber(this.data)) return this.data = this.$props.min || 0; // Not already a number default to the min or zero

        this.data += steps * (this.$props.step || 1);
        if (this.$props.max && this.data > this.$props.max) this.data = this.$props.max;
        if (this.$props.min && this.data < this.$props.min) this.data = this.$props.min;
      }
    }
  });

  /* script */
  const __vue_script__$w = script$v;

  /* template */
  var __vue_render__$p = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mg-number", class: "mg-number-" + _vm.$props.interface },
      [
        _vm.$props.interface == "slider"
          ? _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.data,
                    expression: "data"
                  }
                ],
                staticClass: "form-control",
                attrs: {
                  type: "range",
                  placeholder: _vm.$props.placeholder,
                  min: _vm.$props.min,
                  max: _vm.$props.max,
                  step: _vm.$props.step
                },
                domProps: { value: _vm.data },
                on: {
                  __r: function($event) {
                    _vm.data = $event.target.value;
                  }
                }
              }),
              _vm._v(" "),
              _c("label", { staticClass: "mg-number-slider-value" }, [
                _vm._v(_vm._s(_vm._f("number")(_vm.data || "?")))
              ])
            ])
          : _vm.$props.interface == "bumpers"
          ? _c("div", { staticClass: "input-group" }, [
              _c("a", {
                staticClass: "hidden-print",
                class: _vm.$props.bumperDownClass,
                on: {
                  click: function($event) {
                    return _vm.add(-1)
                  }
                }
              }),
              _vm._v(" "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.data,
                    expression: "data"
                  }
                ],
                staticClass: "form-control",
                attrs: {
                  type: "number",
                  placeholder: _vm.$props.placeholder,
                  min: _vm.$props.min,
                  max: _vm.$props.max,
                  step: _vm.$props.step
                },
                domProps: { value: _vm.data },
                on: {
                  input: function($event) {
                    if ($event.target.composing) {
                      return
                    }
                    _vm.data = $event.target.value;
                  }
                }
              }),
              _vm._v(" "),
              _c("a", {
                staticClass: "hidden-print",
                class: _vm.$props.bumperUpClass,
                on: {
                  click: function($event) {
                    return _vm.add(1)
                  }
                }
              })
            ])
          : _vm.$props.interface == "input"
          ? _c("div", { staticClass: "input-group" }, [
              _vm.$props.prefix
                ? _c("div", { class: _vm.$props.prefixClass }, [
                    _vm._v(_vm._s(_vm.$props.prefix))
                  ])
                : _vm._e(),
              _vm._v(" "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.data,
                    expression: "data"
                  }
                ],
                staticClass: "form-control",
                attrs: {
                  type: "number",
                  placeholder: _vm.$props.placeholder,
                  min: _vm.$props.min,
                  max: _vm.$props.max,
                  step: _vm.$props.step
                },
                domProps: { value: _vm.data },
                on: {
                  input: function($event) {
                    if ($event.target.composing) {
                      return
                    }
                    _vm.data = $event.target.value;
                  }
                }
              }),
              _vm._v(" "),
              _vm.$props.suffix
                ? _c("div", { class: _vm.$props.suffixClass }, [
                    _vm._v(_vm._s(_vm.$props.suffix))
                  ])
                : _vm._e()
            ])
          : _c("div", { staticClass: "alert alert-warning" }, [
              _vm._v(
                "\n\t\tUnknown mgNumber interface '" +
                  _vm._s(_vm.$props.interface) +
                  "'\n\t"
              )
            ])
      ]
    )
  };
  var __vue_staticRenderFns__$p = [];
  __vue_render__$p._withStripped = true;

    /* style */
    const __vue_inject_styles__$w = function (inject) {
      if (!inject) return
      inject("data-v-9bb59ec0_0", { source: "\n.mg-number input[type=number] {\n\tpadding: 0 10px;\n}\n.mg-number .btn {\n\tbox-shadow: none;\n\tborder: 1px solid #f0f0f0;\n\tdisplay: flex;\n\talign-items: center;\n}\n\n/* Hide the spin button in mgNumber controls */\n.mg-number input[type=number]::-webkit-outer-spin-button,\n.mg-number input[type=number]::-webkit-inner-spin-button {\n\t/* display: none; <- Crashes Chrome on hover */\n\t-webkit-appearance: none;\n\tmargin: 0; /* <-- Apparently some margin is still there even though it's hidden */\n}\n\n\n\n/* Slider {{{ */\n.mg-number.mg-number-slider input[type=\"range\"] {\n\tdisplay: inline-block;\n\t-webkit-appearance: none;\n\twidth: calc(100% - (73px));\n\theight: 10px;\n\tborder-radius: 5px;\n\tbackground: var(--btn-default-bg);\n\toutline: none;\n\tpadding: 0;\n\tmargin: 0;\n}\n.mg-number.mg-number-slider input[type=\"range\"]::-webkit-slider-thumb {\n\t-webkit-appearance: none;\n\tappearance: none;\n\twidth: 20px;\n\theight: 20px;\n\tborder-radius: 50%;\n\tbackground: var(--primary);\n\tcursor: pointer;\n\t-webkit-transition: background .15s ease-in-out;\n\ttransition: background .15s ease-in-out;\n}\n.mg-number.mg-number-slider input[type=\"range\"]::-webkit-slider-thumb:hover,\n.mg-number.mg-number-slider input[type=\"range\"]:active::-webkit-slider-thumb,\n.mg-number.mg-number-slider input[type=\"range\"]::-moz-range-thumb:hover,\n.mg-number.mg-number-slider input[type=\"range\"]:active::-moz-range-thumb {\n\tbackground: var(--primary);\n}\n.mg-number.mg-number-slider input[type=\"range\"]::-moz-range-thumb {\n\twidth: 20px;\n\theight: 20px;\n\tborder: 0;\n\tborder-radius: 50%;\n\tcolor: var(--btn-default-fg);\n\tbackground: var(--btn-default-bg);\n\tcursor: pointer;\n\t-moz-transition: background .15s ease-in-out;\n\ttransition: background .15s ease-in-out;\n}\n.mg-number.mg-number-slider input[type=\"range\"]:focus::-webkit-slider-thumb {\n\tbox-shadow: 0 0 0 3px #fff, 0 0 0 6px var(--primary);\n}\n.mg-number.mg-number-slider .mg-number-slider-value {\n\tdisplay: inline-block;\n\tposition: relative;\n\twidth: 60px;\n\tline-height: 20px;\n\ttext-align: center;\n\tborder-radius: 3px;\n\tcolor: var(--btn-default-fg);\n\tbackground: var(--btn-default-bg);\n\tpadding: 5px 10px;\n\tmargin-left: 8px;\n}\n.mg-number.mg-number-slider .mg-number-slider-value:after {\n\tposition: absolute;\n\ttop: 8px;\n\tleft: -7px;\n\twidth: 0;\n\theight: 0;\n\tborder-top: 7px solid transparent;\n\tborder-right: 7px solid var(--btn-default-bg);\n\tborder-bottom: 7px solid transparent;\n\tcontent: '';\n}\n::-moz-range-track {\n\tbackground: var(--btn-default-bg);\n\tborder: 0;\n}\ninput::-moz-focus-inner,\ninput::-moz-focus-outer {\n\tborder: 0;\n}\n/* }}} */\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgNumber.vue"],"names":[],"mappings":";AA0EA;CACA,eAAA;AACA;AAEA;CACA,gBAAA;CACA,yBAAA;CACA,aAAA;CACA,mBAAA;AACA;;AAEA,8CAAA;AACA;;CAEA,8CAAA;CACA,wBAAA;CACA,SAAA,EAAA,sEAAA;AACA;;;;AAIA,eAAA;AACA;CACA,qBAAA;CACA,wBAAA;CACA,0BAAA;CACA,YAAA;CACA,kBAAA;CACA,iCAAA;CACA,aAAA;CACA,UAAA;CACA,SAAA;AACA;AAEA;CACA,wBAAA;CACA,gBAAA;CACA,WAAA;CACA,YAAA;CACA,kBAAA;CACA,0BAAA;CACA,eAAA;CACA,+CAAA;CACA,uCAAA;AACA;AAEA;;;;CAIA,0BAAA;AACA;AAEA;CACA,WAAA;CACA,YAAA;CACA,SAAA;CACA,kBAAA;CACA,4BAAA;CACA,iCAAA;CACA,eAAA;CACA,4CAAA;CACA,uCAAA;AACA;AAEA;CACA,oDAAA;AACA;AAEA;CACA,qBAAA;CACA,kBAAA;CACA,WAAA;CACA,iBAAA;CACA,kBAAA;CACA,kBAAA;CACA,4BAAA;CACA,iCAAA;CACA,iBAAA;CACA,gBAAA;AACA;AACA;CACA,kBAAA;CACA,QAAA;CACA,UAAA;CACA,QAAA;CACA,SAAA;CACA,iCAAA;CACA,6CAAA;CACA,oCAAA;CACA,WAAA;AACA;AAEA;CACA,iCAAA;CACA,SAAA;AACA;AAEA;;CAEA,SAAA;AACA;AACA,QAAA","file":"mgNumber.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgNumber', {\n\tmeta: {\n\t\ttitle: 'Number',\n\t\ticon: 'far fa-sort-numeric-down',\n\t\tcategory: 'Simple Inputs',\n\t\tpreferId: true,\n\t\tshorthand: ['integer', 'int', 'float', 'num'],\n\t\tformat: v => {\n\t\t\tif (!v) return '';\n\t\t\treturn (_.isNumber(v) ? v : parseInt(v)).toLocaleString();\n\t\t},\n\t\tformatClass: 'text-right',\n\t},\n\tprops: {\n\t\tmin: {type: 'mgNumber', title: 'Minimum value'},\n\t\tmax: {type: 'mgNumber', title: 'Maximum value'},\n\t\tstep: {type: 'mgNumber', title: 'Value to increment / decrement by'},\n\t\tplaceholder: {type: 'mgNumber', help: 'Ghost text to display when there is no value'},\n\t\trequired: {type: 'mgToggle', default: false},\n\t\tinterface: {type: 'mgChoiceDropdown', title: 'Interface', help: 'How to allow number input', default: 'bumpers', enum: [\n\t\t\t{id: 'bumpers', title: 'Number input with buttons'},\n\t\t\t{id: 'slider', title: 'Slider bar'},\n\t\t\t{id: 'input', title: 'Number input box only'},\n\t\t]},\n\t\tbumperDownClass: {type: 'mgText', default: 'btn btn-light fa fa-arrow-down input-group-prepend', advanced: true, showIf: 'interface == \"bumpers\"'},\n\t\tbumperUpClass: {type: 'mgText', default: 'btn btn-light fa fa-arrow-up input-group-append', advanced: true, showIf: 'interface == \"bumpers\"'},\n\t\tprefix: {type: 'mgText', title: 'Prefix', help: 'Prefix to show before the input', showIf: 'interface == \"input\"'},\n\t\tprefixClass: {type: 'mgText', default: 'input-group-prepend input-group-text', advanced: true, showIf: 'interface == \"input\"'},\n\t\tsuffix: {type: 'mgText', title: 'Suffix', help: 'Suffix to show after the input', showIf: 'interface == \"input\"'},\n\t\tsuffixClass: {type: 'mgText', default: 'input-group-append input-group-text', advanced: true, showIf: 'interface == \"input\"'},\n\t},\n\tcreated() {\n\t\tthis.$on('mgValidate', reply => {\n\t\t\tif (this.$props.required && !this.data) return reply(`${this.$props.title} is required`);\n\t\t\tif (this.$props.min && this.data < this.$props.min) return reply(`${this.$props.title} is too small (minimum value is ${this.$props.min})`);\n\t\t\tif (this.$props.max && this.data > this.$props.max) return reply(`${this.$props.title} is too large (maximum value is ${this.$props.max})`);\n\t\t});\n\t},\n\tmethods: {\n\t\tadd(steps) {\n\t\t\tif (!_.isNumber(this.data)) return this.data = this.$props.min || 0; // Not already a number default to the min or zero\n\n\t\t\tthis.data += steps * (this.$props.step || 1);\n\t\t\tif (this.$props.max && this.data > this.$props.max) this.data = this.$props.max;\n\t\t\tif (this.$props.min && this.data < this.$props.min) this.data = this.$props.min;\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-number\" :class=\"`mg-number-${$props.interface}`\">\n\t\t<div v-if=\"$props.interface == 'slider'\">\n\t\t\t<input v-model=\"data\" type=\"range\" class=\"form-control\" :placeholder=\"$props.placeholder\" :min=\"$props.min\" :max=\"$props.max\" :step=\"$props.step\"/>\n\t\t\t<label class=\"mg-number-slider-value\">{{(data || '?') | number}}</label>\n\t\t</div>\n\t\t<div v-else-if=\"$props.interface == 'bumpers'\" class=\"input-group\">\n\t\t\t<a @click=\"add(-1)\" class=\"hidden-print\" :class=\"$props.bumperDownClass\"></a>\n\t\t\t<input v-model=\"data\" type=\"number\" class=\"form-control\" :placeholder=\"$props.placeholder\" :min=\"$props.min\" :max=\"$props.max\" :step=\"$props.step\"/>\n\t\t\t<a @click=\"add(1)\" class=\"hidden-print\" :class=\"$props.bumperUpClass\"></a>\n\t\t</div>\n\t\t<div v-else-if=\"$props.interface == 'input'\" class=\"input-group\">\n\t\t\t<div v-if=\"$props.prefix\" :class=\"$props.prefixClass\">{{$props.prefix}}</div>\n\t\t\t<input v-model=\"data\" type=\"number\" class=\"form-control\" :placeholder=\"$props.placeholder\" :min=\"$props.min\" :max=\"$props.max\" :step=\"$props.step\"/>\n\t\t\t<div v-if=\"$props.suffix\" :class=\"$props.suffixClass\">{{$props.suffix}}</div>\n\t\t</div>\n\t\t<div v-else class=\"alert alert-warning\">\n\t\t\tUnknown mgNumber interface '{{$props.interface}}'\n\t\t</div>\n\t</div>\n</template>\n\n<style>\n.mg-number input[type=number] {\n\tpadding: 0 10px;\n}\n\n.mg-number .btn {\n\tbox-shadow: none;\n\tborder: 1px solid #f0f0f0;\n\tdisplay: flex;\n\talign-items: center;\n}\n\n/* Hide the spin button in mgNumber controls */\n.mg-number input[type=number]::-webkit-outer-spin-button,\n.mg-number input[type=number]::-webkit-inner-spin-button {\n\t/* display: none; <- Crashes Chrome on hover */\n\t-webkit-appearance: none;\n\tmargin: 0; /* <-- Apparently some margin is still there even though it's hidden */\n}\n\n\n\n/* Slider {{{ */\n.mg-number.mg-number-slider input[type=\"range\"] {\n\tdisplay: inline-block;\n\t-webkit-appearance: none;\n\twidth: calc(100% - (73px));\n\theight: 10px;\n\tborder-radius: 5px;\n\tbackground: var(--btn-default-bg);\n\toutline: none;\n\tpadding: 0;\n\tmargin: 0;\n}\n\n.mg-number.mg-number-slider input[type=\"range\"]::-webkit-slider-thumb {\n\t-webkit-appearance: none;\n\tappearance: none;\n\twidth: 20px;\n\theight: 20px;\n\tborder-radius: 50%;\n\tbackground: var(--primary);\n\tcursor: pointer;\n\t-webkit-transition: background .15s ease-in-out;\n\ttransition: background .15s ease-in-out;\n}\n\n.mg-number.mg-number-slider input[type=\"range\"]::-webkit-slider-thumb:hover,\n.mg-number.mg-number-slider input[type=\"range\"]:active::-webkit-slider-thumb,\n.mg-number.mg-number-slider input[type=\"range\"]::-moz-range-thumb:hover,\n.mg-number.mg-number-slider input[type=\"range\"]:active::-moz-range-thumb {\n\tbackground: var(--primary);\n}\n\n.mg-number.mg-number-slider input[type=\"range\"]::-moz-range-thumb {\n\twidth: 20px;\n\theight: 20px;\n\tborder: 0;\n\tborder-radius: 50%;\n\tcolor: var(--btn-default-fg);\n\tbackground: var(--btn-default-bg);\n\tcursor: pointer;\n\t-moz-transition: background .15s ease-in-out;\n\ttransition: background .15s ease-in-out;\n}\n\n.mg-number.mg-number-slider input[type=\"range\"]:focus::-webkit-slider-thumb {\n\tbox-shadow: 0 0 0 3px #fff, 0 0 0 6px var(--primary);\n}\n\n.mg-number.mg-number-slider .mg-number-slider-value {\n\tdisplay: inline-block;\n\tposition: relative;\n\twidth: 60px;\n\tline-height: 20px;\n\ttext-align: center;\n\tborder-radius: 3px;\n\tcolor: var(--btn-default-fg);\n\tbackground: var(--btn-default-bg);\n\tpadding: 5px 10px;\n\tmargin-left: 8px;\n}\n.mg-number.mg-number-slider .mg-number-slider-value:after {\n\tposition: absolute;\n\ttop: 8px;\n\tleft: -7px;\n\twidth: 0;\n\theight: 0;\n\tborder-top: 7px solid transparent;\n\tborder-right: 7px solid var(--btn-default-bg);\n\tborder-bottom: 7px solid transparent;\n\tcontent: '';\n}\n\n::-moz-range-track {\n\tbackground: var(--btn-default-bg);\n\tborder: 0;\n}\n\ninput::-moz-focus-inner,\ninput::-moz-focus-outer {\n\tborder: 0;\n}\n/* }}} */\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$w = undefined;
    /* module identifier */
    const __vue_module_identifier__$w = undefined;
    /* functional template */
    const __vue_is_functional_template__$w = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$w = normalizeComponent(
      { render: __vue_render__$p, staticRenderFns: __vue_staticRenderFns__$p },
      __vue_inject_styles__$w,
      __vue_script__$w,
      __vue_scope_id__$w,
      __vue_is_functional_template__$w,
      __vue_module_identifier__$w,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgNumber = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$w
  });

  var script$w = Vue.mgComponent('mgPermissions', {
    meta: {
      title: 'Permissions',
      icon: 'far fa-key',
      category: 'System Administration',
      preferId: true
    },
    props: {
      textEmpty: {
        type: 'mgText',
        help: 'Text to display when no permissions are set',
        "default": 'No permissions selected'
      },
      permissionsFeed: _defineProperty({
        type: 'mgUrl',
        relative: true,
        "default": '/api/users/meta',
        advanced: true,
        help: 'The data source to import user permissions'
      }, "relative", true)
    },
    created: function created() {
      var _this = this;

      this.$watch('data', function () {
        if (_.isString(_this.data)) _this.$set(_this, 'data', /\|\|/.test(_this.data) ? _this.data.split(/\s*\|\|\s*/) // `foo || bar` -> ['foo', 'bar']
        : [_this.data]);
      }, {
        immediate: true
      });
    },
    methods: {
      edit: function edit() {
        var _this2 = this;

        Promise.resolve().then(function () {
          return _this2.$macgyver.notify.loading(_this2._uid, true);
        }).then(function () {
          return _this2.$http.get(_this2.$props.permissionsFeed)["catch"](_this2.$toast["catch"]);
        }).tap(function () {
          return _this2.$macgyver.notify.loading(_this2._uid, false);
        }).then(function (res) {
          var _ref, _res$data;

          return _this2.$prompt.macgyver({
            title: 'Select permissions',
            form: [{
              id: 'class',
              type: 'mgChoiceCheckbox',
              showTitle: false,
              classWrapper: '',
              sort: 'sortId',
              "enum": (_ref = (_res$data = res.data, _.pickBy(_res$data, function (v, k) {
                return k.startsWith('permissions.');
              })), _.map(_ref, function (v, k) {
                return {
                  id: k.replace(/^permissions\./, ''),
                  title: Vue.filter('permissionCase')(k.replace(/^permissions\./, ''))
                };
              }))
            }],
            data: {
              "class": _.clone(_this2.data)
            }
          });
        }).then(function (form) {
          return _this2.data = form["class"];
        })["catch"](function (e) {}); // Ignore rejection - was probably the user cancelling the permission set
      }
    }
  });

  /* script */
  const __vue_script__$x = script$w;

  /* template */
  var __vue_render__$q = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      {
        staticClass: "form-control-static",
        on: {
          click: function($event) {
            return _vm.edit()
          }
        }
      },
      [
        _vm._l(_vm.data, function(permission) {
          return _c(
            "span",
            { key: permission, staticClass: "badge badge-info" },
            [
              _vm._v(
                "\n\t\t" + _vm._s(_vm._f("permissionCase")(permission)) + "\n\t"
              )
            ]
          )
        }),
        _vm._v(" "),
        !_vm.data || !_vm.data.length
          ? _c("span", { staticClass: "font-italic text-muted" }, [
              _vm._v("\n\t\t" + _vm._s(_vm.$props.textEmpty) + "\n\t")
            ])
          : _vm._e()
      ],
      2
    )
  };
  var __vue_staticRenderFns__$q = [];
  __vue_render__$q._withStripped = true;

    /* style */
    const __vue_inject_styles__$x = undefined;
    /* scoped */
    const __vue_scope_id__$x = undefined;
    /* module identifier */
    const __vue_module_identifier__$x = undefined;
    /* functional template */
    const __vue_is_functional_template__$x = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$x = normalizeComponent(
      { render: __vue_render__$q, staticRenderFns: __vue_staticRenderFns__$q },
      __vue_inject_styles__$x,
      __vue_script__$x,
      __vue_scope_id__$x,
      __vue_is_functional_template__$x,
      __vue_module_identifier__$x,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgPermissions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$x
  });

  var script$x = Vue.mgComponent('mgPlaceholder', {
    meta: {
      title: 'Placeholder',
      icon: 'far fa-construction',
      category: 'General Decoration'
    },
    props: {
      text: {
        type: 'mgText'
      },
      height: {
        type: 'mgNumber',
        "default": '100%'
      },
      style: {
        type: 'mgChoiceButtons',
        "default": 'mg-placeholder-box',
        iconSelected: 'far fa-fw fa-check',
        iconDefault: 'far fa-fw',
        "enum": [{
          id: 'mg-placeholder-box',
          title: 'Lined box'
        }, {
          id: 'mg-placeholder-construction',
          title: 'Construction area'
        }]
      }
    }
  });

  /* script */
  const __vue_script__$y = script$x;

  /* template */
  var __vue_render__$r = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mg-placeholder",
        class: _vm.$props.style,
        style: "height: " + (_vm.$props.height || "auto")
      },
      [
        _vm.$props.text
          ? _c("div", { staticClass: "mg-placeholder-text" }, [
              _vm._v("\n\t\t" + _vm._s(_vm.$props.text) + "\n\t")
            ])
          : _vm._e()
      ]
    )
  };
  var __vue_staticRenderFns__$r = [];
  __vue_render__$r._withStripped = true;

    /* style */
    const __vue_inject_styles__$y = function (inject) {
      if (!inject) return
      inject("data-v-046c7424_0", { source: "\n.mg-placeholder {\n\tmin-height: 100px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tborder-radius: 5px;\n}\n\n/* Style: placeholder-box {{{ */\n.mg-placeholder.mg-placeholder-box {\n\tborder: 1px solid #000;\n\tbackground:\n\t\tlinear-gradient(to top left,\n\t\t\trgba(0,0,0,0) 0%,\n\t\t\trgba(0,0,0,0) calc(50% - 0.8px),\n\t\t\trgba(0,0,0,1) 50%,\n\t\t\trgba(0,0,0,0) calc(50% + 0.8px),\n\t\t\trgba(0,0,0,0) 100%),\n\t\tlinear-gradient(to top right,\n\t\t\trgba(0,0,0,0) 0%,\n\t\t\trgba(0,0,0,0) calc(50% - 0.8px),\n\t\t\trgba(0,0,0,1) 50%,\n\t\t\trgba(0,0,0,0) calc(50% + 0.8px),\n\t\t\trgba(0,0,0,0) 100%);\n}\n.mg-placeholder.mg-placeholder-box > .mg-placeholder-text {\n\tbackground: #FFF;\n\tborder-radius: 10px;\n\tpadding: 10px 15px;\n}\n/* }}} */\n\n/* Style: placeholder-construction {{{ */\n.mg-placeholder.mg-placeholder-construction {\n\tbackground: repeating-linear-gradient(45deg, #dfc458, #dfc458 10px, #666 10px, #666 20px);\n}\n.mg-placeholder.mg-placeholder-construction > .mg-placeholder-text {\n\tfont-size: 20pt;\n\tcolor: #FFF;\n\ttext-shadow: -2px -2px 1px #000, 2px -2px 1px #000, -2px 2px 1px #000, 2px 2px 1px #000;\n}\n/* }}} */\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgPlaceholder.vue"],"names":[],"mappings":";AAiCA;CACA,iBAAA;CACA,aAAA;CACA,uBAAA;CACA,mBAAA;CACA,kBAAA;AACA;;AAEA,+BAAA;AACA;CACA,sBAAA;CACA;;;;;;;;;;;;sBAYA;AACA;AAEA;CACA,gBAAA;CACA,mBAAA;CACA,kBAAA;AACA;AACA,QAAA;;AAEA,wCAAA;AACA;CACA,yFAAA;AACA;AAEA;CACA,eAAA;CACA,WAAA;CACA,uFAAA;AACA;AACA,QAAA","file":"mgPlaceholder.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgPlaceholder', {\n\tmeta: {\n\t\ttitle: 'Placeholder',\n\t\ticon: 'far fa-construction',\n\t\tcategory: 'General Decoration',\n\t},\n\tprops: {\n\t\ttext: {type: 'mgText'},\n\t\theight: {type: 'mgNumber', default: '100%'},\n\t\tstyle: {\n\t\t\ttype: 'mgChoiceButtons',\n\t\t\tdefault: 'mg-placeholder-box',\n\t\t\ticonSelected: 'far fa-fw fa-check',\n\t\t\ticonDefault: 'far fa-fw',\n\t\t\tenum: [\n\t\t\t\t{id: 'mg-placeholder-box', title: 'Lined box'},\n\t\t\t\t{id: 'mg-placeholder-construction', title: 'Construction area'},\n\t\t\t],\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-placeholder\" :class=\"$props.style\" :style=\"`height: ${$props.height || 'auto'}`\">\n\t\t<div v-if=\"$props.text\" class=\"mg-placeholder-text\">\n\t\t\t{{$props.text}}\n\t\t</div>\n\t</div>\n</template>\n\n<style>\n.mg-placeholder {\n\tmin-height: 100px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tborder-radius: 5px;\n}\n\n/* Style: placeholder-box {{{ */\n.mg-placeholder.mg-placeholder-box {\n\tborder: 1px solid #000;\n\tbackground:\n\t\tlinear-gradient(to top left,\n\t\t\trgba(0,0,0,0) 0%,\n\t\t\trgba(0,0,0,0) calc(50% - 0.8px),\n\t\t\trgba(0,0,0,1) 50%,\n\t\t\trgba(0,0,0,0) calc(50% + 0.8px),\n\t\t\trgba(0,0,0,0) 100%),\n\t\tlinear-gradient(to top right,\n\t\t\trgba(0,0,0,0) 0%,\n\t\t\trgba(0,0,0,0) calc(50% - 0.8px),\n\t\t\trgba(0,0,0,1) 50%,\n\t\t\trgba(0,0,0,0) calc(50% + 0.8px),\n\t\t\trgba(0,0,0,0) 100%);\n}\n\n.mg-placeholder.mg-placeholder-box > .mg-placeholder-text {\n\tbackground: #FFF;\n\tborder-radius: 10px;\n\tpadding: 10px 15px;\n}\n/* }}} */\n\n/* Style: placeholder-construction {{{ */\n.mg-placeholder.mg-placeholder-construction {\n\tbackground: repeating-linear-gradient(45deg, #dfc458, #dfc458 10px, #666 10px, #666 20px);\n}\n\n.mg-placeholder.mg-placeholder-construction > .mg-placeholder-text {\n\tfont-size: 20pt;\n\tcolor: #FFF;\n\ttext-shadow: -2px -2px 1px #000, 2px -2px 1px #000, -2px 2px 1px #000, 2px 2px 1px #000;\n}\n/* }}} */\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$y = undefined;
    /* module identifier */
    const __vue_module_identifier__$y = undefined;
    /* functional template */
    const __vue_is_functional_template__$y = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$y = normalizeComponent(
      { render: __vue_render__$r, staticRenderFns: __vue_staticRenderFns__$r },
      __vue_inject_styles__$y,
      __vue_script__$y,
      __vue_scope_id__$y,
      __vue_is_functional_template__$y,
      __vue_module_identifier__$y,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgPlaceholder = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$y
  });

  var script$y = Vue.mgComponent('mgQuery', {
    meta: {
      title: 'Query',
      icon: 'far fa-filter',
      category: 'Data display'
    },
    data: function data() {
      return {
        queryComponent: []
      };
    },
    props: _defineProperty({
      config: Object,

      /**
      * The spec is composed of an object lookup with the dotted notation path as the key and an object set of properties
      * @property {string} [type='string'] The type of the field, used to determine the component to use as the value input
      * @property {boolean} [showOperand=true] Whether to allow the user to select the operand ("Equals", "Is in" etc.) if false this only allows straight equality
      * @property {array <string>|array <object>|string} [enum] If the type is a string this restricts operand values to a list of selectable values. The value can also be one of the following meta values: '$FIELDS' - list all spec fields
      */
      spec: {
        type: 'mgCode',
        syntax: 'json'
      }
    }, "spec", {
      type: String,
      "default": function _default() {
        return {
          // FIXME: Test case
          _id: {
            type: 'objectId'
          },
          name: {
            type: 'string'
          },
          username: {
            type: 'string'
          },
          email: {
            type: 'string'
          },
          'address.street': {
            type: 'string'
          },
          'address.city': {
            type: 'string'
          },
          'address.zip': {
            type: 'string'
          },
          'address.state': {
            type: 'string'
          },
          'address.country': {
            type: 'string'
          },
          phone: {
            type: 'string'
          },
          website: {
            type: 'string'
          },
          'company.name': {
            type: 'string'
          },
          role: {
            type: 'string',
            "enum": ['user', 'admin', 'root']
          },
          status: {
            type: 'string',
            "enum": ['pending', 'active', 'deleted']
          },
          lastLogin: {
            type: 'date'
          },
          sort: {
            type: 'string',
            showOperand: false,
            "enum": '$FIELDS'
          },
          limit: {
            type: 'number',
            showOperand: false
          },
          skip: {
            type: 'number',
            showOperand: false
          }
        };
      }
    }),
    created: function created() {
      this.$watchAll(['$props.url', '$props.spec'], this.refresh, {
        immediate: true
      });
    },
    methods: {
      refresh: function refresh() {
        var _this = this;

        console.log('Render', _.cloneDeep(this.data)); // Calculate which fields we can use in enums

        var fieldsEnum = Object.keys(this.$props.spec).map(function (key) {
          return {
            id: key,
            title: _.startCase(key)
          };
        });
        /**
        * Populate enum values from a spec branch
        * Really this just deals with meta cases like '$FIELDS' (see spec definition for 'enum')
        * @param {Object} pathSpec The path branch specification
        * @returns {array} An mgChoice* compatible ENUM composed of {id, title}
        */

        var populateEnum = function populateEnum(pathSpec) {
          return pathSpec["enum"] === '$FIELDS' ? fieldsEnum : pathSpec["enum"];
        };

        this.queryComponent = {
          type: 'mgContainer',
          layout: 'query',
          items: Object.keys(this.data).map(function (path, pathIndex) {
            return (// Examine each path key
              Object.keys(_typeof(_this.data[path]) == 'object' ? _this.data[path] : {
                $eq: _this.data[path]
              }) // Examine each operand key
              .map(function (operand, operandIndex) {
                var value = _this.data[path];
                var pathSpec = _this.spec[path] || {
                  unknown: true,
                  type: 'string'
                };
                var row = {
                  id: 'id' + _.random(10000, 99999),
                  type: 'mgContainer',
                  layout: 'query-row',
                  items: [{
                    type: 'mgChoiceDropdown',
                    "enum": fieldsEnum,
                    "default": path,
                    onChange: function onChange(value) {
                      if (_.isPlainObject(_this.data[path])) {
                        // Multiple value setter
                        console.log('Change field with other operands', path, 'to', value, {
                          leaf: _this.data[path]
                        });
                        delete _this.data[path][operand];
                        _this.data[value][operand] = '';
                      } else {
                        // Single value setter
                        console.log('Change simple field', path, 'to', value, {
                          leaf: _this.data[path]
                        });
                        delete _this.data[path];
                        _this.data[value] = '';
                      }

                      _this.refresh();
                    }
                  }, {
                    type: 'mgChoiceDropdown',
                    "enum": [].concat(_toConsumableArray(['string', 'number'].includes(pathSpec.type) ? [{
                      id: '$eq',
                      title: 'Equals'
                    }, {
                      id: '$ne',
                      title: 'Does not equal'
                    }] : []), _toConsumableArray(pathSpec.type == 'date' ? [{
                      id: '$eq',
                      title: 'Is on'
                    }, {
                      id: '$ne',
                      title: 'Is not on'
                    }] : []), [{
                      id: '$exists',
                      title: 'Is present'
                    }], _toConsumableArray(pathSpec.type != 'date' ? [{
                      id: '$in',
                      title: 'Is one of'
                    }, {
                      id: '$nin',
                      title: 'Is not one of'
                    }] : []), _toConsumableArray(pathSpec.type == 'number' ? [{
                      id: '$gt',
                      title: 'Is greater than'
                    }, {
                      id: '$gte',
                      title: 'Is equal or greater than'
                    }, {
                      id: '$lt',
                      title: 'Is less than'
                    }, {
                      id: '$lte',
                      title: 'Is equal or less than'
                    }] : []), _toConsumableArray(pathSpec.type == 'date' ? [{
                      id: '$gt',
                      title: 'Is after'
                    }, {
                      id: '$gte',
                      title: 'Is on or after'
                    }, {
                      id: '$lt',
                      title: 'Is before'
                    }, {
                      id: '$lte',
                      title: 'Is on or before'
                    }] : [])),
                    "default": operand,
                    onChange: function onChange(value) {
                      debugger;

                      if (_.isPlainObject(_this.data[path])) {
                        // Multiple operand setter
                        console.log('Change nested operand for path', path, 'to', value);
                        delete _this.$data[path][operand];
                        _this.$data[path].$eq = value;
                      } else if (value == '$eq') {
                        // Single operand setter
                        console.log('Change simple operand for path', path, 'to', value);
                        _this.data[path] = value;
                      } else {
                        _this.data[path] = _objectSpread2({}, _.isPlainObject(_this.data[path]) ? _this.data : null, _defineProperty({}, value, ''));
                      }

                      _this.refresh();
                    }
                  }]
                };

                if (value === undefined) ; else if (['$eq', '$ne'].includes(operand) && pathSpec["enum"]) {
                  row.items.push({
                    type: 'mgChoiceDropdown',
                    "enum": populateEnum(pathSpec),
                    "default": value
                  });
                } else if (['$eq', '$ne'].includes(operand) && pathSpec.type == 'string') {
                  row.items.push({
                    type: 'mgText',
                    "default": value
                  });
                } else if (['$eq', '$ne'].includes(operand) && pathSpec.type == 'number') {
                  row.items.push({
                    type: 'mgNumber',
                    "default": value
                  });
                } else if (['$eq', '$ne'].includes(operand) && pathSpec.type == 'date') {
                  row.items.push({
                    type: 'mgDate',
                    "default": value
                  });
                } else if (operand == '$exists') {
                  row.items.push({
                    type: 'mgToggle',
                    onText: 'yes',
                    offText: 'no',
                    "default": value
                  });
                } else if (operand == '$in' || operand == '$nin') {
                  row.items.push({
                    type: 'mgChoiceTags',
                    "default": value,
                    "enum": populateEnum(pathSpec)
                  });
                } else {
                  row.items.push({
                    type: 'mgError',
                    text: "Unsupported operand \"".concat(operand, "\"")
                  });
                }

                return row;
              })
            );
          }).reduce(function (t, v) {
            return t.concat(v);
          }, []) // Flatten

        };
      },
      changeField: function changeField(path, value) {
        console.log('Change', path, '=', value);
      }
    }
  });

  /* script */
  const __vue_script__$z = script$y;

  /* template */
  var __vue_render__$s = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("mg-form", {
          attrs: { form: _vm.$props.id + "-subform", config: _vm.queryComponent }
        }),
        _vm._v(" "),
        _c("pre", [_vm._v("Data: " + _vm._s(_vm.data))])
      ],
      1
    )
  };
  var __vue_staticRenderFns__$s = [];
  __vue_render__$s._withStripped = true;

    /* style */
    const __vue_inject_styles__$z = undefined;
    /* scoped */
    const __vue_scope_id__$z = undefined;
    /* module identifier */
    const __vue_module_identifier__$z = undefined;
    /* functional template */
    const __vue_is_functional_template__$z = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$z = normalizeComponent(
      { render: __vue_render__$s, staticRenderFns: __vue_staticRenderFns__$s },
      __vue_inject_styles__$z,
      __vue_script__$z,
      __vue_scope_id__$z,
      __vue_is_functional_template__$z,
      __vue_module_identifier__$z,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgQuery = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$z
  });

  var script$z = Vue.mgComponent('mgRestQuery', {
    meta: {
      title: 'ReST Query',
      icon: 'far fa-database',
      category: 'Data display'
    },
    props: {
      className: {
        type: 'mgText',
        advanced: true
      },
      classActive: {
        type: 'mgText',
        "default": 'btn btn-primary',
        advanced: true
      },
      classInactive: {
        type: 'mgText',
        "default": 'btn btn-light',
        advanced: true
      },
      iconActive: {
        type: 'mgIcon',
        "default": 'fa fa-database',
        advanced: true
      },
      iconInactive: {
        type: 'mgIcon',
        "default": 'far fa-plus',
        advanced: true
      },
      textActive: {
        type: 'mgText',
        "default": 'Edit query',
        advanced: true
      },
      textInactive: {
        type: 'mgText',
        "default": 'Add query',
        advanced: true
      }
    },
    computed: {
      codeDisplay: function codeDisplay() {
        if (!this.data) return '';
        return '<pre class="pre-sm">' + JSON.stringify(this.data, null, '\t').replace(/\n/g, '<br/>') + '</pre>';
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    },
    methods: {
      editQuery: function editQuery() {
        var _this2 = this;

        Promise.resolve().then(function (res) {
          return _this2.$prompt.macgyver({
            title: 'Edit query',
            // buttons: [], // We assume closing the dialog resolves so no need for buttons
            form: [{
              id: 'query',
              type: 'mgCode',
              showTitle: false
            }],
            data: {
              query: _this2.data
            }
          });
        }).then(function (form) {
          return _this2.data = JSON.parse(form.query);
        });
      }
    }
  });

  /* script */
  const __vue_script__$A = script$z;

  /* template */
  var __vue_render__$t = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      {
        directives: [
          {
            name: "tooltip",
            rawName: "v-tooltip",
            value: { content: _vm.codeDisplay, classes: "text-left" },
            expression: "{content: codeDisplay, classes: 'text-left'}"
          }
        ],
        staticClass: "btn btn-light",
        class: _vm.data
          ? [_vm.data, _vm.$props.classActive || _vm.$props.className]
          : [_vm.$props.classInactive || _vm.$props.className],
        on: {
          click: function($event) {
            return _vm.editQuery()
          }
        }
      },
      [
        _c("i", {
          class: _vm.data ? _vm.$props.iconActive : _vm.$props.iconInactive
        }),
        _vm._v(
          "\n\t" +
            _vm._s(_vm.data ? _vm.$props.textActive : _vm.$props.textInactive) +
            "\n"
        )
      ]
    )
  };
  var __vue_staticRenderFns__$t = [];
  __vue_render__$t._withStripped = true;

    /* style */
    const __vue_inject_styles__$A = undefined;
    /* scoped */
    const __vue_scope_id__$A = undefined;
    /* module identifier */
    const __vue_module_identifier__$A = undefined;
    /* functional template */
    const __vue_is_functional_template__$A = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$A = normalizeComponent(
      { render: __vue_render__$t, staticRenderFns: __vue_staticRenderFns__$t },
      __vue_inject_styles__$A,
      __vue_script__$A,
      __vue_scope_id__$A,
      __vue_is_functional_template__$A,
      __vue_module_identifier__$A,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgRestQuery = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$A
  });

  var script$A = Vue.mgComponent('mgSeperator', {
    meta: {
      title: 'Seperator',
      icon: 'far fa-minus',
      category: 'General Decoration'
    }
  });

  /* script */
  const __vue_script__$B = script$A;

  /* template */
  var __vue_render__$u = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("hr", { staticClass: "mg-seperator" })
  };
  var __vue_staticRenderFns__$u = [];
  __vue_render__$u._withStripped = true;

    /* style */
    const __vue_inject_styles__$B = function (inject) {
      if (!inject) return
      inject("data-v-294de21a_0", { source: "\n.mg-seperator {\n\tmargin-top: 0px;\n\tmargin-bottom: 10px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgSeperator.vue"],"names":[],"mappings":";AAeA;CACA,eAAA;CACA,mBAAA;AACA","file":"mgSeperator.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgSeperator', {\n\tmeta: {\n\t\ttitle: 'Seperator',\n\t\ticon: 'far fa-minus',\n\t\tcategory: 'General Decoration',\n\t},\n});\n</script>\n\n<template>\n\t<hr class=\"mg-seperator\"/>\n</template>\n\n<style>\n.mg-seperator {\n\tmargin-top: 0px;\n\tmargin-bottom: 10px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$B = undefined;
    /* module identifier */
    const __vue_module_identifier__$B = undefined;
    /* functional template */
    const __vue_is_functional_template__$B = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$B = normalizeComponent(
      { render: __vue_render__$u, staticRenderFns: __vue_staticRenderFns__$u },
      __vue_inject_styles__$B,
      __vue_script__$B,
      __vue_scope_id__$B,
      __vue_is_functional_template__$B,
      __vue_module_identifier__$B,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgSeperator = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$B
  });

  var script$B = Vue.mgComponent('mgTable', {
    meta: {
      title: 'Table layout',
      icon: 'far fa-table',
      category: 'Layout'
    },
    data: function data() {
      return {
        newRow: [],
        isAdding: false
      };
    },
    props: {
      url: {
        type: 'mgUrl',
        relative: true,
        help: 'Data feed to populate the table'
      },
      allowAdd: {
        type: 'mgToggle',
        title: 'Allow Row Addition',
        "default": true
      },
      allowDelete: {
        type: 'mgToggle',
        title: 'Allow Row Deletion',
        "default": true
      },
      textEmpty: {
        type: 'mgText',
        title: 'No data message',
        "default": 'No data'
      },
      items: {
        type: 'mgAlert',
        vueType: 'array',
        text: 'Use the editor to define child widgets',
        "default": [
          /* e.g.
          {id: 'col1', type: 'mgText'},
          {id: 'col2', title: 'mgText'},
          {id: 'col3', title: 'mgText'},
          */
        ]
      },
      addButtonActiveClass: {
        type: 'mgText',
        "default": 'btn btn-block btn-success fa fa-plus',
        advanced: true
      },
      addButtonInactiveClass: {
        type: 'mgText',
        "default": 'btn btn-block btn-disabled fa fa-plus',
        advanced: true
      },
      rowNumbers: {
        type: 'mgToggle',
        help: 'Show the row number at the beginning of each row',
        "default": true
      }
    },
    childProps: {
      showTitle: {
        type: 'mgToggle',
        "default": false,
        title: 'Show Title'
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$watch('$props.url', function () {
        if (!_this.$props.url) return;

        _this.$macgyver.utils.fetch(_this.$props.url, {
          type: 'array'
        }).then(function (data) {
          return _this.$set(_this.$props, 'data', data);
        });
      }, {
        immediate: true
      });
    },
    watch: {
      data: {
        // FIXME: deep?
        immediate: true,
        handler: function handler() {
          // Ensure that data is always an array
          if (!_.isArray(this.data)) this.data = [];
        }
      }
    },
    methods: {
      createRow: function createRow(offset) {
        // Offset is the row to create after - i.e. array position splice
        console.log("FIXME: createRow(".concat(offset, ")"));
      },
      deleteRow: function deleteRow(offset) {
        console.log("FIXME: deleteRow(".concat(offset, ")"));
      }
    }
  });

  /* script */
  const __vue_script__$C = script$B;

  /* template */
  var __vue_render__$v = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "table",
      { staticClass: "table table-bordered table-striped table-hover" },
      [
        _c("thead", [
          _c(
            "tr",
            [
              _vm.$props.rowNumbers
                ? _c("th", { staticClass: "row-number" }, [_vm._v("#")])
                : _vm._e(),
              _vm._v(" "),
              _vm._l(_vm.$props.items, function(col) {
                return _c(
                  "th",
                  {
                    key: col.id,
                    style:
                      (col.width ? "width: " + col.width + "; " : "") + col.class
                  },
                  [_vm._v("\n\t\t\t\t" + _vm._s(col.title) + "\n\t\t\t")]
                )
              }),
              _vm._v(" "),
              _c("th", { staticClass: "btn-context" })
            ],
            2
          )
        ]),
        _vm._v(" "),
        _c(
          "tbody",
          [
            !_vm.data || !_vm.data.length
              ? _c("tr", [
                  _c(
                    "td",
                    {
                      attrs: {
                        colspan:
                          _vm.$props.items.length +
                          (_vm.$props.rowNumbers ? 2 : 1)
                      }
                    },
                    [
                      _c("div", { staticClass: "alert alert-warning m-10" }, [
                        _vm._v(_vm._s(_vm.$props.textEmpty || "No data"))
                      ])
                    ]
                  )
                ])
              : _vm._e(),
            _vm._v(" "),
            _vm._l(_vm.data, function(row, rowNumber) {
              return _c(
                "tr",
                [
                  _vm.$props.rowNumbers
                    ? _c("td", { staticClass: "row-number" }, [
                        _vm._v(
                          "\n\t\t\t\t" +
                            _vm._s(_vm._f("number")(rowNumber + 1)) +
                            "\n\t\t\t"
                        )
                      ])
                    : _vm._e(),
                  _vm._v(" "),
                  _vm._l(_vm.$props.items, function(col) {
                    return _c(
                      "td",
                      { key: col.id, class: col.class },
                      [
                        _c("mg-component", {
                          attrs: { form: _vm.$props.form, config: col }
                        })
                      ],
                      1
                    )
                  }),
                  _vm._v(" "),
                  _c("td", { staticClass: "btn-context" }, [
                    _c("div", { staticClass: "btn-group" }, [
                      _vm._m(0, true),
                      _vm._v(" "),
                      _c("ul", { staticClass: "dropdown-menu pull-right" }, [
                        _c("li", [
                          _c(
                            "a",
                            {
                              on: {
                                click: function($event) {
                                  return _vm.createRow(rowNumber)
                                }
                              }
                            },
                            [
                              _c("i", { staticClass: "far fa-arrow-circle-up" }),
                              _vm._v(" Add row above")
                            ]
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c(
                            "a",
                            {
                              on: {
                                click: function($event) {
                                  return _vm.createRow(rowNumber)
                                }
                              }
                            },
                            [
                              _c("i", {
                                staticClass: "far fa-arrow-circle-down"
                              }),
                              _vm._v(" Add row below")
                            ]
                          )
                        ]),
                        _vm._v(" "),
                        _vm.$props.allowDelete
                          ? _c("li", { staticClass: "dropdown-divider" })
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.$props.allowDelete
                          ? _c("li", { staticClass: "dropdown-item-danger" }, [
                              _c(
                                "a",
                                {
                                  on: {
                                    click: function($event) {
                                      return _vm.deleteRow(rowNumber)
                                    }
                                  }
                                },
                                [
                                  _c("i", { staticClass: "far fa-trash" }),
                                  _vm._v(" Delete")
                                ]
                              )
                            ])
                          : _vm._e()
                      ])
                    ])
                  ])
                ],
                2
              )
            }),
            _vm._v(" "),
            _vm.$props.allowAdd
              ? _c(
                  "tr",
                  { staticClass: "mgTable-append" },
                  [
                    _vm.$props.rowNumbers
                      ? _c("td", { staticClass: "row-number" }, [
                          _c("i", { staticClass: "far fa-asterisk" })
                        ])
                      : _vm._e(),
                    _vm._v(" "),
                    _vm._l(_vm.$props.items, function(col, colNumber) {
                      return _c(
                        "td",
                        { key: col.id },
                        [
                          _c("mg-component", {
                            attrs: {
                              form: _vm.$props.form,
                              config: col,
                              data: _vm.newRow[colNumber]
                            }
                          })
                        ],
                        1
                      )
                    }),
                    _vm._v(" "),
                    _c("td", [
                      _c("a", {
                        class: _vm.isAdding
                          ? _vm.$props.addButtonActiveClass
                          : _vm.$props.addButtonInactiveClass,
                        on: {
                          click: function($event) {
                            return _vm.createRow()
                          }
                        }
                      })
                    ])
                  ],
                  2
                )
              : _vm._e()
          ],
          2
        )
      ]
    )
  };
  var __vue_staticRenderFns__$v = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "a",
        { staticClass: "btn btn-context", attrs: { "data-toggle": "dropdown" } },
        [_c("i", { staticClass: "far fa-ellipsis-v" })]
      )
    }
  ];
  __vue_render__$v._withStripped = true;

    /* style */
    const __vue_inject_styles__$C = function (inject) {
      if (!inject) return
      inject("data-v-94732048_0", { source: "\n.mg-table .row-number {\n\tfont-size: 16px;\n\ttext-align: middle;\n}\n.mg-table td.row-number {\n\tmargin-top: 14px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgTable.vue"],"names":[],"mappings":";AA0HA;CACA,eAAA;CACA,kBAAA;AACA;AAEA;CACA,gBAAA;AACA","file":"mgTable.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgTable', {\n\tmeta: {\n\t\ttitle: 'Table layout',\n\t\ticon: 'far fa-table',\n\t\tcategory: 'Layout',\n\t},\n\tdata() { return {\n\t\tnewRow: [],\n\t\tisAdding: false,\n\t}},\n\tprops: {\n\t\turl: {type: 'mgUrl', relative: true, help: 'Data feed to populate the table'},\n\t\tallowAdd: {type: 'mgToggle', title: 'Allow Row Addition', default: true},\n\t\tallowDelete: {type: 'mgToggle', title: 'Allow Row Deletion', default: true},\n\t\ttextEmpty: {type: 'mgText', title: 'No data message', default: 'No data'},\n\t\titems: {\n\t\t\ttype: 'mgAlert',\n\t\t\tvueType: 'array',\n\t\t\ttext: 'Use the editor to define child widgets',\n\t\t\tdefault: [\n\t\t\t\t/* e.g.\n\t\t\t\t{id: 'col1', type: 'mgText'},\n\t\t\t\t{id: 'col2', title: 'mgText'},\n\t\t\t\t{id: 'col3', title: 'mgText'},\n\t\t\t\t*/\n\t\t\t],\n\t\t},\n\t\taddButtonActiveClass: {type: 'mgText', default: 'btn btn-block btn-success fa fa-plus', advanced: true},\n\t\taddButtonInactiveClass: {type: 'mgText', default: 'btn btn-block btn-disabled fa fa-plus', advanced: true},\n\t\trowNumbers: {type: 'mgToggle', help: 'Show the row number at the beginning of each row', default: true},\n\t},\n\tchildProps: {\n\t\tshowTitle: {type: 'mgToggle', default: false, title: 'Show Title'},\n\t},\n\tmounted() {\n\t\tthis.$watch('$props.url', ()=> {\n\t\t\tif (!this.$props.url) return;\n\t\t\tthis.$macgyver.utils.fetch(this.$props.url, {type: 'array'})\n\t\t\t\t.then(data => this.$set(this.$props, 'data', data))\n\t\t}, {immediate: true});\n\t},\n\twatch: {\n\t\tdata: {\n\t\t\t// FIXME: deep?\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\t// Ensure that data is always an array\n\t\t\t\tif (!_.isArray(this.data)) this.data = [];\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\tcreateRow(offset) { // Offset is the row to create after - i.e. array position splice\n\t\t\tconsole.log(`FIXME: createRow(${offset})`);\n\t\t},\n\t\tdeleteRow(offset) {\n\t\t\tconsole.log(`FIXME: deleteRow(${offset})`);\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<table class=\"table table-bordered table-striped table-hover\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th v-if=\"$props.rowNumbers\" class=\"row-number\">#</th>\n\t\t\t\t<th v-for=\"col in $props.items\" :key=\"col.id\" :style=\"(col.width ? 'width: ' + col.width + '; ' : '') + col.class\">\n\t\t\t\t\t{{col.title}}\n\t\t\t\t</th>\n\t\t\t\t<th class=\"btn-context\"></th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr v-if=\"!data || !data.length\">\n\t\t\t\t<td :colspan=\"$props.items.length + ($props.rowNumbers ? 2 : 1)\">\n\t\t\t\t\t<div class=\"alert alert-warning m-10\">{{$props.textEmpty || 'No data'}}</div>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr v-for=\"(row, rowNumber) in data\">\n\t\t\t\t<td v-if=\"$props.rowNumbers\" class=\"row-number\">\n\t\t\t\t\t{{rowNumber + 1 | number}}\n\t\t\t\t</td>\n\t\t\t\t<td v-for=\"col in $props.items\" :key=\"col.id\" :class=\"col.class\">\n\t\t\t\t\t<mg-component\n\t\t\t\t\t\t:form=\"$props.form\"\n\t\t\t\t\t\t:config=\"col\"\n\t\t\t\t\t/>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"btn-context\">\n\t\t\t\t\t<div class=\"btn-group\">\n\t\t\t\t\t\t<a class=\"btn btn-context\" data-toggle=\"dropdown\"><i class=\"far fa-ellipsis-v\"></i></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu pull-right\">\n\t\t\t\t\t\t\t<li><a @click=\"createRow(rowNumber)\"><i class=\"far fa-arrow-circle-up\"></i> Add row above</a></li>\n\t\t\t\t\t\t\t<li><a @click=\"createRow(rowNumber)\"><i class=\"far fa-arrow-circle-down\"></i> Add row below</a></li>\n\t\t\t\t\t\t\t<li v-if=\"$props.allowDelete\" class=\"dropdown-divider\"></li>\n\t\t\t\t\t\t\t<li v-if=\"$props.allowDelete\" class=\"dropdown-item-danger\"><a @click=\"deleteRow(rowNumber)\"><i class=\"far fa-trash\"></i> Delete</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr class=\"mgTable-append\" v-if=\"$props.allowAdd\">\n\t\t\t\t<td v-if=\"$props.rowNumbers\" class=\"row-number\">\n\t\t\t\t\t<i class=\"far fa-asterisk\"></i>\n\t\t\t\t</td>\n\t\t\t\t<td v-for=\"(col, colNumber) in $props.items\" :key=\"col.id\">\n\t\t\t\t\t<mg-component\n\t\t\t\t\t\t:form=\"$props.form\"\n\t\t\t\t\t\t:config=\"col\"\n\t\t\t\t\t\t:data=\"newRow[colNumber]\"\n\t\t\t\t\t/>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<a @click=\"createRow()\" :class=\"isAdding ? $props.addButtonActiveClass : $props.addButtonInactiveClass\"></a>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</template>\n\n<style>\n.mg-table .row-number {\n\tfont-size: 16px;\n\ttext-align: middle;\n}\n\n.mg-table td.row-number {\n\tmargin-top: 14px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$C = undefined;
    /* module identifier */
    const __vue_module_identifier__$C = undefined;
    /* functional template */
    const __vue_is_functional_template__$C = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$C = normalizeComponent(
      { render: __vue_render__$v, staticRenderFns: __vue_staticRenderFns__$v },
      __vue_inject_styles__$C,
      __vue_script__$C,
      __vue_scope_id__$C,
      __vue_is_functional_template__$C,
      __vue_module_identifier__$C,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgTable = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$C
  });

  var script$C = Vue.mgComponent('mgTextArea', {
    meta: {
      title: 'Multi-line text',
      icon: 'fa fa-align-justify',
      category: 'Simple Inputs',
      preferId: true
    },
    props: {
      rows: {
        type: 'mgNumber',
        title: 'Line height',
        "default": 3
      },
      lengthMin: {
        type: 'mgNumber',
        title: 'Minimum Length',
        min: 0
      },
      lengthMax: {
        type: 'mgNumber',
        title: 'Maximum Length'
      },
      placeholder: {
        type: 'mgTextArea',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.lengthMin && _.isString(_this.data) && _this.data.length < _this.$props.lengthMin) return reply("".concat(_this.$props.title, " is too small (minimum length is ").concat(_this.$props.lengthMin, ")"));
        if (_this.$props.lengthMax && _.isString(_this.data) && _this.data.length > _this.$props.lengthMax) return reply("".concat(_this.$props.title, " is too long (maximum length is ").concat(_this.$props.lengthMax, ")"));
      });
    }
  });

  /* script */
  const __vue_script__$D = script$C;

  /* template */
  var __vue_render__$w = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("textarea", {
      directives: [
        { name: "model", rawName: "v-model", value: _vm.data, expression: "data" }
      ],
      staticClass: "form-control",
      attrs: {
        placeholder: _vm.$props.placeholder,
        minlength: _vm.$props.lengthMin,
        maxlength: _vm.$props.lengthMin,
        rows: _vm.$props.rows,
        autocomplete: "off"
      },
      domProps: { value: _vm.data },
      on: {
        input: function($event) {
          if ($event.target.composing) {
            return
          }
          _vm.data = $event.target.value;
        }
      }
    })
  };
  var __vue_staticRenderFns__$w = [];
  __vue_render__$w._withStripped = true;

    /* style */
    const __vue_inject_styles__$D = undefined;
    /* scoped */
    const __vue_scope_id__$D = undefined;
    /* module identifier */
    const __vue_module_identifier__$D = undefined;
    /* functional template */
    const __vue_is_functional_template__$D = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$D = normalizeComponent(
      { render: __vue_render__$w, staticRenderFns: __vue_staticRenderFns__$w },
      __vue_inject_styles__$D,
      __vue_script__$D,
      __vue_scope_id__$D,
      __vue_is_functional_template__$D,
      __vue_module_identifier__$D,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgTextArea = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$D
  });

  var vueInputFacade_umd_min = createCommonjsModule(function (module, exports) {
  (function(e,t){module.exports=t();})("undefined"!==typeof self?self:commonjsGlobal,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r});},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="fb15")}({"0cfb":function(e,t,n){var r=n("83ab"),o=n("d039"),i=n("cc12");e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}));},"25f0":function(e,t,n){var r=n("6eeb"),o=n("825a"),i=n("d039"),a=n("ad6d"),u="toString",c=RegExp.prototype,s=c[u],f=i((function(){return "/a/b"!=s.call({source:"a",flags:"b"})})),l=s.name!=u;(f||l)&&r(RegExp.prototype,u,(function(){var e=o(this),t=String(e.source),n=e.flags,r=String(void 0===n&&e instanceof RegExp&&!("flags"in c)?a.call(e):n);return "/"+t+"/"+r}),{unsafe:!0});},5135:function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)};},5692:function(e,t,n){var r=n("c430"),o=n("c6cd");(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.4.2",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"});},"5c6c":function(e,t){e.exports=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}};},"69f3":function(e,t,n){var r,o,i,a=n("7f9a"),u=n("da84"),c=n("861d"),s=n("9112"),f=n("5135"),l=n("f772"),d=n("d012"),p=u.WeakMap,m=function(e){return i(e)?o(e):r(e,{})},v=function(e){return function(t){var n;if(!c(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}};if(a){var h=new p,g=h.get,b=h.has,y=h.set;r=function(e,t){return y.call(h,e,t),t},o=function(e){return g.call(h,e)||{}},i=function(e){return b.call(h,e)};}else{var k=l("state");d[k]=!0,r=function(e,t){return s(e,k,t),t},o=function(e){return f(e,k)?e[k]:{}},i=function(e){return f(e,k)};}e.exports={set:r,get:o,has:i,enforce:m,getterFor:v};},"6eeb":function(e,t,n){var r=n("da84"),o=n("5692"),i=n("9112"),a=n("5135"),u=n("ce4e"),c=n("9e81"),s=n("69f3"),f=s.get,l=s.enforce,d=String(c).split("toString");o("inspectSource",(function(e){return c.call(e)})),(e.exports=function(e,t,n,o){var c=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof n&&("string"!=typeof t||a(n,"name")||i(n,"name",t),l(n).source=d.join("string"==typeof t?t:"")),e!==r?(c?!f&&e[t]&&(s=!0):delete e[t],s?e[t]=n:i(e,t,n)):s?e[t]=n:u(t,n);})(Function.prototype,"toString",(function(){return "function"==typeof this&&f(this).source||c.call(this)}));},"7f9a":function(e,t,n){var r=n("da84"),o=n("9e81"),i=r.WeakMap;e.exports="function"===typeof i&&/native code/.test(o.call(i));},"825a":function(e,t,n){var r=n("861d");e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e};},"83ab":function(e,t,n){var r=n("d039");e.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}));},"861d":function(e,t){e.exports=function(e){return "object"===typeof e?null!==e:"function"===typeof e};},"90e3":function(e,t){var n=0,r=Math.random();e.exports=function(e){return "Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)};},9112:function(e,t,n){var r=n("83ab"),o=n("9bf2"),i=n("5c6c");e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e};},"9bf2":function(e,t,n){var r=n("83ab"),o=n("0cfb"),i=n("825a"),a=n("c04e"),u=Object.defineProperty;t.f=r?u:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return u(e,t,n)}catch(r){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return "value"in n&&(e[t]=n.value),e};},"9e81":function(e,t,n){var r=n("5692");e.exports=r("native-function-to-string",Function.toString);},ad6d:function(e,t,n){var r=n("825a");e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};},c04e:function(e,t,n){var r=n("861d");e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")};},c430:function(e,t){e.exports=!1;},c6cd:function(e,t,n){var r=n("da84"),o=n("ce4e"),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a;},c8ba:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")();}catch(r){"object"===typeof window&&(n=window);}e.exports=n;},cc12:function(e,t,n){var r=n("da84"),o=n("861d"),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}};},ce4e:function(e,t,n){var r=n("da84"),o=n("9112");e.exports=function(e,t){try{o(r,e,t);}catch(n){r[e]=t;}return t};},d012:function(e,t){e.exports={};},d039:function(e,t){e.exports=function(e){try{return !!e()}catch(t){return !0}};},da84:function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")();}).call(this,n("c8ba"));},f772:function(e,t,n){var r=n("5692"),o=n("90e3"),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))};},fb15:function(e,t,n){var r;(n.r(t),"undefined"!==typeof window)&&((r=window.document.currentScript)&&(r=r.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))&&(n.p=r[1]));var o={"#":{pattern:/\d/},X:{pattern:/[0-9a-z]/i},S:{pattern:/[a-z]/i},A:{pattern:/[a-z]/i,transform:e=>e.toLocaleUpperCase()},a:{pattern:/[a-z]/i,transform:e=>e.toLocaleLowerCase()},"\\":{escape:!0}};n("25f0");const i="__input-facade__";function a(e=""){this.masked=this.raw=e;}function u(){return new CustomEvent("input",{bubbles:!0,cancelable:!0,detail:{facade:!0}})}function c(e={}){return (Array.isArray(e)||"string"===typeof e)&&(e={mask:e}),e}function s(e){const t=e instanceof HTMLInputElement?e:e.querySelector("input");if(!t)throw new Error("facade directive requires an input element");return t}function f(e){const{target:t,detail:n}=e;if(n&&n.facade)return !1;e.stopPropagation();const r=t.value,o=t.selectionEnd;d(t,{emit:!1}),l(e,r,o),t.dispatchEvent(u());}function l(e,t,n){const{target:r}=e,o=["text","tel","search",null].includes(r.getAttribute("type")),a=r[i]&&r[i].config;if(r!==document.activeElement||!o||!a.mask)return;const u="insertFromPaste"===e.inputType,c=(e.data||u)&&n==t.length;let s=t[n-1];const f=r.value.toLocaleLowerCase();let l=n;if(c)l=f.length;else if(s){s=s.toLocaleLowerCase();let e=l;while(e<=f.length&&f.charAt(e-1)!==s)e++;l=e<=f.length?e:l-1;}r.setSelectionRange(l,l),setTimeout((function(){r.setSelectionRange(l,l);}),0);}function d(e,{emit:t=!0,force:n=!1}={}){const{config:r,oldValue:o}=e[i];if(n||o!==e.value){const n=g(e.value,r);e[i].oldValue=n.masked,e.value!==n.masked&&(e.value=n.masked),e.unmaskedValue=n.raw,t&&e.dispatchEvent(u());}}let p=o;function m(e){p=e;}function v(e,t={}){const n=t.masks.slice().sort((e,t)=>e.length-t.length),r=e=>Object.assign({},t,e),o=(t,n)=>{const o=h(e,r({mask:n,short:!0}));return o.masked.length>t.length};for(let i=0;i<n.length;i++){const t=n[i],a=n[i+1];if(!a||!o(t,a))return h(e,r({mask:t}))}return new a}function h(e="",t={}){let{mask:n="",tokens:r,short:o=!1}=t;r=r?Object.assign({},p,r):p,e=e.toString();let i=new a,u=!1,c=0,s=0,f="";while(s<n.length){const t=n[s],a=r[t];let l=e[c];if(!l&&(o||a))break;if(a&&!u){if(a.escape){u=!0,s++;continue}a.pattern.test(l)&&(l=a.transform?a.transform(l):l,i.raw+=l,i.masked+=f+l,f="",s++),c++;}else f+=t,l===t&&c++,u=!1,s++;}return i.raw&&!o&&(i.masked+=f),i}function g(e,t){return t=c(t),t.mask?Array.isArray(t.mask)?v(e,Object.assign({},t,{masks:t.mask})):h(e,t):new a(e)}const b=i;var y={bind:function(e,t){e=s(e),e.addEventListener("input",f,!0),e[b]={config:c(t.value)},d(e);},update:(e,{value:t,oldValue:n})=>{e=s(e),t!==n?(e[b].config=c(t),d(e,{force:!0})):d(e);},unbind:e=>e.removeEventListener("input",f,!0)},k=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{directives:[{name:"facade",rawName:"v-facade",value:e.config,expression:"config"}],attrs:{type:"text"},domProps:{value:e.maskedValue},on:{input:e.input,blur:function(t){return e.$emit("blur")},focus:function(t){return e.$emit("focus")}}})},w=[],x={name:"InputFacade",props:{mask:[String,Array],masked:{type:Boolean,default:!1},tokens:Object,value:[String,Number]},directives:{facade:y},data(){return {emittedValue:this.value,maskedValue:this.value,unmaskedValue:null}},watch:{value(e){e!==this.emittedValue&&(this.maskedValue=e);},mask(e){e||(this.maskedValue=this.unmaskedValue);},masked(){this.refresh();}},computed:{config(){return {mask:this.mask,tokens:this.tokens}}},methods:{input({target:e}){this.maskedValue=e.value,this.unmaskedValue=e.unmaskedValue,this.refresh();},refresh(){let e=this.mask&&this.masked?this.maskedValue:this.unmaskedValue;this.emittedValue!==e&&(this.emittedValue=e,this.$emit("input",e));}}},_=x;function S(e,t,n,r,o,i,a,u){var c,s="function"===typeof e?e.options:e;if(t&&(s.render=t,s.staticRenderFns=n,s._compiled=!0),r&&(s.functional=!0),i&&(s._scopeId="data-v-"+i),a?(c=function(e){e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,e||"undefined"===typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a);},s._ssrRegister=c):o&&(c=u?function(){o.call(this,this.$root.$options.shadowRoot);}:o),c)if(s.functional){s._injectStyles=c;var f=s.render;s.render=function(e,t){return c.call(t),f(e,t)};}else{var l=s.beforeCreate;s.beforeCreate=l?[].concat(l,c):[c];}return {exports:e,options:s}}var j=S(_,k,w,!1,null,null,null),E=j.exports;function V(e,t={}){t.tokens&&m(t.tokens),e.component(E.name,E),e.directive(t.name||"facade",y),e.filter(t.name||"facade",O);}function O(e,t){return g(e,t).masked}var T=V;"undefined"!==typeof window&&window.Vue&&window.Vue.use(V),n.d(t,"InputFacade",(function(){return E})),n.d(t,"facade",(function(){return y})),n.d(t,"tokens",(function(){return o})),n.d(t,"masker",(function(){return g})),n.d(t,"filter",(function(){return O}));t["default"]=T;}})}));
  });

  var InputFacade = unwrapExports(vueInputFacade_umd_min);

  Vue.use(InputFacade);
  var script$D = Vue.mgComponent('mgText', {
    meta: {
      title: 'Text',
      icon: 'far fa-edit',
      category: 'Simple Inputs',
      preferId: true,
      format: true,
      shorthand: ['string', 'str']
    },
    props: {
      lengthMin: {
        type: 'mgNumber',
        title: 'Minimum Length',
        min: 0
      },
      lengthMax: {
        type: 'mgNumber',
        title: 'Maximum Length'
      },
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      },
      mask: {
        type: 'mgText',
        help: 'Text input mask to restrict to, #=Number, S=Letter, X=Alpha-numeric, A=Alpha Uppercase, a=Alpha lowercase, \=Escape'
      },
      focus: {
        type: 'mgToggle',
        "default": false,
        help: 'Auto-focus the element when it appears on screen'
      },
      autoComplete: {
        type: 'mgChoiceDropdown',
        help: 'Allow auto-complete value propagation',
        "default": 'off',
        advanced: true,
        "enum": [{
          id: 'on',
          title: 'Automatic'
        }, {
          id: 'name',
          title: 'Name'
        }, {
          id: 'email',
          title: 'Email'
        }, {
          id: 'username',
          title: 'Username'
        }, {
          id: 'street-address',
          title: 'Street address'
        }, {
          id: 'address-line1',
          title: 'Address line 1'
        }, {
          id: 'address-line2',
          title: 'Address line 2'
        }, {
          id: 'address-line3',
          title: 'Address line 3'
        }, {
          id: 'address-level1',
          title: 'Address level 1'
        }, {
          id: 'address-level2',
          title: 'Address level 2'
        }, {
          id: 'address-level3',
          title: 'Address level 3'
        }, {
          id: 'address-level4',
          title: 'Address level 4'
        }, {
          id: 'country',
          title: 'Country code'
        }, {
          id: 'country-name',
          title: 'Country name'
        }, {
          id: 'postal-code',
          title: 'Postcode'
        }]
      },
      "enum": {
        type: 'mgTable',
        title: 'Suggested items',
        items: [{
          id: 'title',
          type: 'mgText',
          required: true
        }]
      }
    },
    computed: {
      datalist: function datalist() {
        // Map $props.enum into a collection of the form {id, title}
        if (!this.$props["enum"] || !this.$props["enum"].length) return;
        return this.$props["enum"].map(function (i) {
          if (_.isString(i)) return {
            id: i,
            title: i
          };
          return i;
        });
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.lengthMin && _.isString(_this.data) && _this.data.length < _this.$props.lengthMin) return reply("".concat(_this.$props.title, " is too small (minimum length is ").concat(_this.$props.lengthMin, ")"));
        if (_this.$props.lengthMax && _.isString(_this.data) && _this.data.length > _this.$props.lengthMax) return reply("".concat(_this.$props.title, " is too long (maximum length is ").concat(_this.$props.lengthMax, ")"));
      });
    },
    mounted: function mounted() {
      if (this.$props.focus) {
        var $el = $(this.$el);

        var focusVisible = function focusVisible() {
          if ($el.is(':visible')) {
            $el.focus();
          } else {
            setTimeout(focusVisible, 100);
          }
        };

        focusVisible();
      }
    }
  });

  /* script */
  const __vue_script__$E = script$D;

  /* template */
  var __vue_render__$x = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mg-text" }, [
      _c("input", {
        directives: [
          {
            name: "model",
            rawName: "v-model",
            value: _vm.data,
            expression: "data"
          },
          {
            name: "facade",
            rawName: "v-facade",
            value: _vm.$props.mask,
            expression: "$props.mask"
          }
        ],
        staticClass: "form-control",
        attrs: {
          type: "text",
          autocomplete: _vm.$props.autoComplete,
          placeholder: _vm.$props.placeholder,
          list: _vm.datalist ? "mg-text-datalist-" + _vm._uid : undefined
        },
        domProps: { value: _vm.data },
        on: {
          input: function($event) {
            if ($event.target.composing) {
              return
            }
            _vm.data = $event.target.value;
          }
        }
      }),
      _vm._v(" "),
      _vm.datalist
        ? _c(
            "datalist",
            { attrs: { id: "mg-text-datalist-" + _vm._uid } },
            _vm._l(_vm.datalist, function(item) {
              return _c("option", { domProps: { value: item.title } }, [
                _vm._v("\n\t\t\t" + _vm._s(item.title) + "\n\t\t")
              ])
            }),
            0
          )
        : _vm._e()
    ])
  };
  var __vue_staticRenderFns__$x = [];
  __vue_render__$x._withStripped = true;

    /* style */
    const __vue_inject_styles__$E = undefined;
    /* scoped */
    const __vue_scope_id__$E = undefined;
    /* module identifier */
    const __vue_module_identifier__$E = undefined;
    /* functional template */
    const __vue_is_functional_template__$E = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$E = normalizeComponent(
      { render: __vue_render__$x, staticRenderFns: __vue_staticRenderFns__$x },
      __vue_inject_styles__$E,
      __vue_script__$E,
      __vue_scope_id__$E,
      __vue_is_functional_template__$E,
      __vue_module_identifier__$E,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgText = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$E
  });

  var script$E = Vue.mgComponent('mgTime', {
    meta: {
      title: 'Time selection',
      icon: 'fa fa-clock',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        if (!v) return '';
        var d = v instanceof Date ? v : new Date(v);
        return d.toLocaleTimeString();
      },
      formatClass: 'text-center'
    },
    props: {
      min: {
        type: 'mgTime',
        title: 'Earliest time'
      },
      max: {
        type: 'mgNumber',
        title: 'Latest time'
      },
      required: {
        type: 'mgToggle',
        "default": false
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
        if (_this.$props.min && _.isString(_this.data) && _this.data < _this.$props.min) return reply("".concat(_this.$props.title, " is too early (earliest time is ").concat(_this.$props.min, ")"));
        if (_this.$props.max && _.isString(_this.data) && _this.data > _this.$props.max) return reply("".concat(_this.$props.title, " is too late (latest time is ").concat(_this.$props.max, ")"));
      });
    }
  });

  /* script */
  const __vue_script__$F = script$E;

  /* template */
  var __vue_render__$y = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("input", {
      directives: [
        { name: "model", rawName: "v-model", value: _vm.data, expression: "data" }
      ],
      staticClass: "form-control",
      attrs: { type: "time" },
      domProps: { value: _vm.data },
      on: {
        input: function($event) {
          if ($event.target.composing) {
            return
          }
          _vm.data = $event.target.value;
        }
      }
    })
  };
  var __vue_staticRenderFns__$y = [];
  __vue_render__$y._withStripped = true;

    /* style */
    const __vue_inject_styles__$F = undefined;
    /* scoped */
    const __vue_scope_id__$F = undefined;
    /* module identifier */
    const __vue_module_identifier__$F = undefined;
    /* functional template */
    const __vue_is_functional_template__$F = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$F = normalizeComponent(
      { render: __vue_render__$y, staticRenderFns: __vue_staticRenderFns__$y },
      __vue_inject_styles__$F,
      __vue_script__$F,
      __vue_scope_id__$F,
      __vue_is_functional_template__$F,
      __vue_module_identifier__$F,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$F
  });

  var dist = createCommonjsModule(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory();
  })(commonjsGlobal, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// identity function for calling harmony imports with the correct context
  /******/ 	__webpack_require__.i = function(value) { return value; };
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, {
  /******/ 				configurable: false,
  /******/ 				enumerable: true,
  /******/ 				get: getter
  /******/ 			});
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "/dist/";
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 2);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, exports, __webpack_require__) {


  /* styles */
  __webpack_require__(8);

  var Component = __webpack_require__(6)(
    /* script */
    __webpack_require__(1),
    /* template */
    __webpack_require__(7),
    /* scopeId */
    "data-v-25adc6c0",
    /* cssModules */
    null
  );

  module.exports = Component.exports;


  /***/ }),
  /* 1 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(3);
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //



  var DEFAULT_COLOR_CHECKED = '#75c791';
  var DEFAULT_COLOR_UNCHECKED = '#bfcbd9';
  var DEFAULT_LABEL_CHECKED = 'on';
  var DEFAULT_LABEL_UNCHECKED = 'off';
  var DEFAULT_SWITCH_COLOR = '#fff';

  /* harmony default export */ __webpack_exports__["default"] = ({
    name: 'ToggleButton',
    props: {
      value: {
        type: Boolean,
        default: false
      },
      name: {
        type: String
      },
      disabled: {
        type: Boolean,
        default: false
      },
      tag: {
        type: String
      },
      sync: {
        type: Boolean,
        default: false
      },
      speed: {
        type: Number,
        default: 300
      },
      color: {
        type: [String, Object],
        validator: function validator(value) {
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* isString */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'checked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'unchecked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'disabled');
        }
      },
      switchColor: {
        type: [String, Object],
        validator: function validator(value) {
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* isString */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'checked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'unchecked');
        }
      },
      cssColors: {
        type: Boolean,
        default: false
      },
      labels: {
        type: [Boolean, Object],
        default: false,
        validator: function validator(value) {
          return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value.checked || value.unchecked : typeof value === 'boolean';
        }
      },
      height: {
        type: Number,
        default: 22
      },
      width: {
        type: Number,
        default: 50
      },
      margin: {
        type: Number,
        default: 3
      },
      fontSize: {
        type: Number
      }
    },
    computed: {
      className: function className() {
        var toggled = this.toggled,
            disabled = this.disabled;


        return ['vue-js-switch', {
          toggled: toggled,
          disabled: disabled
        }];
      },
      coreStyle: function coreStyle() {
        return {
          width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.width),
          height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.height),
          backgroundColor: this.cssColors ? null : this.disabled ? this.colorDisabled : this.colorCurrent,
          borderRadius: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(Math.round(this.height / 2))
        };
      },
      buttonRadius: function buttonRadius() {
        return this.height - this.margin * 2;
      },
      distance: function distance() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.width - this.height + this.margin);
      },
      buttonStyle: function buttonStyle() {
        var transition = 'transform ' + this.speed + 'ms';
        var margin = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.margin);

        var transform = this.toggled ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["d" /* translate3d */])(this.distance, margin) : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["d" /* translate3d */])(margin, margin);

        var background = this.switchColor ? this.switchColorCurrent : null;

        return {
          width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.buttonRadius),
          height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.buttonRadius),
          transition: transition,
          transform: transform,
          background: background
        };
      },
      labelStyle: function labelStyle() {
        return {
          lineHeight: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.height),
          fontSize: this.fontSize ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.fontSize) : null
        };
      },
      colorChecked: function colorChecked() {
        var color = this.color;


        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["e" /* isObject */])(color)) {
          return color || DEFAULT_COLOR_CHECKED;
        }

        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(color, 'checked', DEFAULT_COLOR_CHECKED);
      },
      colorUnchecked: function colorUnchecked() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.color, 'unchecked', DEFAULT_COLOR_UNCHECKED);
      },
      colorDisabled: function colorDisabled() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.color, 'disabled', this.colorCurrent);
      },
      colorCurrent: function colorCurrent() {
        return this.toggled ? this.colorChecked : this.colorUnchecked;
      },
      labelChecked: function labelChecked() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.labels, 'checked', DEFAULT_LABEL_CHECKED);
      },
      labelUnchecked: function labelUnchecked() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.labels, 'unchecked', DEFAULT_LABEL_UNCHECKED);
      },
      switchColorChecked: function switchColorChecked() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.switchColor, 'checked', DEFAULT_SWITCH_COLOR);
      },
      switchColorUnchecked: function switchColorUnchecked() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.switchColor, 'unchecked', DEFAULT_SWITCH_COLOR);
      },
      switchColorCurrent: function switchColorCurrent() {
        var switchColor = this.switchColor;


        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["e" /* isObject */])(this.switchColor)) {
          return this.switchColor || DEFAULT_SWITCH_COLOR;
        }

        return this.toggled ? this.switchColorChecked : this.switchColorUnchecked;
      }
    },
    watch: {
      value: function value(_value) {
        if (this.sync) {
          this.toggled = !!_value;
        }
      }
    },
    data: function data() {
      return {
        toggled: !!this.value
      };
    },

    methods: {
      toggle: function toggle(event) {
        var toggled = !this.toggled;

        if (!this.sync) {
          this.toggled = toggled;
        }

        this.$emit('input', toggled);
        this.$emit('change', {
          value: toggled,
          tag: this.tag,
          srcEvent: event
        });
      }
    }
  });

  /***/ }),
  /* 2 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button_vue__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Button_vue__);
  /* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "ToggleButton", function() { return __WEBPACK_IMPORTED_MODULE_0__Button_vue___default.a; });


  var installed = false;

  /* harmony default export */ __webpack_exports__["default"] = ({
    install: function install(Vue) {
      if (installed) {
        return;
      }

      Vue.component('ToggleButton', __WEBPACK_IMPORTED_MODULE_0__Button_vue___default.a);
      installed = true;
    }
  });



  /***/ }),
  /* 3 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isString; });
  /* unused harmony export isBoolean */
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isObject; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return has; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return get; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return px; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return translate3d; });
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var isString = function isString(value) {
    return typeof value === 'string';
  };

  var isObject = function isObject(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
  };

  var has = function has(object, key) {
    return isObject(object) && object.hasOwnProperty(key);
  };

  var get = function get(object, key, defaultValue) {
    return has(object, key) ? object[key] : defaultValue;
  };

  var px = function px(value) {
    return value + 'px';
  };

  var translate3d = function translate3d(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0px';

    return 'translate3d(' + x + ', ' + y + ', ' + z + ')';
  };

  /***/ }),
  /* 4 */
  /***/ (function(module, exports, __webpack_require__) {

  exports = module.exports = __webpack_require__(5)();
  // imports


  // module
  exports.push([module.i, ".vue-js-switch[data-v-25adc6c0]{display:inline-block;position:relative;vertical-align:middle;user-select:none;font-size:10px;cursor:pointer}.vue-js-switch .v-switch-input[data-v-25adc6c0]{opacity:0;position:absolute;width:1px;height:1px}.vue-js-switch .v-switch-label[data-v-25adc6c0]{position:absolute;top:0;font-weight:600;color:#fff;z-index:1}.vue-js-switch .v-switch-label.v-left[data-v-25adc6c0]{left:10px}.vue-js-switch .v-switch-label.v-right[data-v-25adc6c0]{right:10px}.vue-js-switch .v-switch-core[data-v-25adc6c0]{display:block;position:relative;box-sizing:border-box;outline:0;margin:0;transition:border-color .3s,background-color .3s;user-select:none}.vue-js-switch .v-switch-core .v-switch-button[data-v-25adc6c0]{display:block;position:absolute;overflow:hidden;top:0;left:0;border-radius:100%;background-color:#fff;z-index:2}.vue-js-switch.disabled[data-v-25adc6c0]{pointer-events:none;opacity:.6}", ""]);

  // exports


  /***/ }),
  /* 5 */
  /***/ (function(module, exports) {

  /*
  	MIT License http://www.opensource.org/licenses/mit-license.php
  	Author Tobias Koppers @sokra
  */
  // css base code, injected by the css-loader
  module.exports = function() {
  	var list = [];

  	// return the list of modules as css string
  	list.toString = function toString() {
  		var result = [];
  		for(var i = 0; i < this.length; i++) {
  			var item = this[i];
  			if(item[2]) {
  				result.push("@media " + item[2] + "{" + item[1] + "}");
  			} else {
  				result.push(item[1]);
  			}
  		}
  		return result.join("");
  	};

  	// import a list of modules into the list
  	list.i = function(modules, mediaQuery) {
  		if(typeof modules === "string")
  			modules = [[null, modules, ""]];
  		var alreadyImportedModules = {};
  		for(var i = 0; i < this.length; i++) {
  			var id = this[i][0];
  			if(typeof id === "number")
  				alreadyImportedModules[id] = true;
  		}
  		for(i = 0; i < modules.length; i++) {
  			var item = modules[i];
  			// skip already imported module
  			// this implementation is not 100% perfect for weird media query combinations
  			//  when a module is imported multiple times with different media queries.
  			//  I hope this will never occur (Hey this way we have smaller bundles)
  			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
  				if(mediaQuery && !item[2]) {
  					item[2] = mediaQuery;
  				} else if(mediaQuery) {
  					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
  				}
  				list.push(item);
  			}
  		}
  	};
  	return list;
  };


  /***/ }),
  /* 6 */
  /***/ (function(module, exports) {

  // this module is a runtime utility for cleaner component module output and will
  // be included in the final webpack user bundle

  module.exports = function normalizeComponent (
    rawScriptExports,
    compiledTemplate,
    scopeId,
    cssModules
  ) {
    var esModule;
    var scriptExports = rawScriptExports = rawScriptExports || {};

    // ES6 modules interop
    var type = typeof rawScriptExports.default;
    if (type === 'object' || type === 'function') {
      esModule = rawScriptExports;
      scriptExports = rawScriptExports.default;
    }

    // Vue.extend constructor export interop
    var options = typeof scriptExports === 'function'
      ? scriptExports.options
      : scriptExports;

    // render functions
    if (compiledTemplate) {
      options.render = compiledTemplate.render;
      options.staticRenderFns = compiledTemplate.staticRenderFns;
    }

    // scopedId
    if (scopeId) {
      options._scopeId = scopeId;
    }

    // inject cssModules
    if (cssModules) {
      var computed = Object.create(options.computed || null);
      Object.keys(cssModules).forEach(function (key) {
        var module = cssModules[key];
        computed[key] = function () { return module };
      });
      options.computed = computed;
    }

    return {
      esModule: esModule,
      exports: scriptExports,
      options: options
    }
  };


  /***/ }),
  /* 7 */
  /***/ (function(module, exports) {

  module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
    return _c('label', {
      class: _vm.className
    }, [_c('input', {
      staticClass: "v-switch-input",
      attrs: {
        "type": "checkbox",
        "name": _vm.name,
        "disabled": _vm.disabled
      },
      domProps: {
        "checked": _vm.value
      },
      on: {
        "change": function($event) {
          $event.stopPropagation();
          return _vm.toggle($event)
        }
      }
    }), _vm._v(" "), _c('div', {
      staticClass: "v-switch-core",
      style: (_vm.coreStyle)
    }, [_c('div', {
      staticClass: "v-switch-button",
      style: (_vm.buttonStyle)
    })]), _vm._v(" "), (_vm.labels) ? [(_vm.toggled) ? _c('span', {
      staticClass: "v-switch-label v-left",
      style: (_vm.labelStyle)
    }, [_vm._t("checked", [
      [_vm._v(_vm._s(_vm.labelChecked))]
    ])], 2) : _c('span', {
      staticClass: "v-switch-label v-right",
      style: (_vm.labelStyle)
    }, [_vm._t("unchecked", [
      [_vm._v(_vm._s(_vm.labelUnchecked))]
    ])], 2)] : _vm._e()], 2)
  },staticRenderFns: []};

  /***/ }),
  /* 8 */
  /***/ (function(module, exports, __webpack_require__) {

  // style-loader: Adds some css to the DOM by adding a <style> tag

  // load the styles
  var content = __webpack_require__(4);
  if(typeof content === 'string') content = [[module.i, content, '']];
  if(content.locals) module.exports = content.locals;
  // add the styles to the DOM
  var update = __webpack_require__(9)("2283861f", content, true);

  /***/ }),
  /* 9 */
  /***/ (function(module, exports, __webpack_require__) {

  /*
    MIT License http://www.opensource.org/licenses/mit-license.php
    Author Tobias Koppers @sokra
    Modified by Evan You @yyx990803
  */

  var hasDocument = typeof document !== 'undefined';

  if (typeof DEBUG !== 'undefined' && DEBUG) {
    if (!hasDocument) {
      throw new Error(
      'vue-style-loader cannot be used in a non-browser environment. ' +
      "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
    ) }
  }

  var listToStyles = __webpack_require__(10);

  /*
  type StyleObject = {
    id: number;
    parts: Array<StyleObjectPart>
  }

  type StyleObjectPart = {
    css: string;
    media: string;
    sourceMap: ?string
  }
  */

  var stylesInDom = {/*
    [id: number]: {
      id: number,
      refs: number,
      parts: Array<(obj?: StyleObjectPart) => void>
    }
  */};

  var head = hasDocument && (document.head || document.getElementsByTagName('head')[0]);
  var singletonElement = null;
  var singletonCounter = 0;
  var isProduction = false;
  var noop = function () {};

  // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page
  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());

  module.exports = function (parentId, list, _isProduction) {
    isProduction = _isProduction;

    var styles = listToStyles(parentId, list);
    addStylesToDom(styles);

    return function update (newList) {
      var mayRemove = [];
      for (var i = 0; i < styles.length; i++) {
        var item = styles[i];
        var domStyle = stylesInDom[item.id];
        domStyle.refs--;
        mayRemove.push(domStyle);
      }
      if (newList) {
        styles = listToStyles(parentId, newList);
        addStylesToDom(styles);
      } else {
        styles = [];
      }
      for (var i = 0; i < mayRemove.length; i++) {
        var domStyle = mayRemove[i];
        if (domStyle.refs === 0) {
          for (var j = 0; j < domStyle.parts.length; j++) {
            domStyle.parts[j]();
          }
          delete stylesInDom[domStyle.id];
        }
      }
    }
  };

  function addStylesToDom (styles /* Array<StyleObject> */) {
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i];
      var domStyle = stylesInDom[item.id];
      if (domStyle) {
        domStyle.refs++;
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j](item.parts[j]);
        }
        for (; j < item.parts.length; j++) {
          domStyle.parts.push(addStyle(item.parts[j]));
        }
        if (domStyle.parts.length > item.parts.length) {
          domStyle.parts.length = item.parts.length;
        }
      } else {
        var parts = [];
        for (var j = 0; j < item.parts.length; j++) {
          parts.push(addStyle(item.parts[j]));
        }
        stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts };
      }
    }
  }

  function createStyleElement () {
    var styleElement = document.createElement('style');
    styleElement.type = 'text/css';
    head.appendChild(styleElement);
    return styleElement
  }

  function addStyle (obj /* StyleObjectPart */) {
    var update, remove;
    var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]');

    if (styleElement) {
      if (isProduction) {
        // has SSR styles and in production mode.
        // simply do nothing.
        return noop
      } else {
        // has SSR styles but in dev mode.
        // for some reason Chrome can't handle source map in server-rendered
        // style tags - source maps in <style> only works if the style tag is
        // created and inserted dynamically. So we remove the server rendered
        // styles and inject new ones.
        styleElement.parentNode.removeChild(styleElement);
      }
    }

    if (isOldIE) {
      // use singleton mode for IE9.
      var styleIndex = singletonCounter++;
      styleElement = singletonElement || (singletonElement = createStyleElement());
      update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
      remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
    } else {
      // use multi-style-tag mode in all other cases
      styleElement = createStyleElement();
      update = applyToTag.bind(null, styleElement);
      remove = function () {
        styleElement.parentNode.removeChild(styleElement);
      };
    }

    update(obj);

    return function updateStyle (newObj /* StyleObjectPart */) {
      if (newObj) {
        if (newObj.css === obj.css &&
            newObj.media === obj.media &&
            newObj.sourceMap === obj.sourceMap) {
          return
        }
        update(obj = newObj);
      } else {
        remove();
      }
    }
  }

  var replaceText = (function () {
    var textStore = [];

    return function (index, replacement) {
      textStore[index] = replacement;
      return textStore.filter(Boolean).join('\n')
    }
  })();

  function applyToSingletonTag (styleElement, index, remove, obj) {
    var css = remove ? '' : obj.css;

    if (styleElement.styleSheet) {
      styleElement.styleSheet.cssText = replaceText(index, css);
    } else {
      var cssNode = document.createTextNode(css);
      var childNodes = styleElement.childNodes;
      if (childNodes[index]) styleElement.removeChild(childNodes[index]);
      if (childNodes.length) {
        styleElement.insertBefore(cssNode, childNodes[index]);
      } else {
        styleElement.appendChild(cssNode);
      }
    }
  }

  function applyToTag (styleElement, obj) {
    var css = obj.css;
    var media = obj.media;
    var sourceMap = obj.sourceMap;

    if (media) {
      styleElement.setAttribute('media', media);
    }

    if (sourceMap) {
      // https://developer.chrome.com/devtools/docs/javascript-debugging
      // this makes source maps inside style tags work properly in Chrome
      css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
      // http://stackoverflow.com/a/26603875
      css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */';
    }

    if (styleElement.styleSheet) {
      styleElement.styleSheet.cssText = css;
    } else {
      while (styleElement.firstChild) {
        styleElement.removeChild(styleElement.firstChild);
      }
      styleElement.appendChild(document.createTextNode(css));
    }
  }


  /***/ }),
  /* 10 */
  /***/ (function(module, exports) {

  /**
   * Translates the list format produced by css-loader into something
   * easier to manipulate.
   */
  module.exports = function listToStyles (parentId, list) {
    var styles = [];
    var newStyles = {};
    for (var i = 0; i < list.length; i++) {
      var item = list[i];
      var id = item[0];
      var css = item[1];
      var media = item[2];
      var sourceMap = item[3];
      var part = {
        id: parentId + ':' + i,
        css: css,
        media: media,
        sourceMap: sourceMap
      };
      if (!newStyles[id]) {
        styles.push(newStyles[id] = { id: id, parts: [part] });
      } else {
        newStyles[id].parts.push(part);
      }
    }
    return styles
  };


  /***/ })
  /******/ ]);
  });

  });

  var ToggleButton = unwrapExports(dist);

  Vue.use(ToggleButton);
  var script$F = Vue.mgComponent('mgToggle', {
    meta: {
      title: 'Toggle Switch',
      icon: 'far fa-toggle-on',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v, config) {
        return v ? config.onText : config.offText;
      },
      formatClass: 'text-center',
      shorthand: ['boolean', 'switch', 'toggle']
    },
    props: {
      onText: {
        type: 'mgText',
        "default": 'on'
      },
      onColor: {
        type: 'mgColor',
        "default": '#75c791',
        advanced: true
      },
      offText: {
        type: 'mgText',
        "default": 'off'
      },
      offColor: {
        type: 'mgColor',
        "default": '#bfcbd9',
        advanced: true
      },
      switchColor: {
        type: 'mgColor',
        "default": '#fff',
        advanced: true
      },
      disabledColor: {
        type: 'mgColor',
        "default": '#cccccc',
        advanced: true
      }
    },
    methods: {
      change: function change(e) {
        this.$mgForm.$emit('mgChange', {
          path: this.$props.$dataPath,
          value: e.value
        });
      }
    }
  });

  /* script */
  const __vue_script__$G = script$F;

  /* template */
  var __vue_render__$z = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("toggle-button", {
      staticClass: "mg-toggle",
      attrs: {
        value: _vm.data,
        color: {
          checked: _vm.$props.onColor,
          unchecked: _vm.$props.offColor,
          disabled: _vm.$props.disabledColor
        },
        labels: { checked: _vm.$props.onText, unchecked: _vm.$props.offText },
        switchColor: _vm.$props.switchColor
      },
      on: { change: _vm.change }
    })
  };
  var __vue_staticRenderFns__$z = [];
  __vue_render__$z._withStripped = true;

    /* style */
    const __vue_inject_styles__$G = function (inject) {
      if (!inject) return
      inject("data-v-e178e8e0_0", { source: "\n.mg-toggle {\n\tmargin-top: 7px;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgToggle.vue"],"names":[],"mappings":";AA0CA;CACA,eAAA;AACA","file":"mgToggle.vue","sourcesContent":["<script>\nimport ToggleButton from 'vue-js-toggle-button';\nVue.use(ToggleButton);\n\nexport default Vue.mgComponent('mgToggle', {\n\tmeta: {\n\t\ttitle: 'Toggle Switch',\n\t\ticon: 'far fa-toggle-on',\n\t\tcategory: 'Simple Inputs',\n\t\tpreferId: true,\n\t\tformat: (v, config) => v ? config.onText : config.offText,\n\t\tformatClass: 'text-center',\n\t\tshorthand: ['boolean', 'switch', 'toggle'],\n\t},\n\tprops: {\n\t\tonText: {type: 'mgText', default: 'on'},\n\t\tonColor: {type: 'mgColor', default: '#75c791', advanced: true},\n\t\toffText: {type: 'mgText', default: 'off'},\n\t\toffColor: {type: 'mgColor', default: '#bfcbd9', advanced: true},\n\t\tswitchColor: {type: 'mgColor', default: '#fff', advanced: true},\n\t\tdisabledColor: {type: 'mgColor', default: '#cccccc', advanced: true},\n\t},\n\tmethods: {\n\t\tchange(e) {\n\t\t\tthis.$mgForm.$emit('mgChange', {path: this.$props.$dataPath, value: e.value});\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<toggle-button\n\t\tclass=\"mg-toggle\"\n\t\t:value=\"data\"\n\t\t:color=\"{checked: $props.onColor, unchecked: $props.offColor, disabled: $props.disabledColor}\"\n\t\t:labels=\"{checked: $props.onText, unchecked: $props.offText}\"\n\t\t:switchColor=\"$props.switchColor\"\n\t\t@change=\"change\"\n\t/>\n</template>\n\n<style>\n.mg-toggle {\n\tmargin-top: 7px;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$G = undefined;
    /* module identifier */
    const __vue_module_identifier__$G = undefined;
    /* functional template */
    const __vue_is_functional_template__$G = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$G = normalizeComponent(
      { render: __vue_render__$z, staticRenderFns: __vue_staticRenderFns__$z },
      __vue_inject_styles__$G,
      __vue_script__$G,
      __vue_scope_id__$G,
      __vue_is_functional_template__$G,
      __vue_module_identifier__$G,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgToggle = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$G
  });

  var script$G = Vue.mgComponent('mgUrl', {
    meta: {
      title: 'URL',
      icon: 'far fa-globe',
      category: 'Simple Inputs',
      preferId: true,
      format: function format(v) {
        if (!v) return '';
        return "<a href=\"".concat(v, "\" target=\"_blank\">").concat(v, "</a>");
      },
      shorthand: ['uri']
    },
    props: {
      placeholder: {
        type: 'mgUrl',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      },
      relative: {
        type: 'mgToggle',
        help: 'Allow relative URL paths to the host'
      } // FIXME: Not yet implemented

    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    }
  });

  /* script */
  const __vue_script__$H = script$G;

  /* template */
  var __vue_render__$A = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("input", {
      directives: [
        { name: "model", rawName: "v-model", value: _vm.data, expression: "data" }
      ],
      staticClass: "form-control",
      attrs: { type: "url", placeholder: _vm.$props.placeholder },
      domProps: { value: _vm.data },
      on: {
        input: function($event) {
          if ($event.target.composing) {
            return
          }
          _vm.data = $event.target.value;
        }
      }
    })
  };
  var __vue_staticRenderFns__$A = [];
  __vue_render__$A._withStripped = true;

    /* style */
    const __vue_inject_styles__$H = undefined;
    /* scoped */
    const __vue_scope_id__$H = undefined;
    /* module identifier */
    const __vue_module_identifier__$H = undefined;
    /* functional template */
    const __vue_is_functional_template__$H = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$H = normalizeComponent(
      { render: __vue_render__$A, staticRenderFns: __vue_staticRenderFns__$A },
      __vue_inject_styles__$H,
      __vue_script__$H,
      __vue_scope_id__$H,
      __vue_is_functional_template__$H,
      __vue_module_identifier__$H,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgUrl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$H
  });

  var script$H = Vue.mgComponent('mgVideo', {
    meta: {
      title: 'Video',
      icon: 'far fa-film',
      category: 'Media',
      preferId: true
    },
    props: {
      url: {
        type: 'mgUrl'
      },
      width: {
        type: 'mgText',
        "default": '100%'
      },
      height: {
        type: 'mgText',
        "default": '315px'
      },
      autoPlay: {
        type: 'mgToggle',
        "default": false
      },
      showControls: {
        type: 'mgToggle',
        "default": true
      },
      loop: {
        type: 'mgToggle',
        "default": false
      }
    },
    computed: {
      videoResource: function videoResource() {
        if (!this.$props.url) {
          return {
            type: 'none'
          };
        } else if (/^https?:\/\/(www\.)?youtube\.com/.test(this.$props.url)) {
          return {
            type: 'youTube',
            url: this.$props.url + "?autoplay=".concat(this.$props.autoPlay ? '1' : '0') + "&controls=".concat(this.$props.showControls ? '1' : '0') + "&loop=".concat(this.$props.loop ? '1' : '0')
          };
        } else {
          return {
            type: 'unknown'
          };
        }
      }
    }
  });

  /* script */
  const __vue_script__$I = script$H;

  /* template */
  var __vue_render__$B = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mg-video",
        style: { width: _vm.$props.width, height: _vm.$props.height }
      },
      [
        !_vm.videoResource || _vm.videoResource.type == "none"
          ? _c("div", { staticClass: "alert alert-warning" }, [
              _vm._v("\n\t\tNo video URL provided\n\t")
            ])
          : _vm.videoResource.type == "youTube"
          ? _c("iframe", {
              attrs: {
                width: "100%",
                height: "100%",
                src: _vm.videoResource.url,
                frameborder: "0",
                allow:
                  "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
                allowfullscreen: ""
              }
            })
          : _c("div", { staticClass: "alert alert-warning" }, [
              _vm._v("\n\t\tUnsupported video URL\n\t")
            ])
      ]
    )
  };
  var __vue_staticRenderFns__$B = [];
  __vue_render__$B._withStripped = true;

    /* style */
    const __vue_inject_styles__$I = function (inject) {
      if (!inject) return
      inject("data-v-046a7f3d_0", { source: "\n.mg-video .alert {\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\tjustify-content: center;\n\talign-items: center;\n}\n", map: {"version":3,"sources":["/home/user/src/mfdc/MacGyver2/src/components/mgVideo.vue"],"names":[],"mappings":";AA+DA;CACA,aAAA;CACA,YAAA;CACA,WAAA;CACA,uBAAA;CACA,mBAAA;AACA","file":"mgVideo.vue","sourcesContent":["<script>\nexport default Vue.mgComponent('mgVideo', {\n\tmeta: {\n\t\ttitle: 'Video',\n\t\ticon: 'far fa-film',\n\t\tcategory: 'Media',\n\t\tpreferId: true,\n\t},\n\tprops: {\n\t\turl: {type: 'mgUrl'},\n\t\twidth: {type: 'mgText', default: '100%'},\n\t\theight: {type: 'mgText', default: '315px'},\n\t\tautoPlay: {type: 'mgToggle', default: false},\n\t\tshowControls: {type: 'mgToggle', default: true},\n\t\tloop: {type: 'mgToggle', default: false},\n\t},\n\tcomputed: {\n\t\tvideoResource() {\n\t\t\tif (!this.$props.url) {\n\t\t\t\treturn {type: 'none'};\n\t\t\t} else if (/^https?:\\/\\/(www\\.)?youtube\\.com/.test(this.$props.url)) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'youTube',\n\t\t\t\t\turl: this.$props.url\n\t\t\t\t\t\t+ `?autoplay=${this.$props.autoPlay ? '1' : '0'}`\n\t\t\t\t\t\t+ `&controls=${this.$props.showControls ? '1' : '0'}`\n\t\t\t\t\t\t+ `&loop=${this.$props.loop ? '1' : '0'}`\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {type: 'unknown'};\n\t\t\t}\n\t\t},\n\t},\n});\n</script>\n\n<template>\n\t<div class=\"mg-video\" :style=\"{width: $props.width, height: $props.height}\">\n\t\t<div\n\t\t\tv-if=\"!videoResource || videoResource.type == 'none'\"\n\t\t\tclass=\"alert alert-warning\"\n\t\t>\n\t\t\tNo video URL provided\n\t\t</div>\n\t\t<iframe\n\t\t\tv-else-if=\"videoResource.type == 'youTube'\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\t:src=\"videoResource.url\"\n\t\t\tframeborder=\"0\"\n\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\tallowfullscreen\n\t\t/>\n\t\t<div\n\t\t\tv-else\n\t\t\tclass=\"alert alert-warning\" \n\t\t>\n\t\t\tUnsupported video URL\n\t\t</div>\n\t</div>\n</template>\n\n<style>\n.mg-video .alert {\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\tjustify-content: center;\n\talign-items: center;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$I = undefined;
    /* module identifier */
    const __vue_module_identifier__$I = undefined;
    /* functional template */
    const __vue_is_functional_template__$I = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$I = normalizeComponent(
      { render: __vue_render__$B, staticRenderFns: __vue_staticRenderFns__$B },
      __vue_inject_styles__$I,
      __vue_script__$I,
      __vue_scope_id__$I,
      __vue_is_functional_template__$I,
      __vue_module_identifier__$I,
      false,
      createInjector,
      undefined,
      undefined
    );

  var mgVideo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$I
  });

  var quill = createCommonjsModule(function (module, exports) {
  /*!
   * Quill Editor v1.3.7
   * https://quilljs.com/
   * Copyright (c) 2014, Jason Chen
   * Copyright (c) 2013, salesforce.com
   */
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory();
  })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, {
  /******/ 				configurable: false,
  /******/ 				enumerable: true,
  /******/ 				get: getter
  /******/ 			});
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 109);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var container_1 = __webpack_require__(17);
  var format_1 = __webpack_require__(18);
  var leaf_1 = __webpack_require__(19);
  var scroll_1 = __webpack_require__(45);
  var inline_1 = __webpack_require__(46);
  var block_1 = __webpack_require__(47);
  var embed_1 = __webpack_require__(48);
  var text_1 = __webpack_require__(49);
  var attributor_1 = __webpack_require__(12);
  var class_1 = __webpack_require__(32);
  var style_1 = __webpack_require__(33);
  var store_1 = __webpack_require__(31);
  var Registry = __webpack_require__(1);
  var Parchment = {
      Scope: Registry.Scope,
      create: Registry.create,
      find: Registry.find,
      query: Registry.query,
      register: Registry.register,
      Container: container_1.default,
      Format: format_1.default,
      Leaf: leaf_1.default,
      Embed: embed_1.default,
      Scroll: scroll_1.default,
      Block: block_1.default,
      Inline: inline_1.default,
      Text: text_1.default,
      Attributor: {
          Attribute: attributor_1.default,
          Class: class_1.default,
          Style: style_1.default,
          Store: store_1.default,
      },
  };
  exports.default = Parchment;


  /***/ }),
  /* 1 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var ParchmentError = /** @class */ (function (_super) {
      __extends(ParchmentError, _super);
      function ParchmentError(message) {
          var _this = this;
          message = '[Parchment] ' + message;
          _this = _super.call(this, message) || this;
          _this.message = message;
          _this.name = _this.constructor.name;
          return _this;
      }
      return ParchmentError;
  }(Error));
  exports.ParchmentError = ParchmentError;
  var attributes = {};
  var classes = {};
  var tags = {};
  var types = {};
  exports.DATA_KEY = '__blot';
  var Scope;
  (function (Scope) {
      Scope[Scope["TYPE"] = 3] = "TYPE";
      Scope[Scope["LEVEL"] = 12] = "LEVEL";
      Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
      Scope[Scope["BLOT"] = 14] = "BLOT";
      Scope[Scope["INLINE"] = 7] = "INLINE";
      Scope[Scope["BLOCK"] = 11] = "BLOCK";
      Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
      Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
      Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
      Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
      Scope[Scope["ANY"] = 15] = "ANY";
  })(Scope = exports.Scope || (exports.Scope = {}));
  function create(input, value) {
      var match = query(input);
      if (match == null) {
          throw new ParchmentError("Unable to create " + input + " blot");
      }
      var BlotClass = match;
      var node = 
      // @ts-ignore
      input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
      return new BlotClass(node, value);
  }
  exports.create = create;
  function find(node, bubble) {
      if (bubble === void 0) { bubble = false; }
      if (node == null)
          return null;
      // @ts-ignore
      if (node[exports.DATA_KEY] != null)
          return node[exports.DATA_KEY].blot;
      if (bubble)
          return find(node.parentNode, bubble);
      return null;
  }
  exports.find = find;
  function query(query, scope) {
      if (scope === void 0) { scope = Scope.ANY; }
      var match;
      if (typeof query === 'string') {
          match = types[query] || attributes[query];
          // @ts-ignore
      }
      else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
          match = types['text'];
      }
      else if (typeof query === 'number') {
          if (query & Scope.LEVEL & Scope.BLOCK) {
              match = types['block'];
          }
          else if (query & Scope.LEVEL & Scope.INLINE) {
              match = types['inline'];
          }
      }
      else if (query instanceof HTMLElement) {
          var names = (query.getAttribute('class') || '').split(/\s+/);
          for (var i in names) {
              match = classes[names[i]];
              if (match)
                  break;
          }
          match = match || tags[query.tagName];
      }
      if (match == null)
          return null;
      // @ts-ignore
      if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
          return match;
      return null;
  }
  exports.query = query;
  function register() {
      var Definitions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          Definitions[_i] = arguments[_i];
      }
      if (Definitions.length > 1) {
          return Definitions.map(function (d) {
              return register(d);
          });
      }
      var Definition = Definitions[0];
      if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
          throw new ParchmentError('Invalid definition');
      }
      else if (Definition.blotName === 'abstract') {
          throw new ParchmentError('Cannot register abstract class');
      }
      types[Definition.blotName || Definition.attrName] = Definition;
      if (typeof Definition.keyName === 'string') {
          attributes[Definition.keyName] = Definition;
      }
      else {
          if (Definition.className != null) {
              classes[Definition.className] = Definition;
          }
          if (Definition.tagName != null) {
              if (Array.isArray(Definition.tagName)) {
                  Definition.tagName = Definition.tagName.map(function (tagName) {
                      return tagName.toUpperCase();
                  });
              }
              else {
                  Definition.tagName = Definition.tagName.toUpperCase();
              }
              var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
              tagNames.forEach(function (tag) {
                  if (tags[tag] == null || Definition.className == null) {
                      tags[tag] = Definition;
                  }
              });
          }
      }
      return Definition;
  }
  exports.register = register;


  /***/ }),
  /* 2 */
  /***/ (function(module, exports, __webpack_require__) {

  var diff = __webpack_require__(51);
  var equal = __webpack_require__(11);
  var extend = __webpack_require__(3);
  var op = __webpack_require__(20);


  var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


  var Delta = function (ops) {
    // Assume we are given a well formed ops
    if (Array.isArray(ops)) {
      this.ops = ops;
    } else if (ops != null && Array.isArray(ops.ops)) {
      this.ops = ops.ops;
    } else {
      this.ops = [];
    }
  };


  Delta.prototype.insert = function (text, attributes) {
    var newOp = {};
    if (text.length === 0) return this;
    newOp.insert = text;
    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
      newOp.attributes = attributes;
    }
    return this.push(newOp);
  };

  Delta.prototype['delete'] = function (length) {
    if (length <= 0) return this;
    return this.push({ 'delete': length });
  };

  Delta.prototype.retain = function (length, attributes) {
    if (length <= 0) return this;
    var newOp = { retain: length };
    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
      newOp.attributes = attributes;
    }
    return this.push(newOp);
  };

  Delta.prototype.push = function (newOp) {
    var index = this.ops.length;
    var lastOp = this.ops[index - 1];
    newOp = extend(true, {}, newOp);
    if (typeof lastOp === 'object') {
      if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
        this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
        return this;
      }
      // Since it does not matter if we insert before or after deleting at the same index,
      // always prefer to insert first
      if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
        index -= 1;
        lastOp = this.ops[index - 1];
        if (typeof lastOp !== 'object') {
          this.ops.unshift(newOp);
          return this;
        }
      }
      if (equal(newOp.attributes, lastOp.attributes)) {
        if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
          this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
          if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
          return this;
        } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
          this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
          if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
          return this;
        }
      }
    }
    if (index === this.ops.length) {
      this.ops.push(newOp);
    } else {
      this.ops.splice(index, 0, newOp);
    }
    return this;
  };

  Delta.prototype.chop = function () {
    var lastOp = this.ops[this.ops.length - 1];
    if (lastOp && lastOp.retain && !lastOp.attributes) {
      this.ops.pop();
    }
    return this;
  };

  Delta.prototype.filter = function (predicate) {
    return this.ops.filter(predicate);
  };

  Delta.prototype.forEach = function (predicate) {
    this.ops.forEach(predicate);
  };

  Delta.prototype.map = function (predicate) {
    return this.ops.map(predicate);
  };

  Delta.prototype.partition = function (predicate) {
    var passed = [], failed = [];
    this.forEach(function(op) {
      var target = predicate(op) ? passed : failed;
      target.push(op);
    });
    return [passed, failed];
  };

  Delta.prototype.reduce = function (predicate, initial) {
    return this.ops.reduce(predicate, initial);
  };

  Delta.prototype.changeLength = function () {
    return this.reduce(function (length, elem) {
      if (elem.insert) {
        return length + op.length(elem);
      } else if (elem.delete) {
        return length - elem.delete;
      }
      return length;
    }, 0);
  };

  Delta.prototype.length = function () {
    return this.reduce(function (length, elem) {
      return length + op.length(elem);
    }, 0);
  };

  Delta.prototype.slice = function (start, end) {
    start = start || 0;
    if (typeof end !== 'number') end = Infinity;
    var ops = [];
    var iter = op.iterator(this.ops);
    var index = 0;
    while (index < end && iter.hasNext()) {
      var nextOp;
      if (index < start) {
        nextOp = iter.next(start - index);
      } else {
        nextOp = iter.next(end - index);
        ops.push(nextOp);
      }
      index += op.length(nextOp);
    }
    return new Delta(ops);
  };


  Delta.prototype.compose = function (other) {
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    var ops = [];
    var firstOther = otherIter.peek();
    if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
      var firstLeft = firstOther.retain;
      while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
        firstLeft -= thisIter.peekLength();
        ops.push(thisIter.next());
      }
      if (firstOther.retain - firstLeft > 0) {
        otherIter.next(firstOther.retain - firstLeft);
      }
    }
    var delta = new Delta(ops);
    while (thisIter.hasNext() || otherIter.hasNext()) {
      if (otherIter.peekType() === 'insert') {
        delta.push(otherIter.next());
      } else if (thisIter.peekType() === 'delete') {
        delta.push(thisIter.next());
      } else {
        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
        var thisOp = thisIter.next(length);
        var otherOp = otherIter.next(length);
        if (typeof otherOp.retain === 'number') {
          var newOp = {};
          if (typeof thisOp.retain === 'number') {
            newOp.retain = length;
          } else {
            newOp.insert = thisOp.insert;
          }
          // Preserve null when composing with a retain, otherwise remove it for inserts
          var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
          if (attributes) newOp.attributes = attributes;
          delta.push(newOp);

          // Optimization if rest of other is just retain
          if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
            var rest = new Delta(thisIter.rest());
            return delta.concat(rest).chop();
          }

        // Other op should be delete, we could be an insert or retain
        // Insert + delete cancels out
        } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
          delta.push(otherOp);
        }
      }
    }
    return delta.chop();
  };

  Delta.prototype.concat = function (other) {
    var delta = new Delta(this.ops.slice());
    if (other.ops.length > 0) {
      delta.push(other.ops[0]);
      delta.ops = delta.ops.concat(other.ops.slice(1));
    }
    return delta;
  };

  Delta.prototype.diff = function (other, index) {
    if (this.ops === other.ops) {
      return new Delta();
    }
    var strings = [this, other].map(function (delta) {
      return delta.map(function (op) {
        if (op.insert != null) {
          return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
        }
        var prep = (delta === other) ? 'on' : 'with';
        throw new Error('diff() called ' + prep + ' non-document');
      }).join('');
    });
    var delta = new Delta();
    var diffResult = diff(strings[0], strings[1], index);
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    diffResult.forEach(function (component) {
      var length = component[1].length;
      while (length > 0) {
        var opLength = 0;
        switch (component[0]) {
          case diff.INSERT:
            opLength = Math.min(otherIter.peekLength(), length);
            delta.push(otherIter.next(opLength));
            break;
          case diff.DELETE:
            opLength = Math.min(length, thisIter.peekLength());
            thisIter.next(opLength);
            delta['delete'](opLength);
            break;
          case diff.EQUAL:
            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
            var thisOp = thisIter.next(opLength);
            var otherOp = otherIter.next(opLength);
            if (equal(thisOp.insert, otherOp.insert)) {
              delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
            } else {
              delta.push(otherOp)['delete'](opLength);
            }
            break;
        }
        length -= opLength;
      }
    });
    return delta.chop();
  };

  Delta.prototype.eachLine = function (predicate, newline) {
    newline = newline || '\n';
    var iter = op.iterator(this.ops);
    var line = new Delta();
    var i = 0;
    while (iter.hasNext()) {
      if (iter.peekType() !== 'insert') return;
      var thisOp = iter.peek();
      var start = op.length(thisOp) - iter.peekLength();
      var index = typeof thisOp.insert === 'string' ?
        thisOp.insert.indexOf(newline, start) - start : -1;
      if (index < 0) {
        line.push(iter.next());
      } else if (index > 0) {
        line.push(iter.next(index));
      } else {
        if (predicate(line, iter.next(1).attributes || {}, i) === false) {
          return;
        }
        i += 1;
        line = new Delta();
      }
    }
    if (line.length() > 0) {
      predicate(line, {}, i);
    }
  };

  Delta.prototype.transform = function (other, priority) {
    priority = !!priority;
    if (typeof other === 'number') {
      return this.transformPosition(other, priority);
    }
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    var delta = new Delta();
    while (thisIter.hasNext() || otherIter.hasNext()) {
      if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
        delta.retain(op.length(thisIter.next()));
      } else if (otherIter.peekType() === 'insert') {
        delta.push(otherIter.next());
      } else {
        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
        var thisOp = thisIter.next(length);
        var otherOp = otherIter.next(length);
        if (thisOp['delete']) {
          // Our delete either makes their delete redundant or removes their retain
          continue;
        } else if (otherOp['delete']) {
          delta.push(otherOp);
        } else {
          // We retain either their retain or insert
          delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
        }
      }
    }
    return delta.chop();
  };

  Delta.prototype.transformPosition = function (index, priority) {
    priority = !!priority;
    var thisIter = op.iterator(this.ops);
    var offset = 0;
    while (thisIter.hasNext() && offset <= index) {
      var length = thisIter.peekLength();
      var nextType = thisIter.peekType();
      thisIter.next();
      if (nextType === 'delete') {
        index -= Math.min(length, index - offset);
        continue;
      } else if (nextType === 'insert' && (offset < index || !priority)) {
        index += length;
      }
      offset += length;
    }
    return index;
  };


  module.exports = Delta;


  /***/ }),
  /* 3 */
  /***/ (function(module, exports) {

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;
  var defineProperty = Object.defineProperty;
  var gOPD = Object.getOwnPropertyDescriptor;

  var isArray = function isArray(arr) {
  	if (typeof Array.isArray === 'function') {
  		return Array.isArray(arr);
  	}

  	return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject = function isPlainObject(obj) {
  	if (!obj || toStr.call(obj) !== '[object Object]') {
  		return false;
  	}

  	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  	// Not own constructor property must be Object
  	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  		return false;
  	}

  	// Own properties are enumerated firstly, so to speed up,
  	// if last one is own, then all properties are own.
  	var key;
  	for (key in obj) { /**/ }

  	return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
  var setProperty = function setProperty(target, options) {
  	if (defineProperty && options.name === '__proto__') {
  		defineProperty(target, options.name, {
  			enumerable: true,
  			configurable: true,
  			value: options.newValue,
  			writable: true
  		});
  	} else {
  		target[options.name] = options.newValue;
  	}
  };

  // Return undefined instead of __proto__ if '__proto__' is not an own property
  var getProperty = function getProperty(obj, name) {
  	if (name === '__proto__') {
  		if (!hasOwn.call(obj, name)) {
  			return void 0;
  		} else if (gOPD) {
  			// In early versions of node, obj['__proto__'] is buggy when obj has
  			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
  			return gOPD(obj, name).value;
  		}
  	}

  	return obj[name];
  };

  module.exports = function extend() {
  	var options, name, src, copy, copyIsArray, clone;
  	var target = arguments[0];
  	var i = 1;
  	var length = arguments.length;
  	var deep = false;

  	// Handle a deep copy situation
  	if (typeof target === 'boolean') {
  		deep = target;
  		target = arguments[1] || {};
  		// skip the boolean and the target
  		i = 2;
  	}
  	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  		target = {};
  	}

  	for (; i < length; ++i) {
  		options = arguments[i];
  		// Only deal with non-null/undefined values
  		if (options != null) {
  			// Extend the base object
  			for (name in options) {
  				src = getProperty(target, name);
  				copy = getProperty(options, name);

  				// Prevent never-ending loop
  				if (target !== copy) {
  					// Recurse if we're merging plain objects or arrays
  					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
  						if (copyIsArray) {
  							copyIsArray = false;
  							clone = src && isArray(src) ? src : [];
  						} else {
  							clone = src && isPlainObject(src) ? src : {};
  						}

  						// Never move original objects, clone them
  						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

  					// Don't bring in undefined values
  					} else if (typeof copy !== 'undefined') {
  						setProperty(target, { name: name, newValue: copy });
  					}
  				}
  			}
  		}
  	}

  	// Return the modified object
  	return target;
  };


  /***/ }),
  /* 4 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var NEWLINE_LENGTH = 1;

  var BlockEmbed = function (_Parchment$Embed) {
    _inherits(BlockEmbed, _Parchment$Embed);

    function BlockEmbed() {
      _classCallCheck(this, BlockEmbed);

      return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
    }

    _createClass(BlockEmbed, [{
      key: 'attach',
      value: function attach() {
        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
        this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
      }
    }, {
      key: 'delta',
      value: function delta() {
        return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
        if (attribute != null) {
          this.attributes.attribute(attribute, value);
        }
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        this.format(name, value);
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (typeof value === 'string' && value.endsWith('\n')) {
          var block = _parchment2.default.create(Block.blotName);
          this.parent.insertBefore(block, index === 0 ? this : this.next);
          block.insertAt(0, value.slice(0, -1));
        } else {
          _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
        }
      }
    }]);

    return BlockEmbed;
  }(_parchment2.default.Embed);

  BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
  // It is important for cursor behavior BlockEmbeds use tags that are block level elements


  var Block = function (_Parchment$Block) {
    _inherits(Block, _Parchment$Block);

    function Block(domNode) {
      _classCallCheck(this, Block);

      var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

      _this2.cache = {};
      return _this2;
    }

    _createClass(Block, [{
      key: 'delta',
      value: function delta() {
        if (this.cache.delta == null) {
          this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
            if (leaf.length() === 0) {
              return delta;
            } else {
              return delta.insert(leaf.value(), bubbleFormats(leaf));
            }
          }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
        }
        return this.cache.delta;
      }
    }, {
      key: 'deleteAt',
      value: function deleteAt(index, length) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
        this.cache = {};
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (length <= 0) return;
        if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
          if (index + length === this.length()) {
            this.format(name, value);
          }
        } else {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
        }
        this.cache = {};
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
        if (value.length === 0) return;
        var lines = value.split('\n');
        var text = lines.shift();
        if (text.length > 0) {
          if (index < this.length() - 1 || this.children.tail == null) {
            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
          } else {
            this.children.tail.insertAt(this.children.tail.length(), text);
          }
          this.cache = {};
        }
        var block = this;
        lines.reduce(function (index, line) {
          block = block.split(index, true);
          block.insertAt(0, line);
          return line.length;
        }, index + text.length);
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        var head = this.children.head;
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
        if (head instanceof _break2.default) {
          head.remove();
        }
        this.cache = {};
      }
    }, {
      key: 'length',
      value: function length() {
        if (this.cache.length == null) {
          this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
        }
        return this.cache.length;
      }
    }, {
      key: 'moveChildren',
      value: function moveChildren(target, ref) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
        this.cache = {};
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
        this.cache = {};
      }
    }, {
      key: 'path',
      value: function path(index) {
        return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
      }
    }, {
      key: 'removeChild',
      value: function removeChild(child) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
        this.cache = {};
      }
    }, {
      key: 'split',
      value: function split(index) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
          var clone = this.clone();
          if (index === 0) {
            this.parent.insertBefore(clone, this);
            return this;
          } else {
            this.parent.insertBefore(clone, this.next);
            return clone;
          }
        } else {
          var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
          this.cache = {};
          return next;
        }
      }
    }]);

    return Block;
  }(_parchment2.default.Block);

  Block.blotName = 'block';
  Block.tagName = 'P';
  Block.defaultChild = 'break';
  Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

  function bubbleFormats(blot) {
    var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (blot == null) return formats;
    if (typeof blot.formats === 'function') {
      formats = (0, _extend2.default)(formats, blot.formats());
    }
    if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
      return formats;
    }
    return bubbleFormats(blot.parent, formats);
  }

  exports.bubbleFormats = bubbleFormats;
  exports.BlockEmbed = BlockEmbed;
  exports.default = Block;

  /***/ }),
  /* 5 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.overload = exports.expandConfig = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  __webpack_require__(50);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _editor = __webpack_require__(14);

  var _editor2 = _interopRequireDefault(_editor);

  var _emitter3 = __webpack_require__(8);

  var _emitter4 = _interopRequireDefault(_emitter3);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _selection = __webpack_require__(15);

  var _selection2 = _interopRequireDefault(_selection);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _theme = __webpack_require__(34);

  var _theme2 = _interopRequireDefault(_theme);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = (0, _logger2.default)('quill');

  var Quill = function () {
    _createClass(Quill, null, [{
      key: 'debug',
      value: function debug(limit) {
        if (limit === true) {
          limit = 'log';
        }
        _logger2.default.level(limit);
      }
    }, {
      key: 'find',
      value: function find(node) {
        return node.__quill || _parchment2.default.find(node);
      }
    }, {
      key: 'import',
      value: function _import(name) {
        if (this.imports[name] == null) {
          debug.error('Cannot import ' + name + '. Are you sure it was registered?');
        }
        return this.imports[name];
      }
    }, {
      key: 'register',
      value: function register(path, target) {
        var _this = this;

        var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (typeof path !== 'string') {
          var name = path.attrName || path.blotName;
          if (typeof name === 'string') {
            // register(Blot | Attributor, overwrite)
            this.register('formats/' + name, path, target);
          } else {
            Object.keys(path).forEach(function (key) {
              _this.register(key, path[key], target);
            });
          }
        } else {
          if (this.imports[path] != null && !overwrite) {
            debug.warn('Overwriting ' + path + ' with', target);
          }
          this.imports[path] = target;
          if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
            _parchment2.default.register(target);
          } else if (path.startsWith('modules') && typeof target.register === 'function') {
            target.register();
          }
        }
      }
    }]);

    function Quill(container) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Quill);

      this.options = expandConfig(container, options);
      this.container = this.options.container;
      if (this.container == null) {
        return debug.error('Invalid Quill container', container);
      }
      if (this.options.debug) {
        Quill.debug(this.options.debug);
      }
      var html = this.container.innerHTML.trim();
      this.container.classList.add('ql-container');
      this.container.innerHTML = '';
      this.container.__quill = this;
      this.root = this.addContainer('ql-editor');
      this.root.classList.add('ql-blank');
      this.root.setAttribute('data-gramm', false);
      this.scrollingContainer = this.options.scrollingContainer || this.root;
      this.emitter = new _emitter4.default();
      this.scroll = _parchment2.default.create(this.root, {
        emitter: this.emitter,
        whitelist: this.options.formats
      });
      this.editor = new _editor2.default(this.scroll);
      this.selection = new _selection2.default(this.scroll, this.emitter);
      this.theme = new this.options.theme(this, this.options);
      this.keyboard = this.theme.addModule('keyboard');
      this.clipboard = this.theme.addModule('clipboard');
      this.history = this.theme.addModule('history');
      this.theme.init();
      this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
        if (type === _emitter4.default.events.TEXT_CHANGE) {
          _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
        }
      });
      this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
        var range = _this2.selection.lastRange;
        var index = range && range.length === 0 ? range.index : undefined;
        modify.call(_this2, function () {
          return _this2.editor.update(null, mutations, index);
        }, source);
      });
      var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
      this.setContents(contents);
      this.history.clear();
      if (this.options.placeholder) {
        this.root.setAttribute('data-placeholder', this.options.placeholder);
      }
      if (this.options.readOnly) {
        this.disable();
      }
    }

    _createClass(Quill, [{
      key: 'addContainer',
      value: function addContainer(container) {
        var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (typeof container === 'string') {
          var className = container;
          container = document.createElement('div');
          container.classList.add(className);
        }
        this.container.insertBefore(container, refNode);
        return container;
      }
    }, {
      key: 'blur',
      value: function blur() {
        this.selection.setRange(null);
      }
    }, {
      key: 'deleteText',
      value: function deleteText(index, length, source) {
        var _this3 = this;

        var _overload = overload(index, length, source);

        var _overload2 = _slicedToArray(_overload, 4);

        index = _overload2[0];
        length = _overload2[1];
        source = _overload2[3];

        return modify.call(this, function () {
          return _this3.editor.deleteText(index, length);
        }, source, index, -1 * length);
      }
    }, {
      key: 'disable',
      value: function disable() {
        this.enable(false);
      }
    }, {
      key: 'enable',
      value: function enable() {
        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.scroll.enable(enabled);
        this.container.classList.toggle('ql-disabled', !enabled);
      }
    }, {
      key: 'focus',
      value: function focus() {
        var scrollTop = this.scrollingContainer.scrollTop;
        this.selection.focus();
        this.scrollingContainer.scrollTop = scrollTop;
        this.scrollIntoView();
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        var _this4 = this;

        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          var range = _this4.getSelection(true);
          var change = new _quillDelta2.default();
          if (range == null) {
            return change;
          } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
            change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
          } else if (range.length === 0) {
            _this4.selection.format(name, value);
            return change;
          } else {
            change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
          }
          _this4.setSelection(range, _emitter4.default.sources.SILENT);
          return change;
        }, source);
      }
    }, {
      key: 'formatLine',
      value: function formatLine(index, length, name, value, source) {
        var _this5 = this;

        var formats = void 0;

        var _overload3 = overload(index, length, name, value, source);

        var _overload4 = _slicedToArray(_overload3, 4);

        index = _overload4[0];
        length = _overload4[1];
        formats = _overload4[2];
        source = _overload4[3];

        return modify.call(this, function () {
          return _this5.editor.formatLine(index, length, formats);
        }, source, index, 0);
      }
    }, {
      key: 'formatText',
      value: function formatText(index, length, name, value, source) {
        var _this6 = this;

        var formats = void 0;

        var _overload5 = overload(index, length, name, value, source);

        var _overload6 = _slicedToArray(_overload5, 4);

        index = _overload6[0];
        length = _overload6[1];
        formats = _overload6[2];
        source = _overload6[3];

        return modify.call(this, function () {
          return _this6.editor.formatText(index, length, formats);
        }, source, index, 0);
      }
    }, {
      key: 'getBounds',
      value: function getBounds(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var bounds = void 0;
        if (typeof index === 'number') {
          bounds = this.selection.getBounds(index, length);
        } else {
          bounds = this.selection.getBounds(index.index, index.length);
        }
        var containerBounds = this.container.getBoundingClientRect();
        return {
          bottom: bounds.bottom - containerBounds.top,
          height: bounds.height,
          left: bounds.left - containerBounds.left,
          right: bounds.right - containerBounds.left,
          top: bounds.top - containerBounds.top,
          width: bounds.width
        };
      }
    }, {
      key: 'getContents',
      value: function getContents() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

        var _overload7 = overload(index, length);

        var _overload8 = _slicedToArray(_overload7, 2);

        index = _overload8[0];
        length = _overload8[1];

        return this.editor.getContents(index, length);
      }
    }, {
      key: 'getFormat',
      value: function getFormat() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (typeof index === 'number') {
          return this.editor.getFormat(index, length);
        } else {
          return this.editor.getFormat(index.index, index.length);
        }
      }
    }, {
      key: 'getIndex',
      value: function getIndex(blot) {
        return blot.offset(this.scroll);
      }
    }, {
      key: 'getLength',
      value: function getLength() {
        return this.scroll.length();
      }
    }, {
      key: 'getLeaf',
      value: function getLeaf(index) {
        return this.scroll.leaf(index);
      }
    }, {
      key: 'getLine',
      value: function getLine(index) {
        return this.scroll.line(index);
      }
    }, {
      key: 'getLines',
      value: function getLines() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

        if (typeof index !== 'number') {
          return this.scroll.lines(index.index, index.length);
        } else {
          return this.scroll.lines(index, length);
        }
      }
    }, {
      key: 'getModule',
      value: function getModule(name) {
        return this.theme.modules[name];
      }
    }, {
      key: 'getSelection',
      value: function getSelection() {
        var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (focus) this.focus();
        this.update(); // Make sure we access getRange with editor in consistent state
        return this.selection.getRange()[0];
      }
    }, {
      key: 'getText',
      value: function getText() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

        var _overload9 = overload(index, length);

        var _overload10 = _slicedToArray(_overload9, 2);

        index = _overload10[0];
        length = _overload10[1];

        return this.editor.getText(index, length);
      }
    }, {
      key: 'hasFocus',
      value: function hasFocus() {
        return this.selection.hasFocus();
      }
    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed, value) {
        var _this7 = this;

        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

        return modify.call(this, function () {
          return _this7.editor.insertEmbed(index, embed, value);
        }, source, index);
      }
    }, {
      key: 'insertText',
      value: function insertText(index, text, name, value, source) {
        var _this8 = this;

        var formats = void 0;

        var _overload11 = overload(index, 0, name, value, source);

        var _overload12 = _slicedToArray(_overload11, 4);

        index = _overload12[0];
        formats = _overload12[2];
        source = _overload12[3];

        return modify.call(this, function () {
          return _this8.editor.insertText(index, text, formats);
        }, source, index, text.length);
      }
    }, {
      key: 'isEnabled',
      value: function isEnabled() {
        return !this.container.classList.contains('ql-disabled');
      }
    }, {
      key: 'off',
      value: function off() {
        return this.emitter.off.apply(this.emitter, arguments);
      }
    }, {
      key: 'on',
      value: function on() {
        return this.emitter.on.apply(this.emitter, arguments);
      }
    }, {
      key: 'once',
      value: function once() {
        return this.emitter.once.apply(this.emitter, arguments);
      }
    }, {
      key: 'pasteHTML',
      value: function pasteHTML(index, html, source) {
        this.clipboard.dangerouslyPasteHTML(index, html, source);
      }
    }, {
      key: 'removeFormat',
      value: function removeFormat(index, length, source) {
        var _this9 = this;

        var _overload13 = overload(index, length, source);

        var _overload14 = _slicedToArray(_overload13, 4);

        index = _overload14[0];
        length = _overload14[1];
        source = _overload14[3];

        return modify.call(this, function () {
          return _this9.editor.removeFormat(index, length);
        }, source, index);
      }
    }, {
      key: 'scrollIntoView',
      value: function scrollIntoView() {
        this.selection.scrollIntoView(this.scrollingContainer);
      }
    }, {
      key: 'setContents',
      value: function setContents(delta) {
        var _this10 = this;

        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          delta = new _quillDelta2.default(delta);
          var length = _this10.getLength();
          var deleted = _this10.editor.deleteText(0, length);
          var applied = _this10.editor.applyDelta(delta);
          var lastOp = applied.ops[applied.ops.length - 1];
          if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
            _this10.editor.deleteText(_this10.getLength() - 1, 1);
            applied.delete(1);
          }
          var ret = deleted.compose(applied);
          return ret;
        }, source);
      }
    }, {
      key: 'setSelection',
      value: function setSelection(index, length, source) {
        if (index == null) {
          this.selection.setRange(null, length || Quill.sources.API);
        } else {
          var _overload15 = overload(index, length, source);

          var _overload16 = _slicedToArray(_overload15, 4);

          index = _overload16[0];
          length = _overload16[1];
          source = _overload16[3];

          this.selection.setRange(new _selection.Range(index, length), source);
          if (source !== _emitter4.default.sources.SILENT) {
            this.selection.scrollIntoView(this.scrollingContainer);
          }
        }
      }
    }, {
      key: 'setText',
      value: function setText(text) {
        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        var delta = new _quillDelta2.default().insert(text);
        return this.setContents(delta, source);
      }
    }, {
      key: 'update',
      value: function update() {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

        var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
        this.selection.update(source);
        return change;
      }
    }, {
      key: 'updateContents',
      value: function updateContents(delta) {
        var _this11 = this;

        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          delta = new _quillDelta2.default(delta);
          return _this11.editor.applyDelta(delta, source);
        }, source, true);
      }
    }]);

    return Quill;
  }();

  Quill.DEFAULTS = {
    bounds: null,
    formats: null,
    modules: {},
    placeholder: '',
    readOnly: false,
    scrollingContainer: null,
    strict: true,
    theme: 'default'
  };
  Quill.events = _emitter4.default.events;
  Quill.sources = _emitter4.default.sources;
  // eslint-disable-next-line no-undef
  Quill.version =   "1.3.7";

  Quill.imports = {
    'delta': _quillDelta2.default,
    'parchment': _parchment2.default,
    'core/module': _module2.default,
    'core/theme': _theme2.default
  };

  function expandConfig(container, userConfig) {
    userConfig = (0, _extend2.default)(true, {
      container: container,
      modules: {
        clipboard: true,
        keyboard: true,
        history: true
      }
    }, userConfig);
    if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
      userConfig.theme = _theme2.default;
    } else {
      userConfig.theme = Quill.import('themes/' + userConfig.theme);
      if (userConfig.theme == null) {
        throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
      }
    }
    var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
    [themeConfig, userConfig].forEach(function (config) {
      config.modules = config.modules || {};
      Object.keys(config.modules).forEach(function (module) {
        if (config.modules[module] === true) {
          config.modules[module] = {};
        }
      });
    });
    var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
    var moduleConfig = moduleNames.reduce(function (config, name) {
      var moduleClass = Quill.import('modules/' + name);
      if (moduleClass == null) {
        debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
      } else {
        config[name] = moduleClass.DEFAULTS || {};
      }
      return config;
    }, {});
    // Special case toolbar shorthand
    if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
      userConfig.modules.toolbar = {
        container: userConfig.modules.toolbar
      };
    }
    userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
    ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
      if (typeof userConfig[key] === 'string') {
        userConfig[key] = document.querySelector(userConfig[key]);
      }
    });
    userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
      if (userConfig.modules[name]) {
        config[name] = userConfig.modules[name];
      }
      return config;
    }, {});
    return userConfig;
  }

  // Handle selection preservation and TEXT_CHANGE emission
  // common to modification APIs
  function modify(modifier, source, index, shift) {
    if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
      return new _quillDelta2.default();
    }
    var range = index == null ? null : this.getSelection();
    var oldDelta = this.editor.delta;
    var change = modifier();
    if (range != null) {
      if (index === true) index = range.index;
      if (shift == null) {
        range = shiftRange(range, change, source);
      } else if (shift !== 0) {
        range = shiftRange(range, index, shift, source);
      }
      this.setSelection(range, _emitter4.default.sources.SILENT);
    }
    if (change.length() > 0) {
      var _emitter;

      var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
      (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
      if (source !== _emitter4.default.sources.SILENT) {
        var _emitter2;

        (_emitter2 = this.emitter).emit.apply(_emitter2, args);
      }
    }
    return change;
  }

  function overload(index, length, name, value, source) {
    var formats = {};
    if (typeof index.index === 'number' && typeof index.length === 'number') {
      // Allow for throwaway end (used by insertText/insertEmbed)
      if (typeof length !== 'number') {
        source = value, value = name, name = length, length = index.length, index = index.index;
      } else {
        length = index.length, index = index.index;
      }
    } else if (typeof length !== 'number') {
      source = value, value = name, name = length, length = 0;
    }
    // Handle format being object, two format name/value strings or excluded
    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
      formats = name;
      source = value;
    } else if (typeof name === 'string') {
      if (value != null) {
        formats[name] = value;
      } else {
        source = name;
      }
    }
    // Handle optional source
    source = source || _emitter4.default.sources.API;
    return [index, length, formats, source];
  }

  function shiftRange(range, index, length, source) {
    if (range == null) return null;
    var start = void 0,
        end = void 0;
    if (index instanceof _quillDelta2.default) {
      var _map = [range.index, range.index + range.length].map(function (pos) {
        return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
      });

      var _map2 = _slicedToArray(_map, 2);

      start = _map2[0];
      end = _map2[1];
    } else {
      var _map3 = [range.index, range.index + range.length].map(function (pos) {
        if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
        if (length >= 0) {
          return pos + length;
        } else {
          return Math.max(index, pos + length);
        }
      });

      var _map4 = _slicedToArray(_map3, 2);

      start = _map4[0];
      end = _map4[1];
    }
    return new _selection.Range(start, end - start);
  }

  exports.expandConfig = expandConfig;
  exports.overload = overload;
  exports.default = Quill;

  /***/ }),
  /* 6 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Inline = function (_Parchment$Inline) {
    _inherits(Inline, _Parchment$Inline);

    function Inline() {
      _classCallCheck(this, Inline);

      return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
    }

    _createClass(Inline, [{
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
          var blot = this.isolate(index, length);
          if (value) {
            blot.wrap(name, value);
          }
        } else {
          _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
        if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
          var parent = this.parent.isolate(this.offset(), this.length());
          this.moveChildren(parent);
          parent.wrap(this);
        }
      }
    }], [{
      key: 'compare',
      value: function compare(self, other) {
        var selfIndex = Inline.order.indexOf(self);
        var otherIndex = Inline.order.indexOf(other);
        if (selfIndex >= 0 || otherIndex >= 0) {
          return selfIndex - otherIndex;
        } else if (self === other) {
          return 0;
        } else if (self < other) {
          return -1;
        } else {
          return 1;
        }
      }
    }]);

    return Inline;
  }(_parchment2.default.Inline);

  Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
  // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
  Inline.order = ['cursor', 'inline', // Must be lower
  'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
  ];

  exports.default = Inline;

  /***/ }),
  /* 7 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TextBlot = function (_Parchment$Text) {
    _inherits(TextBlot, _Parchment$Text);

    function TextBlot() {
      _classCallCheck(this, TextBlot);

      return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
    }

    return TextBlot;
  }(_parchment2.default.Text);

  exports.default = TextBlot;

  /***/ }),
  /* 8 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _eventemitter = __webpack_require__(54);

  var _eventemitter2 = _interopRequireDefault(_eventemitter);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:events');

  var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

  EVENTS.forEach(function (eventName) {
    document.addEventListener(eventName, function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
        // TODO use WeakMap
        if (node.__quill && node.__quill.emitter) {
          var _node$__quill$emitter;

          (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
        }
      });
    });
  });

  var Emitter = function (_EventEmitter) {
    _inherits(Emitter, _EventEmitter);

    function Emitter() {
      _classCallCheck(this, Emitter);

      var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

      _this.listeners = {};
      _this.on('error', debug.error);
      return _this;
    }

    _createClass(Emitter, [{
      key: 'emit',
      value: function emit() {
        debug.log.apply(debug, arguments);
        _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
      }
    }, {
      key: 'handleDOM',
      value: function handleDOM(event) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        (this.listeners[event.type] || []).forEach(function (_ref) {
          var node = _ref.node,
              handler = _ref.handler;

          if (event.target === node || node.contains(event.target)) {
            handler.apply(undefined, [event].concat(args));
          }
        });
      }
    }, {
      key: 'listenDOM',
      value: function listenDOM(eventName, node, handler) {
        if (!this.listeners[eventName]) {
          this.listeners[eventName] = [];
        }
        this.listeners[eventName].push({ node: node, handler: handler });
      }
    }]);

    return Emitter;
  }(_eventemitter2.default);

  Emitter.events = {
    EDITOR_CHANGE: 'editor-change',
    SCROLL_BEFORE_UPDATE: 'scroll-before-update',
    SCROLL_OPTIMIZE: 'scroll-optimize',
    SCROLL_UPDATE: 'scroll-update',
    SELECTION_CHANGE: 'selection-change',
    TEXT_CHANGE: 'text-change'
  };
  Emitter.sources = {
    API: 'api',
    SILENT: 'silent',
    USER: 'user'
  };

  exports.default = Emitter;

  /***/ }),
  /* 9 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Module = function Module(quill) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Module);

    this.quill = quill;
    this.options = options;
  };

  Module.DEFAULTS = {};

  exports.default = Module;

  /***/ }),
  /* 10 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var levels = ['error', 'warn', 'log', 'info'];
  var level = 'warn';

  function debug(method) {
    if (levels.indexOf(method) <= levels.indexOf(level)) {
      var _console;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
    }
  }

  function namespace(ns) {
    return levels.reduce(function (logger, method) {
      logger[method] = debug.bind(console, method, ns);
      return logger;
    }, {});
  }

  debug.level = namespace.level = function (newLevel) {
    level = newLevel;
  };

  exports.default = namespace;

  /***/ }),
  /* 11 */
  /***/ (function(module, exports, __webpack_require__) {

  var pSlice = Array.prototype.slice;
  var objectKeys = __webpack_require__(52);
  var isArguments = __webpack_require__(53);

  var deepEqual = module.exports = function (actual, expected, opts) {
    if (!opts) opts = {};
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;

    } else if (actual instanceof Date && expected instanceof Date) {
      return actual.getTime() === expected.getTime();

    // 7.3. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
      return opts.strict ? actual === expected : actual == expected;

    // 7.4. For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      return objEquiv(actual, expected, opts);
    }
  };

  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }

  function isBuffer (x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') return false;
    return true;
  }

  function objEquiv(a, b, opts) {
    var i, key;
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
      return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    //~~~I've managed to break Object.keys through screwy arguments passing.
    //   Converting to array solves the problem.
    if (isArguments(a)) {
      if (!isArguments(b)) {
        return false;
      }
      a = pSlice.call(a);
      b = pSlice.call(b);
      return deepEqual(a, b, opts);
    }
    if (isBuffer(a)) {
      if (!isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) return false;
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }
    try {
      var ka = objectKeys(a),
          kb = objectKeys(b);
    } catch (e) {//happens when one is a string literal and the other isn't
      return false;
    }
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!deepEqual(a[key], b[key], opts)) return false;
    }
    return typeof a === typeof b;
  }


  /***/ }),
  /* 12 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var Registry = __webpack_require__(1);
  var Attributor = /** @class */ (function () {
      function Attributor(attrName, keyName, options) {
          if (options === void 0) { options = {}; }
          this.attrName = attrName;
          this.keyName = keyName;
          var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
          if (options.scope != null) {
              // Ignore type bits, force attribute bit
              this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
          }
          else {
              this.scope = Registry.Scope.ATTRIBUTE;
          }
          if (options.whitelist != null)
              this.whitelist = options.whitelist;
      }
      Attributor.keys = function (node) {
          return [].map.call(node.attributes, function (item) {
              return item.name;
          });
      };
      Attributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          node.setAttribute(this.keyName, value);
          return true;
      };
      Attributor.prototype.canAdd = function (node, value) {
          var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
          if (match == null)
              return false;
          if (this.whitelist == null)
              return true;
          if (typeof value === 'string') {
              return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
          }
          else {
              return this.whitelist.indexOf(value) > -1;
          }
      };
      Attributor.prototype.remove = function (node) {
          node.removeAttribute(this.keyName);
      };
      Attributor.prototype.value = function (node) {
          var value = node.getAttribute(this.keyName);
          if (this.canAdd(node, value) && value) {
              return value;
          }
          return '';
      };
      return Attributor;
  }());
  exports.default = Attributor;


  /***/ }),
  /* 13 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Code = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Code = function (_Inline) {
    _inherits(Code, _Inline);

    function Code() {
      _classCallCheck(this, Code);

      return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
    }

    return Code;
  }(_inline2.default);

  Code.blotName = 'code';
  Code.tagName = 'CODE';

  var CodeBlock = function (_Block) {
    _inherits(CodeBlock, _Block);

    function CodeBlock() {
      _classCallCheck(this, CodeBlock);

      return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
    }

    _createClass(CodeBlock, [{
      key: 'delta',
      value: function delta() {
        var _this3 = this;

        var text = this.domNode.textContent;
        if (text.endsWith('\n')) {
          // Should always be true
          text = text.slice(0, -1);
        }
        return text.split('\n').reduce(function (delta, frag) {
          return delta.insert(frag).insert('\n', _this3.formats());
        }, new _quillDelta2.default());
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        if (name === this.statics.blotName && value) return;

        var _descendant = this.descendant(_text2.default, this.length() - 1),
            _descendant2 = _slicedToArray(_descendant, 1),
            text = _descendant2[0];

        if (text != null) {
          text.deleteAt(text.length() - 1, 1);
        }
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (length === 0) return;
        if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
          return;
        }
        var nextNewline = this.newlineIndex(index);
        if (nextNewline < 0 || nextNewline >= index + length) return;
        var prevNewline = this.newlineIndex(index, true) + 1;
        var isolateLength = nextNewline - prevNewline + 1;
        var blot = this.isolate(prevNewline, isolateLength);
        var next = blot.next;
        blot.format(name, value);
        if (next instanceof CodeBlock) {
          next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
        }
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null) return;

        var _descendant3 = this.descendant(_text2.default, index),
            _descendant4 = _slicedToArray(_descendant3, 2),
            text = _descendant4[0],
            offset = _descendant4[1];

        text.insertAt(offset, value);
      }
    }, {
      key: 'length',
      value: function length() {
        var length = this.domNode.textContent.length;
        if (!this.domNode.textContent.endsWith('\n')) {
          return length + 1;
        }
        return length;
      }
    }, {
      key: 'newlineIndex',
      value: function newlineIndex(searchIndex) {
        var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!reverse) {
          var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
          return offset > -1 ? searchIndex + offset : -1;
        } else {
          return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        if (!this.domNode.textContent.endsWith('\n')) {
          this.appendChild(_parchment2.default.create('text', '\n'));
        }
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
        var next = this.next;
        if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
          next.optimize(context);
          next.moveChildren(this);
          next.remove();
        }
      }
    }, {
      key: 'replace',
      value: function replace(target) {
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
        [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
          var blot = _parchment2.default.find(node);
          if (blot == null) {
            node.parentNode.removeChild(node);
          } else if (blot instanceof _parchment2.default.Embed) {
            blot.remove();
          } else {
            blot.unwrap();
          }
        });
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
        domNode.setAttribute('spellcheck', false);
        return domNode;
      }
    }, {
      key: 'formats',
      value: function formats() {
        return true;
      }
    }]);

    return CodeBlock;
  }(_block2.default);

  CodeBlock.blotName = 'code-block';
  CodeBlock.tagName = 'PRE';
  CodeBlock.TAB = '  ';

  exports.Code = Code;
  exports.default = CodeBlock;

  /***/ }),
  /* 14 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _op = __webpack_require__(20);

  var _op2 = _interopRequireDefault(_op);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _cursor = __webpack_require__(24);

  var _cursor2 = _interopRequireDefault(_cursor);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ASCII = /^[ -~]*$/;

  var Editor = function () {
    function Editor(scroll) {
      _classCallCheck(this, Editor);

      this.scroll = scroll;
      this.delta = this.getDelta();
    }

    _createClass(Editor, [{
      key: 'applyDelta',
      value: function applyDelta(delta) {
        var _this = this;

        var consumeNextNewline = false;
        this.scroll.update();
        var scrollLength = this.scroll.length();
        this.scroll.batchStart();
        delta = normalizeDelta(delta);
        delta.reduce(function (index, op) {
          var length = op.retain || op.delete || op.insert.length || 1;
          var attributes = op.attributes || {};
          if (op.insert != null) {
            if (typeof op.insert === 'string') {
              var text = op.insert;
              if (text.endsWith('\n') && consumeNextNewline) {
                consumeNextNewline = false;
                text = text.slice(0, -1);
              }
              if (index >= scrollLength && !text.endsWith('\n')) {
                consumeNextNewline = true;
              }
              _this.scroll.insertAt(index, text);

              var _scroll$line = _this.scroll.line(index),
                  _scroll$line2 = _slicedToArray(_scroll$line, 2),
                  line = _scroll$line2[0],
                  offset = _scroll$line2[1];

              var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
              if (line instanceof _block2.default) {
                var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
                    _line$descendant2 = _slicedToArray(_line$descendant, 1),
                    leaf = _line$descendant2[0];

                formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
              }
              attributes = _op2.default.attributes.diff(formats, attributes) || {};
            } else if (_typeof(op.insert) === 'object') {
              var key = Object.keys(op.insert)[0]; // There should only be one key
              if (key == null) return index;
              _this.scroll.insertAt(index, key, op.insert[key]);
            }
            scrollLength += length;
          }
          Object.keys(attributes).forEach(function (name) {
            _this.scroll.formatAt(index, length, name, attributes[name]);
          });
          return index + length;
        }, 0);
        delta.reduce(function (index, op) {
          if (typeof op.delete === 'number') {
            _this.scroll.deleteAt(index, op.delete);
            return index;
          }
          return index + (op.retain || op.insert.length || 1);
        }, 0);
        this.scroll.batchEnd();
        return this.update(delta);
      }
    }, {
      key: 'deleteText',
      value: function deleteText(index, length) {
        this.scroll.deleteAt(index, length);
        return this.update(new _quillDelta2.default().retain(index).delete(length));
      }
    }, {
      key: 'formatLine',
      value: function formatLine(index, length) {
        var _this2 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        this.scroll.update();
        Object.keys(formats).forEach(function (format) {
          if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
          var lines = _this2.scroll.lines(index, Math.max(length, 1));
          var lengthRemaining = length;
          lines.forEach(function (line) {
            var lineLength = line.length();
            if (!(line instanceof _code2.default)) {
              line.format(format, formats[format]);
            } else {
              var codeIndex = index - line.offset(_this2.scroll);
              var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
              line.formatAt(codeIndex, codeLength, format, formats[format]);
            }
            lengthRemaining -= lineLength;
          });
        });
        this.scroll.optimize();
        return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'formatText',
      value: function formatText(index, length) {
        var _this3 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        Object.keys(formats).forEach(function (format) {
          _this3.scroll.formatAt(index, length, format, formats[format]);
        });
        return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'getContents',
      value: function getContents(index, length) {
        return this.delta.slice(index, index + length);
      }
    }, {
      key: 'getDelta',
      value: function getDelta() {
        return this.scroll.lines().reduce(function (delta, line) {
          return delta.concat(line.delta());
        }, new _quillDelta2.default());
      }
    }, {
      key: 'getFormat',
      value: function getFormat(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var lines = [],
            leaves = [];
        if (length === 0) {
          this.scroll.path(index).forEach(function (path) {
            var _path = _slicedToArray(path, 1),
                blot = _path[0];

            if (blot instanceof _block2.default) {
              lines.push(blot);
            } else if (blot instanceof _parchment2.default.Leaf) {
              leaves.push(blot);
            }
          });
        } else {
          lines = this.scroll.lines(index, length);
          leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
        }
        var formatsArr = [lines, leaves].map(function (blots) {
          if (blots.length === 0) return {};
          var formats = (0, _block.bubbleFormats)(blots.shift());
          while (Object.keys(formats).length > 0) {
            var blot = blots.shift();
            if (blot == null) return formats;
            formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
          }
          return formats;
        });
        return _extend2.default.apply(_extend2.default, formatsArr);
      }
    }, {
      key: 'getText',
      value: function getText(index, length) {
        return this.getContents(index, length).filter(function (op) {
          return typeof op.insert === 'string';
        }).map(function (op) {
          return op.insert;
        }).join('');
      }
    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed, value) {
        this.scroll.insertAt(index, embed, value);
        return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
      }
    }, {
      key: 'insertText',
      value: function insertText(index, text) {
        var _this4 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        this.scroll.insertAt(index, text);
        Object.keys(formats).forEach(function (format) {
          _this4.scroll.formatAt(index, text.length, format, formats[format]);
        });
        return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'isBlank',
      value: function isBlank() {
        if (this.scroll.children.length == 0) return true;
        if (this.scroll.children.length > 1) return false;
        var block = this.scroll.children.head;
        if (block.statics.blotName !== _block2.default.blotName) return false;
        if (block.children.length > 1) return false;
        return block.children.head instanceof _break2.default;
      }
    }, {
      key: 'removeFormat',
      value: function removeFormat(index, length) {
        var text = this.getText(index, length);

        var _scroll$line3 = this.scroll.line(index + length),
            _scroll$line4 = _slicedToArray(_scroll$line3, 2),
            line = _scroll$line4[0],
            offset = _scroll$line4[1];

        var suffixLength = 0,
            suffix = new _quillDelta2.default();
        if (line != null) {
          if (!(line instanceof _code2.default)) {
            suffixLength = line.length() - offset;
          } else {
            suffixLength = line.newlineIndex(offset) - offset + 1;
          }
          suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
        }
        var contents = this.getContents(index, length + suffixLength);
        var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
        var delta = new _quillDelta2.default().retain(index).concat(diff);
        return this.applyDelta(delta);
      }
    }, {
      key: 'update',
      value: function update(change) {
        var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        var oldDelta = this.delta;
        if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
          // Optimization for character changes
          var textBlot = _parchment2.default.find(mutations[0].target);
          var formats = (0, _block.bubbleFormats)(textBlot);
          var index = textBlot.offset(this.scroll);
          var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
          var oldText = new _quillDelta2.default().insert(oldValue);
          var newText = new _quillDelta2.default().insert(textBlot.value());
          var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
          change = diffDelta.reduce(function (delta, op) {
            if (op.insert) {
              return delta.insert(op.insert, formats);
            } else {
              return delta.push(op);
            }
          }, new _quillDelta2.default());
          this.delta = oldDelta.compose(change);
        } else {
          this.delta = this.getDelta();
          if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
            change = oldDelta.diff(this.delta, cursorIndex);
          }
        }
        return change;
      }
    }]);

    return Editor;
  }();

  function combineFormats(formats, combined) {
    return Object.keys(combined).reduce(function (merged, name) {
      if (formats[name] == null) return merged;
      if (combined[name] === formats[name]) {
        merged[name] = combined[name];
      } else if (Array.isArray(combined[name])) {
        if (combined[name].indexOf(formats[name]) < 0) {
          merged[name] = combined[name].concat([formats[name]]);
        }
      } else {
        merged[name] = [combined[name], formats[name]];
      }
      return merged;
    }, {});
  }

  function normalizeDelta(delta) {
    return delta.reduce(function (delta, op) {
      if (op.insert === 1) {
        var attributes = (0, _clone2.default)(op.attributes);
        delete attributes['image'];
        return delta.insert({ image: op.attributes.image }, attributes);
      }
      if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
        op = (0, _clone2.default)(op);
        if (op.attributes.list) {
          op.attributes.list = 'ordered';
        } else {
          op.attributes.list = 'bullet';
          delete op.attributes.bullet;
        }
      }
      if (typeof op.insert === 'string') {
        var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        return delta.insert(text, op.attributes);
      }
      return delta.push(op);
    }, new _quillDelta2.default());
  }

  exports.default = Editor;

  /***/ }),
  /* 15 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Range = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _emitter3 = __webpack_require__(8);

  var _emitter4 = _interopRequireDefault(_emitter3);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = (0, _logger2.default)('quill:selection');

  var Range = function Range(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, Range);

    this.index = index;
    this.length = length;
  };

  var Selection = function () {
    function Selection(scroll, emitter) {
      var _this = this;

      _classCallCheck(this, Selection);

      this.emitter = emitter;
      this.scroll = scroll;
      this.composing = false;
      this.mouseDown = false;
      this.root = this.scroll.domNode;
      this.cursor = _parchment2.default.create('cursor', this);
      // savedRange is last non-null range
      this.lastRange = this.savedRange = new Range(0, 0);
      this.handleComposition();
      this.handleDragging();
      this.emitter.listenDOM('selectionchange', document, function () {
        if (!_this.mouseDown) {
          setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
        }
      });
      this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
        if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
          _this.update(_emitter4.default.sources.SILENT);
        }
      });
      this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
        if (!_this.hasFocus()) return;
        var native = _this.getNativeRange();
        if (native == null) return;
        if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
        // TODO unclear if this has negative side effects
        _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
          try {
            _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
          } catch (ignored) {}
        });
      });
      this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
        if (context.range) {
          var _context$range = context.range,
              startNode = _context$range.startNode,
              startOffset = _context$range.startOffset,
              endNode = _context$range.endNode,
              endOffset = _context$range.endOffset;

          _this.setNativeRange(startNode, startOffset, endNode, endOffset);
        }
      });
      this.update(_emitter4.default.sources.SILENT);
    }

    _createClass(Selection, [{
      key: 'handleComposition',
      value: function handleComposition() {
        var _this2 = this;

        this.root.addEventListener('compositionstart', function () {
          _this2.composing = true;
        });
        this.root.addEventListener('compositionend', function () {
          _this2.composing = false;
          if (_this2.cursor.parent) {
            var range = _this2.cursor.restore();
            if (!range) return;
            setTimeout(function () {
              _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
            }, 1);
          }
        });
      }
    }, {
      key: 'handleDragging',
      value: function handleDragging() {
        var _this3 = this;

        this.emitter.listenDOM('mousedown', document.body, function () {
          _this3.mouseDown = true;
        });
        this.emitter.listenDOM('mouseup', document.body, function () {
          _this3.mouseDown = false;
          _this3.update(_emitter4.default.sources.USER);
        });
      }
    }, {
      key: 'focus',
      value: function focus() {
        if (this.hasFocus()) return;
        this.root.focus();
        this.setRange(this.savedRange);
      }
    }, {
      key: 'format',
      value: function format(_format, value) {
        if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
        this.scroll.update();
        var nativeRange = this.getNativeRange();
        if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
        if (nativeRange.start.node !== this.cursor.textNode) {
          var blot = _parchment2.default.find(nativeRange.start.node, false);
          if (blot == null) return;
          // TODO Give blot ability to not split
          if (blot instanceof _parchment2.default.Leaf) {
            var after = blot.split(nativeRange.start.offset);
            blot.parent.insertBefore(this.cursor, after);
          } else {
            blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
          }
          this.cursor.attach();
        }
        this.cursor.format(_format, value);
        this.scroll.optimize();
        this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
        this.update();
      }
    }, {
      key: 'getBounds',
      value: function getBounds(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var scrollLength = this.scroll.length();
        index = Math.min(index, scrollLength - 1);
        length = Math.min(index + length, scrollLength - 1) - index;
        var node = void 0,
            _scroll$leaf = this.scroll.leaf(index),
            _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
            leaf = _scroll$leaf2[0],
            offset = _scroll$leaf2[1];
        if (leaf == null) return null;

        var _leaf$position = leaf.position(offset, true);

        var _leaf$position2 = _slicedToArray(_leaf$position, 2);

        node = _leaf$position2[0];
        offset = _leaf$position2[1];

        var range = document.createRange();
        if (length > 0) {
          range.setStart(node, offset);

          var _scroll$leaf3 = this.scroll.leaf(index + length);

          var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

          leaf = _scroll$leaf4[0];
          offset = _scroll$leaf4[1];

          if (leaf == null) return null;

          var _leaf$position3 = leaf.position(offset, true);

          var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

          node = _leaf$position4[0];
          offset = _leaf$position4[1];

          range.setEnd(node, offset);
          return range.getBoundingClientRect();
        } else {
          var side = 'left';
          var rect = void 0;
          if (node instanceof Text) {
            if (offset < node.data.length) {
              range.setStart(node, offset);
              range.setEnd(node, offset + 1);
            } else {
              range.setStart(node, offset - 1);
              range.setEnd(node, offset);
              side = 'right';
            }
            rect = range.getBoundingClientRect();
          } else {
            rect = leaf.domNode.getBoundingClientRect();
            if (offset > 0) side = 'right';
          }
          return {
            bottom: rect.top + rect.height,
            height: rect.height,
            left: rect[side],
            right: rect[side],
            top: rect.top,
            width: 0
          };
        }
      }
    }, {
      key: 'getNativeRange',
      value: function getNativeRange() {
        var selection = document.getSelection();
        if (selection == null || selection.rangeCount <= 0) return null;
        var nativeRange = selection.getRangeAt(0);
        if (nativeRange == null) return null;
        var range = this.normalizeNative(nativeRange);
        debug.info('getNativeRange', range);
        return range;
      }
    }, {
      key: 'getRange',
      value: function getRange() {
        var normalized = this.getNativeRange();
        if (normalized == null) return [null, null];
        var range = this.normalizedToRange(normalized);
        return [range, normalized];
      }
    }, {
      key: 'hasFocus',
      value: function hasFocus() {
        return document.activeElement === this.root;
      }
    }, {
      key: 'normalizedToRange',
      value: function normalizedToRange(range) {
        var _this4 = this;

        var positions = [[range.start.node, range.start.offset]];
        if (!range.native.collapsed) {
          positions.push([range.end.node, range.end.offset]);
        }
        var indexes = positions.map(function (position) {
          var _position = _slicedToArray(position, 2),
              node = _position[0],
              offset = _position[1];

          var blot = _parchment2.default.find(node, true);
          var index = blot.offset(_this4.scroll);
          if (offset === 0) {
            return index;
          } else if (blot instanceof _parchment2.default.Container) {
            return index + blot.length();
          } else {
            return index + blot.index(node, offset);
          }
        });
        var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
        var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
        return new Range(start, end - start);
      }
    }, {
      key: 'normalizeNative',
      value: function normalizeNative(nativeRange) {
        if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
          return null;
        }
        var range = {
          start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
          end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
          native: nativeRange
        };
        [range.start, range.end].forEach(function (position) {
          var node = position.node,
              offset = position.offset;
          while (!(node instanceof Text) && node.childNodes.length > 0) {
            if (node.childNodes.length > offset) {
              node = node.childNodes[offset];
              offset = 0;
            } else if (node.childNodes.length === offset) {
              node = node.lastChild;
              offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
            } else {
              break;
            }
          }
          position.node = node, position.offset = offset;
        });
        return range;
      }
    }, {
      key: 'rangeToNative',
      value: function rangeToNative(range) {
        var _this5 = this;

        var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
        var args = [];
        var scrollLength = this.scroll.length();
        indexes.forEach(function (index, i) {
          index = Math.min(scrollLength - 1, index);
          var node = void 0,
              _scroll$leaf5 = _this5.scroll.leaf(index),
              _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
              leaf = _scroll$leaf6[0],
              offset = _scroll$leaf6[1];
          var _leaf$position5 = leaf.position(offset, i !== 0);

          var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

          node = _leaf$position6[0];
          offset = _leaf$position6[1];

          args.push(node, offset);
        });
        if (args.length < 2) {
          args = args.concat(args);
        }
        return args;
      }
    }, {
      key: 'scrollIntoView',
      value: function scrollIntoView(scrollingContainer) {
        var range = this.lastRange;
        if (range == null) return;
        var bounds = this.getBounds(range.index, range.length);
        if (bounds == null) return;
        var limit = this.scroll.length() - 1;

        var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
            _scroll$line2 = _slicedToArray(_scroll$line, 1),
            first = _scroll$line2[0];

        var last = first;
        if (range.length > 0) {
          var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

          var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

          last = _scroll$line4[0];
        }
        if (first == null || last == null) return;
        var scrollBounds = scrollingContainer.getBoundingClientRect();
        if (bounds.top < scrollBounds.top) {
          scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
        } else if (bounds.bottom > scrollBounds.bottom) {
          scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
        }
      }
    }, {
      key: 'setNativeRange',
      value: function setNativeRange(startNode, startOffset) {
        var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
        var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
        var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
        if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
          return;
        }
        var selection = document.getSelection();
        if (selection == null) return;
        if (startNode != null) {
          if (!this.hasFocus()) this.root.focus();
          var native = (this.getNativeRange() || {}).native;
          if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

            if (startNode.tagName == "BR") {
              startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
              startNode = startNode.parentNode;
            }
            if (endNode.tagName == "BR") {
              endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
              endNode = endNode.parentNode;
            }
            var range = document.createRange();
            range.setStart(startNode, startOffset);
            range.setEnd(endNode, endOffset);
            selection.removeAllRanges();
            selection.addRange(range);
          }
        } else {
          selection.removeAllRanges();
          this.root.blur();
          document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
        }
      }
    }, {
      key: 'setRange',
      value: function setRange(range) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

        if (typeof force === 'string') {
          source = force;
          force = false;
        }
        debug.info('setRange', range);
        if (range != null) {
          var args = this.rangeToNative(range);
          this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
        } else {
          this.setNativeRange(null);
        }
        this.update(source);
      }
    }, {
      key: 'update',
      value: function update() {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

        var oldRange = this.lastRange;

        var _getRange = this.getRange(),
            _getRange2 = _slicedToArray(_getRange, 2),
            lastRange = _getRange2[0],
            nativeRange = _getRange2[1];

        this.lastRange = lastRange;
        if (this.lastRange != null) {
          this.savedRange = this.lastRange;
        }
        if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
          var _emitter;

          if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
            this.cursor.restore();
          }
          var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
          (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
          if (source !== _emitter4.default.sources.SILENT) {
            var _emitter2;

            (_emitter2 = this.emitter).emit.apply(_emitter2, args);
          }
        }
      }
    }]);

    return Selection;
  }();

  function contains(parent, descendant) {
    try {
      // Firefox inserts inaccessible nodes around video elements
      descendant.parentNode;
    } catch (e) {
      return false;
    }
    // IE11 has bug with Text nodes
    // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
    if (descendant instanceof Text) {
      descendant = descendant.parentNode;
    }
    return parent.contains(descendant);
  }

  exports.Range = Range;
  exports.default = Selection;

  /***/ }),
  /* 16 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Break = function (_Parchment$Embed) {
    _inherits(Break, _Parchment$Embed);

    function Break() {
      _classCallCheck(this, Break);

      return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
    }

    _createClass(Break, [{
      key: 'insertInto',
      value: function insertInto(parent, ref) {
        if (parent.children.length === 0) {
          _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
        } else {
          this.remove();
        }
      }
    }, {
      key: 'length',
      value: function length() {
        return 0;
      }
    }, {
      key: 'value',
      value: function value() {
        return '';
      }
    }], [{
      key: 'value',
      value: function value() {
        return undefined;
      }
    }]);

    return Break;
  }(_parchment2.default.Embed);

  Break.blotName = 'break';
  Break.tagName = 'BR';

  exports.default = Break;

  /***/ }),
  /* 17 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var linked_list_1 = __webpack_require__(44);
  var shadow_1 = __webpack_require__(30);
  var Registry = __webpack_require__(1);
  var ContainerBlot = /** @class */ (function (_super) {
      __extends(ContainerBlot, _super);
      function ContainerBlot(domNode) {
          var _this = _super.call(this, domNode) || this;
          _this.build();
          return _this;
      }
      ContainerBlot.prototype.appendChild = function (other) {
          this.insertBefore(other);
      };
      ContainerBlot.prototype.attach = function () {
          _super.prototype.attach.call(this);
          this.children.forEach(function (child) {
              child.attach();
          });
      };
      ContainerBlot.prototype.build = function () {
          var _this = this;
          this.children = new linked_list_1.default();
          // Need to be reversed for if DOM nodes already in order
          [].slice
              .call(this.domNode.childNodes)
              .reverse()
              .forEach(function (node) {
              try {
                  var child = makeBlot(node);
                  _this.insertBefore(child, _this.children.head || undefined);
              }
              catch (err) {
                  if (err instanceof Registry.ParchmentError)
                      return;
                  else
                      throw err;
              }
          });
      };
      ContainerBlot.prototype.deleteAt = function (index, length) {
          if (index === 0 && length === this.length()) {
              return this.remove();
          }
          this.children.forEachAt(index, length, function (child, offset, length) {
              child.deleteAt(offset, length);
          });
      };
      ContainerBlot.prototype.descendant = function (criteria, index) {
          var _a = this.children.find(index), child = _a[0], offset = _a[1];
          if ((criteria.blotName == null && criteria(child)) ||
              (criteria.blotName != null && child instanceof criteria)) {
              return [child, offset];
          }
          else if (child instanceof ContainerBlot) {
              return child.descendant(criteria, offset);
          }
          else {
              return [null, -1];
          }
      };
      ContainerBlot.prototype.descendants = function (criteria, index, length) {
          if (index === void 0) { index = 0; }
          if (length === void 0) { length = Number.MAX_VALUE; }
          var descendants = [];
          var lengthLeft = length;
          this.children.forEachAt(index, length, function (child, index, length) {
              if ((criteria.blotName == null && criteria(child)) ||
                  (criteria.blotName != null && child instanceof criteria)) {
                  descendants.push(child);
              }
              if (child instanceof ContainerBlot) {
                  descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
              }
              lengthLeft -= length;
          });
          return descendants;
      };
      ContainerBlot.prototype.detach = function () {
          this.children.forEach(function (child) {
              child.detach();
          });
          _super.prototype.detach.call(this);
      };
      ContainerBlot.prototype.formatAt = function (index, length, name, value) {
          this.children.forEachAt(index, length, function (child, offset, length) {
              child.formatAt(offset, length, name, value);
          });
      };
      ContainerBlot.prototype.insertAt = function (index, value, def) {
          var _a = this.children.find(index), child = _a[0], offset = _a[1];
          if (child) {
              child.insertAt(offset, value, def);
          }
          else {
              var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
              this.appendChild(blot);
          }
      };
      ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
          if (this.statics.allowedChildren != null &&
              !this.statics.allowedChildren.some(function (child) {
                  return childBlot instanceof child;
              })) {
              throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
          }
          childBlot.insertInto(this, refBlot);
      };
      ContainerBlot.prototype.length = function () {
          return this.children.reduce(function (memo, child) {
              return memo + child.length();
          }, 0);
      };
      ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
          this.children.forEach(function (child) {
              targetParent.insertBefore(child, refNode);
          });
      };
      ContainerBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          if (this.children.length === 0) {
              if (this.statics.defaultChild != null) {
                  var child = Registry.create(this.statics.defaultChild);
                  this.appendChild(child);
                  child.optimize(context);
              }
              else {
                  this.remove();
              }
          }
      };
      ContainerBlot.prototype.path = function (index, inclusive) {
          if (inclusive === void 0) { inclusive = false; }
          var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
          var position = [[this, index]];
          if (child instanceof ContainerBlot) {
              return position.concat(child.path(offset, inclusive));
          }
          else if (child != null) {
              position.push([child, offset]);
          }
          return position;
      };
      ContainerBlot.prototype.removeChild = function (child) {
          this.children.remove(child);
      };
      ContainerBlot.prototype.replace = function (target) {
          if (target instanceof ContainerBlot) {
              target.moveChildren(this);
          }
          _super.prototype.replace.call(this, target);
      };
      ContainerBlot.prototype.split = function (index, force) {
          if (force === void 0) { force = false; }
          if (!force) {
              if (index === 0)
                  return this;
              if (index === this.length())
                  return this.next;
          }
          var after = this.clone();
          this.parent.insertBefore(after, this.next);
          this.children.forEachAt(index, this.length(), function (child, offset, length) {
              child = child.split(offset, force);
              after.appendChild(child);
          });
          return after;
      };
      ContainerBlot.prototype.unwrap = function () {
          this.moveChildren(this.parent, this.next);
          this.remove();
      };
      ContainerBlot.prototype.update = function (mutations, context) {
          var _this = this;
          var addedNodes = [];
          var removedNodes = [];
          mutations.forEach(function (mutation) {
              if (mutation.target === _this.domNode && mutation.type === 'childList') {
                  addedNodes.push.apply(addedNodes, mutation.addedNodes);
                  removedNodes.push.apply(removedNodes, mutation.removedNodes);
              }
          });
          removedNodes.forEach(function (node) {
              // Check node has actually been removed
              // One exception is Chrome does not immediately remove IFRAMEs
              // from DOM but MutationRecord is correct in its reported removal
              if (node.parentNode != null &&
                  // @ts-ignore
                  node.tagName !== 'IFRAME' &&
                  document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                  return;
              }
              var blot = Registry.find(node);
              if (blot == null)
                  return;
              if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                  blot.detach();
              }
          });
          addedNodes
              .filter(function (node) {
              return node.parentNode == _this.domNode;
          })
              .sort(function (a, b) {
              if (a === b)
                  return 0;
              if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                  return 1;
              }
              return -1;
          })
              .forEach(function (node) {
              var refBlot = null;
              if (node.nextSibling != null) {
                  refBlot = Registry.find(node.nextSibling);
              }
              var blot = makeBlot(node);
              if (blot.next != refBlot || blot.next == null) {
                  if (blot.parent != null) {
                      blot.parent.removeChild(_this);
                  }
                  _this.insertBefore(blot, refBlot || undefined);
              }
          });
      };
      return ContainerBlot;
  }(shadow_1.default));
  function makeBlot(node) {
      var blot = Registry.find(node);
      if (blot == null) {
          try {
              blot = Registry.create(node);
          }
          catch (e) {
              blot = Registry.create(Registry.Scope.INLINE);
              [].slice.call(node.childNodes).forEach(function (child) {
                  // @ts-ignore
                  blot.domNode.appendChild(child);
              });
              if (node.parentNode) {
                  node.parentNode.replaceChild(blot.domNode, node);
              }
              blot.attach();
          }
      }
      return blot;
  }
  exports.default = ContainerBlot;


  /***/ }),
  /* 18 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  var store_1 = __webpack_require__(31);
  var container_1 = __webpack_require__(17);
  var Registry = __webpack_require__(1);
  var FormatBlot = /** @class */ (function (_super) {
      __extends(FormatBlot, _super);
      function FormatBlot(domNode) {
          var _this = _super.call(this, domNode) || this;
          _this.attributes = new store_1.default(_this.domNode);
          return _this;
      }
      FormatBlot.formats = function (domNode) {
          if (typeof this.tagName === 'string') {
              return true;
          }
          else if (Array.isArray(this.tagName)) {
              return domNode.tagName.toLowerCase();
          }
          return undefined;
      };
      FormatBlot.prototype.format = function (name, value) {
          var format = Registry.query(name);
          if (format instanceof attributor_1.default) {
              this.attributes.attribute(format, value);
          }
          else if (value) {
              if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                  this.replaceWith(name, value);
              }
          }
      };
      FormatBlot.prototype.formats = function () {
          var formats = this.attributes.values();
          var format = this.statics.formats(this.domNode);
          if (format != null) {
              formats[this.statics.blotName] = format;
          }
          return formats;
      };
      FormatBlot.prototype.replaceWith = function (name, value) {
          var replacement = _super.prototype.replaceWith.call(this, name, value);
          this.attributes.copy(replacement);
          return replacement;
      };
      FormatBlot.prototype.update = function (mutations, context) {
          var _this = this;
          _super.prototype.update.call(this, mutations, context);
          if (mutations.some(function (mutation) {
              return mutation.target === _this.domNode && mutation.type === 'attributes';
          })) {
              this.attributes.build();
          }
      };
      FormatBlot.prototype.wrap = function (name, value) {
          var wrapper = _super.prototype.wrap.call(this, name, value);
          if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
              this.attributes.move(wrapper);
          }
          return wrapper;
      };
      return FormatBlot;
  }(container_1.default));
  exports.default = FormatBlot;


  /***/ }),
  /* 19 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var shadow_1 = __webpack_require__(30);
  var Registry = __webpack_require__(1);
  var LeafBlot = /** @class */ (function (_super) {
      __extends(LeafBlot, _super);
      function LeafBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      LeafBlot.value = function (domNode) {
          return true;
      };
      LeafBlot.prototype.index = function (node, offset) {
          if (this.domNode === node ||
              this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
              return Math.min(offset, 1);
          }
          return -1;
      };
      LeafBlot.prototype.position = function (index, inclusive) {
          var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
          if (index > 0)
              offset += 1;
          return [this.parent.domNode, offset];
      };
      LeafBlot.prototype.value = function () {
          var _a;
          return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
      };
      LeafBlot.scope = Registry.Scope.INLINE_BLOT;
      return LeafBlot;
  }(shadow_1.default));
  exports.default = LeafBlot;


  /***/ }),
  /* 20 */
  /***/ (function(module, exports, __webpack_require__) {

  var equal = __webpack_require__(11);
  var extend = __webpack_require__(3);


  var lib = {
    attributes: {
      compose: function (a, b, keepNull) {
        if (typeof a !== 'object') a = {};
        if (typeof b !== 'object') b = {};
        var attributes = extend(true, {}, b);
        if (!keepNull) {
          attributes = Object.keys(attributes).reduce(function (copy, key) {
            if (attributes[key] != null) {
              copy[key] = attributes[key];
            }
            return copy;
          }, {});
        }
        for (var key in a) {
          if (a[key] !== undefined && b[key] === undefined) {
            attributes[key] = a[key];
          }
        }
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      },

      diff: function(a, b) {
        if (typeof a !== 'object') a = {};
        if (typeof b !== 'object') b = {};
        var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
          if (!equal(a[key], b[key])) {
            attributes[key] = b[key] === undefined ? null : b[key];
          }
          return attributes;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      },

      transform: function (a, b, priority) {
        if (typeof a !== 'object') return b;
        if (typeof b !== 'object') return undefined;
        if (!priority) return b;  // b simply overwrites us without priority
        var attributes = Object.keys(b).reduce(function (attributes, key) {
          if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
          return attributes;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      }
    },

    iterator: function (ops) {
      return new Iterator(ops);
    },

    length: function (op) {
      if (typeof op['delete'] === 'number') {
        return op['delete'];
      } else if (typeof op.retain === 'number') {
        return op.retain;
      } else {
        return typeof op.insert === 'string' ? op.insert.length : 1;
      }
    }
  };


  function Iterator(ops) {
    this.ops = ops;
    this.index = 0;
    this.offset = 0;
  }
  Iterator.prototype.hasNext = function () {
    return this.peekLength() < Infinity;
  };

  Iterator.prototype.next = function (length) {
    if (!length) length = Infinity;
    var nextOp = this.ops[this.index];
    if (nextOp) {
      var offset = this.offset;
      var opLength = lib.length(nextOp);
      if (length >= opLength - offset) {
        length = opLength - offset;
        this.index += 1;
        this.offset = 0;
      } else {
        this.offset += length;
      }
      if (typeof nextOp['delete'] === 'number') {
        return { 'delete': length };
      } else {
        var retOp = {};
        if (nextOp.attributes) {
          retOp.attributes = nextOp.attributes;
        }
        if (typeof nextOp.retain === 'number') {
          retOp.retain = length;
        } else if (typeof nextOp.insert === 'string') {
          retOp.insert = nextOp.insert.substr(offset, length);
        } else {
          // offset should === 0, length should === 1
          retOp.insert = nextOp.insert;
        }
        return retOp;
      }
    } else {
      return { retain: Infinity };
    }
  };

  Iterator.prototype.peek = function () {
    return this.ops[this.index];
  };

  Iterator.prototype.peekLength = function () {
    if (this.ops[this.index]) {
      // Should never return 0 if our index is being managed correctly
      return lib.length(this.ops[this.index]) - this.offset;
    } else {
      return Infinity;
    }
  };

  Iterator.prototype.peekType = function () {
    if (this.ops[this.index]) {
      if (typeof this.ops[this.index]['delete'] === 'number') {
        return 'delete';
      } else if (typeof this.ops[this.index].retain === 'number') {
        return 'retain';
      } else {
        return 'insert';
      }
    }
    return 'retain';
  };

  Iterator.prototype.rest = function () {
    if (!this.hasNext()) {
      return [];
    } else if (this.offset === 0) {
      return this.ops.slice(this.index);
    } else {
      var offset = this.offset;
      var index = this.index;
      var next = this.next();
      var rest = this.ops.slice(this.index);
      this.offset = offset;
      this.index = index;
      return [next].concat(rest);
    }
  };


  module.exports = lib;


  /***/ }),
  /* 21 */
  /***/ (function(module, exports) {

  var clone = (function() {

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;
  try {
    nativeMap = Map;
  } catch(_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function() {};
  }

  var nativeSet;
  try {
    nativeSet = Set;
  } catch(_) {
    nativeSet = function() {};
  }

  var nativePromise;
  try {
    nativePromise = Promise;
  } catch(_) {
    nativePromise = function() {};
  }

  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */
  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    }
    // maintain two arrays for circular references, where corresponding parents
    // and children have the same index
    var allParents = [];
    var allChildren = [];

    var useBuffer = typeof Buffer != 'undefined';

    if (typeof circular == 'undefined')
      circular = true;

    if (typeof depth == 'undefined')
      depth = Infinity;

    // recurse this function so we don't reset allParents and allChildren
    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null)
        return null;

      if (depth === 0)
        return parent;

      var child;
      var proto;
      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function(value) {
            resolve(_clone(value, depth - 1));
          }, function(err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        }
        else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }
        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function(value, key) {
          var keyChild = _clone(key, depth - 1);
          var valueChild = _clone(value, depth - 1);
          child.set(keyChild, valueChild);
        });
      }
      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function(value) {
          var entryChild = _clone(value, depth - 1);
          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;
        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }
        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);
        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }
          child[symbol] = _clone(parent[symbol], depth - 1);
          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);
        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
          if (descriptor && descriptor.enumerable) {
            continue;
          }
          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }

  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */
  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null)
      return null;

    var c = function () {};
    c.prototype = parent;
    return new c();
  };

  // private utility functions

  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }
  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }
  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }
  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }
  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }
  clone.__getRegExpFlags = __getRegExpFlags;

  return clone;
  })();

  if (typeof module === 'object' && module.exports) {
    module.exports = clone;
  }


  /***/ }),
  /* 22 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function isLine(blot) {
    return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
  }

  var Scroll = function (_Parchment$Scroll) {
    _inherits(Scroll, _Parchment$Scroll);

    function Scroll(domNode, config) {
      _classCallCheck(this, Scroll);

      var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

      _this.emitter = config.emitter;
      if (Array.isArray(config.whitelist)) {
        _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
          whitelist[format] = true;
          return whitelist;
        }, {});
      }
      // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
      _this.domNode.addEventListener('DOMNodeInserted', function () {});
      _this.optimize();
      _this.enable();
      return _this;
    }

    _createClass(Scroll, [{
      key: 'batchStart',
      value: function batchStart() {
        this.batch = true;
      }
    }, {
      key: 'batchEnd',
      value: function batchEnd() {
        this.batch = false;
        this.optimize();
      }
    }, {
      key: 'deleteAt',
      value: function deleteAt(index, length) {
        var _line = this.line(index),
            _line2 = _slicedToArray(_line, 2),
            first = _line2[0],
            offset = _line2[1];

        var _line3 = this.line(index + length),
            _line4 = _slicedToArray(_line3, 1),
            last = _line4[0];

        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
        if (last != null && first !== last && offset > 0) {
          if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
            this.optimize();
            return;
          }
          if (first instanceof _code2.default) {
            var newlineIndex = first.newlineIndex(first.length(), true);
            if (newlineIndex > -1) {
              first = first.split(newlineIndex + 1);
              if (first === last) {
                this.optimize();
                return;
              }
            }
          } else if (last instanceof _code2.default) {
            var _newlineIndex = last.newlineIndex(0);
            if (_newlineIndex > -1) {
              last.split(_newlineIndex + 1);
            }
          }
          var ref = last.children.head instanceof _break2.default ? null : last.children.head;
          first.moveChildren(last, ref);
          first.remove();
        }
        this.optimize();
      }
    }, {
      key: 'enable',
      value: function enable() {
        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.domNode.setAttribute('contenteditable', enabled);
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, format, value) {
        if (this.whitelist != null && !this.whitelist[format]) return;
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
        this.optimize();
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null && this.whitelist != null && !this.whitelist[value]) return;
        if (index >= this.length()) {
          if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
            var blot = _parchment2.default.create(this.statics.defaultChild);
            this.appendChild(blot);
            if (def == null && value.endsWith('\n')) {
              value = value.slice(0, -1);
            }
            blot.insertAt(0, value, def);
          } else {
            var embed = _parchment2.default.create(value, def);
            this.appendChild(embed);
          }
        } else {
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
        }
        this.optimize();
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
          var wrapper = _parchment2.default.create(this.statics.defaultChild);
          wrapper.appendChild(blot);
          blot = wrapper;
        }
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
      }
    }, {
      key: 'leaf',
      value: function leaf(index) {
        return this.path(index).pop() || [null, -1];
      }
    }, {
      key: 'line',
      value: function line(index) {
        if (index === this.length()) {
          return this.line(index - 1);
        }
        return this.descendant(isLine, index);
      }
    }, {
      key: 'lines',
      value: function lines() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

        var getLines = function getLines(blot, index, length) {
          var lines = [],
              lengthLeft = length;
          blot.children.forEachAt(index, length, function (child, index, length) {
            if (isLine(child)) {
              lines.push(child);
            } else if (child instanceof _parchment2.default.Container) {
              lines = lines.concat(getLines(child, index, lengthLeft));
            }
            lengthLeft -= length;
          });
          return lines;
        };
        return getLines(this, index, length);
      }
    }, {
      key: 'optimize',
      value: function optimize() {
        var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.batch === true) return;
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
        }
      }
    }, {
      key: 'path',
      value: function path(index) {
        return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
      }
    }, {
      key: 'update',
      value: function update(mutations) {
        if (this.batch === true) return;
        var source = _emitter2.default.sources.USER;
        if (typeof mutations === 'string') {
          source = mutations;
        }
        if (!Array.isArray(mutations)) {
          mutations = this.observer.takeRecords();
        }
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
        }
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
        }
      }
    }]);

    return Scroll;
  }(_parchment2.default.Scroll);

  Scroll.blotName = 'scroll';
  Scroll.className = 'ql-editor';
  Scroll.tagName = 'DIV';
  Scroll.defaultChild = 'block';
  Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

  exports.default = Scroll;

  /***/ }),
  /* 23 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SHORTKEY = exports.default = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _op = __webpack_require__(20);

  var _op2 = _interopRequireDefault(_op);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:keyboard');

  var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

  var Keyboard = function (_Module) {
    _inherits(Keyboard, _Module);

    _createClass(Keyboard, null, [{
      key: 'match',
      value: function match(evt, binding) {
        binding = normalize(binding);
        if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
          return !!binding[key] !== evt[key] && binding[key] !== null;
        })) {
          return false;
        }
        return binding.key === (evt.which || evt.keyCode);
      }
    }]);

    function Keyboard(quill, options) {
      _classCallCheck(this, Keyboard);

      var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

      _this.bindings = {};
      Object.keys(_this.options.bindings).forEach(function (name) {
        if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
          return;
        }
        if (_this.options.bindings[name]) {
          _this.addBinding(_this.options.bindings[name]);
        }
      });
      _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
      _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
      if (/Firefox/i.test(navigator.userAgent)) {
        // Need to handle delete and backspace for Firefox in the general case #1171
        _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
        _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
      } else {
        _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
        _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
      }
      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
      _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
      _this.listen();
      return _this;
    }

    _createClass(Keyboard, [{
      key: 'addBinding',
      value: function addBinding(key) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var binding = normalize(key);
        if (binding == null || binding.key == null) {
          return debug.warn('Attempted to add invalid keyboard binding', binding);
        }
        if (typeof context === 'function') {
          context = { handler: context };
        }
        if (typeof handler === 'function') {
          handler = { handler: handler };
        }
        binding = (0, _extend2.default)(binding, context, handler);
        this.bindings[binding.key] = this.bindings[binding.key] || [];
        this.bindings[binding.key].push(binding);
      }
    }, {
      key: 'listen',
      value: function listen() {
        var _this2 = this;

        this.quill.root.addEventListener('keydown', function (evt) {
          if (evt.defaultPrevented) return;
          var which = evt.which || evt.keyCode;
          var bindings = (_this2.bindings[which] || []).filter(function (binding) {
            return Keyboard.match(evt, binding);
          });
          if (bindings.length === 0) return;
          var range = _this2.quill.getSelection();
          if (range == null || !_this2.quill.hasFocus()) return;

          var _quill$getLine = _this2.quill.getLine(range.index),
              _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
              line = _quill$getLine2[0],
              offset = _quill$getLine2[1];

          var _quill$getLeaf = _this2.quill.getLeaf(range.index),
              _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
              leafStart = _quill$getLeaf2[0],
              offsetStart = _quill$getLeaf2[1];

          var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
              _ref2 = _slicedToArray(_ref, 2),
              leafEnd = _ref2[0],
              offsetEnd = _ref2[1];

          var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
          var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
          var curContext = {
            collapsed: range.length === 0,
            empty: range.length === 0 && line.length() <= 1,
            format: _this2.quill.getFormat(range),
            offset: offset,
            prefix: prefixText,
            suffix: suffixText
          };
          var prevented = bindings.some(function (binding) {
            if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
            if (binding.empty != null && binding.empty !== curContext.empty) return false;
            if (binding.offset != null && binding.offset !== curContext.offset) return false;
            if (Array.isArray(binding.format)) {
              // any format is present
              if (binding.format.every(function (name) {
                return curContext.format[name] == null;
              })) {
                return false;
              }
            } else if (_typeof(binding.format) === 'object') {
              // all formats must match
              if (!Object.keys(binding.format).every(function (name) {
                if (binding.format[name] === true) return curContext.format[name] != null;
                if (binding.format[name] === false) return curContext.format[name] == null;
                return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
              })) {
                return false;
              }
            }
            if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
            if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
            return binding.handler.call(_this2, range, curContext) !== true;
          });
          if (prevented) {
            evt.preventDefault();
          }
        });
      }
    }]);

    return Keyboard;
  }(_module2.default);

  Keyboard.keys = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESCAPE: 27,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  Keyboard.DEFAULTS = {
    bindings: {
      'bold': makeFormatHandler('bold'),
      'italic': makeFormatHandler('italic'),
      'underline': makeFormatHandler('underline'),
      'indent': {
        // highlight tab or tab at beginning of list, indent or blockquote
        key: Keyboard.keys.TAB,
        format: ['blockquote', 'indent', 'list'],
        handler: function handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '+1', _quill2.default.sources.USER);
        }
      },
      'outdent': {
        key: Keyboard.keys.TAB,
        shiftKey: true,
        format: ['blockquote', 'indent', 'list'],
        // highlight tab or tab at beginning of list, indent or blockquote
        handler: function handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '-1', _quill2.default.sources.USER);
        }
      },
      'outdent backspace': {
        key: Keyboard.keys.BACKSPACE,
        collapsed: true,
        shiftKey: null,
        metaKey: null,
        ctrlKey: null,
        altKey: null,
        format: ['indent', 'list'],
        offset: 0,
        handler: function handler(range, context) {
          if (context.format.indent != null) {
            this.quill.format('indent', '-1', _quill2.default.sources.USER);
          } else if (context.format.list != null) {
            this.quill.format('list', false, _quill2.default.sources.USER);
          }
        }
      },
      'indent code-block': makeCodeBlockHandler(true),
      'outdent code-block': makeCodeBlockHandler(false),
      'remove tab': {
        key: Keyboard.keys.TAB,
        shiftKey: true,
        collapsed: true,
        prefix: /\t$/,
        handler: function handler(range) {
          this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
        }
      },
      'tab': {
        key: Keyboard.keys.TAB,
        handler: function handler(range) {
          this.quill.history.cutoff();
          var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
        }
      },
      'list empty enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['list'],
        empty: true,
        handler: function handler(range, context) {
          this.quill.format('list', false, _quill2.default.sources.USER);
          if (context.format.indent) {
            this.quill.format('indent', false, _quill2.default.sources.USER);
          }
        }
      },
      'checklist enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: { list: 'checked' },
        handler: function handler(range) {
          var _quill$getLine3 = this.quill.getLine(range.index),
              _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
              line = _quill$getLine4[0],
              offset = _quill$getLine4[1];

          var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
          var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          this.quill.scrollIntoView();
        }
      },
      'header enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['header'],
        suffix: /^$/,
        handler: function handler(range, context) {
          var _quill$getLine5 = this.quill.getLine(range.index),
              _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
              line = _quill$getLine6[0],
              offset = _quill$getLine6[1];

          var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          this.quill.scrollIntoView();
        }
      },
      'list autofill': {
        key: ' ',
        collapsed: true,
        format: { list: false },
        prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
        handler: function handler(range, context) {
          var length = context.prefix.length;

          var _quill$getLine7 = this.quill.getLine(range.index),
              _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
              line = _quill$getLine8[0],
              offset = _quill$getLine8[1];

          if (offset > length) return true;
          var value = void 0;
          switch (context.prefix.trim()) {
            case '[]':case '[ ]':
              value = 'unchecked';
              break;
            case '[x]':
              value = 'checked';
              break;
            case '-':case '*':
              value = 'bullet';
              break;
            default:
              value = 'ordered';
          }
          this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
          this.quill.history.cutoff();
          var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
        }
      },
      'code exit': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['code-block'],
        prefix: /\n\n$/,
        suffix: /^\s+$/,
        handler: function handler(range) {
          var _quill$getLine9 = this.quill.getLine(range.index),
              _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
              line = _quill$getLine10[0],
              offset = _quill$getLine10[1];

          var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
          this.quill.updateContents(delta, _quill2.default.sources.USER);
        }
      },
      'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
      'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
      'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
      'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
    }
  };

  function makeEmbedArrowHandler(key, shiftKey) {
    var _ref3;

    var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
    return _ref3 = {
      key: key,
      shiftKey: shiftKey,
      altKey: null
    }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
      var index = range.index;
      if (key === Keyboard.keys.RIGHT) {
        index += range.length + 1;
      }

      var _quill$getLeaf3 = this.quill.getLeaf(index),
          _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
          leaf = _quill$getLeaf4[0];

      if (!(leaf instanceof _parchment2.default.Embed)) return true;
      if (key === Keyboard.keys.LEFT) {
        if (shiftKey) {
          this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
        } else {
          this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
        }
      } else {
        if (shiftKey) {
          this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
        } else {
          this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
        }
      }
      return false;
    }), _ref3;
  }

  function handleBackspace(range, context) {
    if (range.index === 0 || this.quill.getLength() <= 1) return;

    var _quill$getLine11 = this.quill.getLine(range.index),
        _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
        line = _quill$getLine12[0];

    var formats = {};
    if (context.offset === 0) {
      var _quill$getLine13 = this.quill.getLine(range.index - 1),
          _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
          prev = _quill$getLine14[0];

      if (prev != null && prev.length() > 1) {
        var curFormats = line.formats();
        var prevFormats = this.quill.getFormat(range.index - 1, 1);
        formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
      }
    }
    // Check for astral symbols
    var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
    this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
    }
    this.quill.focus();
  }

  function handleDelete(range, context) {
    // Check for astral symbols
    var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
    if (range.index >= this.quill.getLength() - length) return;
    var formats = {},
        nextLength = 0;

    var _quill$getLine15 = this.quill.getLine(range.index),
        _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
        line = _quill$getLine16[0];

    if (context.offset >= line.length() - 1) {
      var _quill$getLine17 = this.quill.getLine(range.index + 1),
          _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
          next = _quill$getLine18[0];

      if (next) {
        var curFormats = line.formats();
        var nextFormats = this.quill.getFormat(range.index, 1);
        formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
        nextLength = next.length();
      }
    }
    this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
    }
  }

  function handleDeleteRange(range) {
    var lines = this.quill.getLines(range);
    var formats = {};
    if (lines.length > 1) {
      var firstFormats = lines[0].formats();
      var lastFormats = lines[lines.length - 1].formats();
      formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
    }
    this.quill.deleteText(range, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
    }
    this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
    this.quill.focus();
  }

  function handleEnter(range, context) {
    var _this3 = this;

    if (range.length > 0) {
      this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
    }
    var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
      if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
        lineFormats[format] = context.format[format];
      }
      return lineFormats;
    }, {});
    this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
    // Earlier scroll.deleteAt might have messed up our selection,
    // so insertText's built in selection preservation is not reliable
    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    this.quill.focus();
    Object.keys(context.format).forEach(function (name) {
      if (lineFormats[name] != null) return;
      if (Array.isArray(context.format[name])) return;
      if (name === 'link') return;
      _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
    });
  }

  function makeCodeBlockHandler(indent) {
    return {
      key: Keyboard.keys.TAB,
      shiftKey: !indent,
      format: { 'code-block': true },
      handler: function handler(range) {
        var CodeBlock = _parchment2.default.query('code-block');
        var index = range.index,
            length = range.length;

        var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
            _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
            block = _quill$scroll$descend2[0],
            offset = _quill$scroll$descend2[1];

        if (block == null) return;
        var scrollIndex = this.quill.getIndex(block);
        var start = block.newlineIndex(offset, true) + 1;
        var end = block.newlineIndex(scrollIndex + offset + length);
        var lines = block.domNode.textContent.slice(start, end).split('\n');
        offset = 0;
        lines.forEach(function (line, i) {
          if (indent) {
            block.insertAt(start + offset, CodeBlock.TAB);
            offset += CodeBlock.TAB.length;
            if (i === 0) {
              index += CodeBlock.TAB.length;
            } else {
              length += CodeBlock.TAB.length;
            }
          } else if (line.startsWith(CodeBlock.TAB)) {
            block.deleteAt(start + offset, CodeBlock.TAB.length);
            offset -= CodeBlock.TAB.length;
            if (i === 0) {
              index -= CodeBlock.TAB.length;
            } else {
              length -= CodeBlock.TAB.length;
            }
          }
          offset += line.length + 1;
        });
        this.quill.update(_quill2.default.sources.USER);
        this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
      }
    };
  }

  function makeFormatHandler(format) {
    return {
      key: format[0].toUpperCase(),
      shortKey: true,
      handler: function handler(range, context) {
        this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
      }
    };
  }

  function normalize(binding) {
    if (typeof binding === 'string' || typeof binding === 'number') {
      return normalize({ key: binding });
    }
    if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
      binding = (0, _clone2.default)(binding, false);
    }
    if (typeof binding.key === 'string') {
      if (Keyboard.keys[binding.key.toUpperCase()] != null) {
        binding.key = Keyboard.keys[binding.key.toUpperCase()];
      } else if (binding.key.length === 1) {
        binding.key = binding.key.toUpperCase().charCodeAt(0);
      } else {
        return null;
      }
    }
    if (binding.shortKey) {
      binding[SHORTKEY] = binding.shortKey;
      delete binding.shortKey;
    }
    return binding;
  }

  exports.default = Keyboard;
  exports.SHORTKEY = SHORTKEY;

  /***/ }),
  /* 24 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Cursor = function (_Parchment$Embed) {
    _inherits(Cursor, _Parchment$Embed);

    _createClass(Cursor, null, [{
      key: 'value',
      value: function value() {
        return undefined;
      }
    }]);

    function Cursor(domNode, selection) {
      _classCallCheck(this, Cursor);

      var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

      _this.selection = selection;
      _this.textNode = document.createTextNode(Cursor.CONTENTS);
      _this.domNode.appendChild(_this.textNode);
      _this._length = 0;
      return _this;
    }

    _createClass(Cursor, [{
      key: 'detach',
      value: function detach() {
        // super.detach() will also clear domNode.__blot
        if (this.parent != null) this.parent.removeChild(this);
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        if (this._length !== 0) {
          return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
        }
        var target = this,
            index = 0;
        while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
          index += target.offset(target.parent);
          target = target.parent;
        }
        if (target != null) {
          this._length = Cursor.CONTENTS.length;
          target.optimize();
          target.formatAt(index, Cursor.CONTENTS.length, name, value);
          this._length = 0;
        }
      }
    }, {
      key: 'index',
      value: function index(node, offset) {
        if (node === this.textNode) return 0;
        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
      }
    }, {
      key: 'length',
      value: function length() {
        return this._length;
      }
    }, {
      key: 'position',
      value: function position() {
        return [this.textNode, this.textNode.data.length];
      }
    }, {
      key: 'remove',
      value: function remove() {
        _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
        this.parent = null;
      }
    }, {
      key: 'restore',
      value: function restore() {
        if (this.selection.composing || this.parent == null) return;
        var textNode = this.textNode;
        var range = this.selection.getNativeRange();
        var restoreText = void 0,
            start = void 0,
            end = void 0;
        if (range != null && range.start.node === textNode && range.end.node === textNode) {
          var _ref = [textNode, range.start.offset, range.end.offset];
          restoreText = _ref[0];
          start = _ref[1];
          end = _ref[2];
        }
        // Link format will insert text outside of anchor tag
        while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
          this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
        }
        if (this.textNode.data !== Cursor.CONTENTS) {
          var text = this.textNode.data.split(Cursor.CONTENTS).join('');
          if (this.next instanceof _text2.default) {
            restoreText = this.next.domNode;
            this.next.insertAt(0, text);
            this.textNode.data = Cursor.CONTENTS;
          } else {
            this.textNode.data = text;
            this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
            this.textNode = document.createTextNode(Cursor.CONTENTS);
            this.domNode.appendChild(this.textNode);
          }
        }
        this.remove();
        if (start != null) {
          var _map = [start, end].map(function (offset) {
            return Math.max(0, Math.min(restoreText.data.length, offset - 1));
          });

          var _map2 = _slicedToArray(_map, 2);

          start = _map2[0];
          end = _map2[1];

          return {
            startNode: restoreText,
            startOffset: start,
            endNode: restoreText,
            endOffset: end
          };
        }
      }
    }, {
      key: 'update',
      value: function update(mutations, context) {
        var _this2 = this;

        if (mutations.some(function (mutation) {
          return mutation.type === 'characterData' && mutation.target === _this2.textNode;
        })) {
          var range = this.restore();
          if (range) context.range = range;
        }
      }
    }, {
      key: 'value',
      value: function value() {
        return '';
      }
    }]);

    return Cursor;
  }(_parchment2.default.Embed);

  Cursor.blotName = 'cursor';
  Cursor.className = 'ql-cursor';
  Cursor.tagName = 'span';
  Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


  exports.default = Cursor;

  /***/ }),
  /* 25 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Container = function (_Parchment$Container) {
    _inherits(Container, _Parchment$Container);

    function Container() {
      _classCallCheck(this, Container);

      return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    }

    return Container;
  }(_parchment2.default.Container);

  Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

  exports.default = Container;

  /***/ }),
  /* 26 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorAttributor = function (_Parchment$Attributor) {
    _inherits(ColorAttributor, _Parchment$Attributor);

    function ColorAttributor() {
      _classCallCheck(this, ColorAttributor);

      return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
    }

    _createClass(ColorAttributor, [{
      key: 'value',
      value: function value(domNode) {
        var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
        if (!value.startsWith('rgb(')) return value;
        value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
        return '#' + value.split(',').map(function (component) {
          return ('00' + parseInt(component).toString(16)).slice(-2);
        }).join('');
      }
    }]);

    return ColorAttributor;
  }(_parchment2.default.Attributor.Style);

  var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
    scope: _parchment2.default.Scope.INLINE
  });
  var ColorStyle = new ColorAttributor('color', 'color', {
    scope: _parchment2.default.Scope.INLINE
  });

  exports.ColorAttributor = ColorAttributor;
  exports.ColorClass = ColorClass;
  exports.ColorStyle = ColorStyle;

  /***/ }),
  /* 27 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sanitize = exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Link = function (_Inline) {
    _inherits(Link, _Inline);

    function Link() {
      _classCallCheck(this, Link);

      return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    }

    _createClass(Link, [{
      key: 'format',
      value: function format(name, value) {
        if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
        value = this.constructor.sanitize(value);
        this.domNode.setAttribute('href', value);
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
        value = this.sanitize(value);
        node.setAttribute('href', value);
        node.setAttribute('rel', 'noopener noreferrer');
        node.setAttribute('target', '_blank');
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return domNode.getAttribute('href');
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
      }
    }]);

    return Link;
  }(_inline2.default);

  Link.blotName = 'link';
  Link.tagName = 'A';
  Link.SANITIZED_URL = 'about:blank';
  Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

  function _sanitize(url, protocols) {
    var anchor = document.createElement('a');
    anchor.href = url;
    var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    return protocols.indexOf(protocol) > -1;
  }

  exports.default = Link;
  exports.sanitize = _sanitize;

  /***/ }),
  /* 28 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  var _dropdown = __webpack_require__(107);

  var _dropdown2 = _interopRequireDefault(_dropdown);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var optionsCounter = 0;

  function toggleAriaAttribute(element, attribute) {
    element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
  }

  var Picker = function () {
    function Picker(select) {
      var _this = this;

      _classCallCheck(this, Picker);

      this.select = select;
      this.container = document.createElement('span');
      this.buildPicker();
      this.select.style.display = 'none';
      this.select.parentNode.insertBefore(this.container, this.select);

      this.label.addEventListener('mousedown', function () {
        _this.togglePicker();
      });
      this.label.addEventListener('keydown', function (event) {
        switch (event.keyCode) {
          // Allows the "Enter" key to open the picker
          case _keyboard2.default.keys.ENTER:
            _this.togglePicker();
            break;

          // Allows the "Escape" key to close the picker
          case _keyboard2.default.keys.ESCAPE:
            _this.escape();
            event.preventDefault();
            break;
        }
      });
      this.select.addEventListener('change', this.update.bind(this));
    }

    _createClass(Picker, [{
      key: 'togglePicker',
      value: function togglePicker() {
        this.container.classList.toggle('ql-expanded');
        // Toggle aria-expanded and aria-hidden to make the picker accessible
        toggleAriaAttribute(this.label, 'aria-expanded');
        toggleAriaAttribute(this.options, 'aria-hidden');
      }
    }, {
      key: 'buildItem',
      value: function buildItem(option) {
        var _this2 = this;

        var item = document.createElement('span');
        item.tabIndex = '0';
        item.setAttribute('role', 'button');

        item.classList.add('ql-picker-item');
        if (option.hasAttribute('value')) {
          item.setAttribute('data-value', option.getAttribute('value'));
        }
        if (option.textContent) {
          item.setAttribute('data-label', option.textContent);
        }
        item.addEventListener('click', function () {
          _this2.selectItem(item, true);
        });
        item.addEventListener('keydown', function (event) {
          switch (event.keyCode) {
            // Allows the "Enter" key to select an item
            case _keyboard2.default.keys.ENTER:
              _this2.selectItem(item, true);
              event.preventDefault();
              break;

            // Allows the "Escape" key to close the picker
            case _keyboard2.default.keys.ESCAPE:
              _this2.escape();
              event.preventDefault();
              break;
          }
        });

        return item;
      }
    }, {
      key: 'buildLabel',
      value: function buildLabel() {
        var label = document.createElement('span');
        label.classList.add('ql-picker-label');
        label.innerHTML = _dropdown2.default;
        label.tabIndex = '0';
        label.setAttribute('role', 'button');
        label.setAttribute('aria-expanded', 'false');
        this.container.appendChild(label);
        return label;
      }
    }, {
      key: 'buildOptions',
      value: function buildOptions() {
        var _this3 = this;

        var options = document.createElement('span');
        options.classList.add('ql-picker-options');

        // Don't want screen readers to read this until options are visible
        options.setAttribute('aria-hidden', 'true');
        options.tabIndex = '-1';

        // Need a unique id for aria-controls
        options.id = 'ql-picker-options-' + optionsCounter;
        optionsCounter += 1;
        this.label.setAttribute('aria-controls', options.id);

        this.options = options;

        [].slice.call(this.select.options).forEach(function (option) {
          var item = _this3.buildItem(option);
          options.appendChild(item);
          if (option.selected === true) {
            _this3.selectItem(item);
          }
        });
        this.container.appendChild(options);
      }
    }, {
      key: 'buildPicker',
      value: function buildPicker() {
        var _this4 = this;

        [].slice.call(this.select.attributes).forEach(function (item) {
          _this4.container.setAttribute(item.name, item.value);
        });
        this.container.classList.add('ql-picker');
        this.label = this.buildLabel();
        this.buildOptions();
      }
    }, {
      key: 'escape',
      value: function escape() {
        var _this5 = this;

        // Close menu and return focus to trigger label
        this.close();
        // Need setTimeout for accessibility to ensure that the browser executes
        // focus on the next process thread and after any DOM content changes
        setTimeout(function () {
          return _this5.label.focus();
        }, 1);
      }
    }, {
      key: 'close',
      value: function close() {
        this.container.classList.remove('ql-expanded');
        this.label.setAttribute('aria-expanded', 'false');
        this.options.setAttribute('aria-hidden', 'true');
      }
    }, {
      key: 'selectItem',
      value: function selectItem(item) {
        var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var selected = this.container.querySelector('.ql-selected');
        if (item === selected) return;
        if (selected != null) {
          selected.classList.remove('ql-selected');
        }
        if (item == null) return;
        item.classList.add('ql-selected');
        this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
        if (item.hasAttribute('data-value')) {
          this.label.setAttribute('data-value', item.getAttribute('data-value'));
        } else {
          this.label.removeAttribute('data-value');
        }
        if (item.hasAttribute('data-label')) {
          this.label.setAttribute('data-label', item.getAttribute('data-label'));
        } else {
          this.label.removeAttribute('data-label');
        }
        if (trigger) {
          if (typeof Event === 'function') {
            this.select.dispatchEvent(new Event('change'));
          } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
            // IE11
            var event = document.createEvent('Event');
            event.initEvent('change', true, true);
            this.select.dispatchEvent(event);
          }
          this.close();
        }
      }
    }, {
      key: 'update',
      value: function update() {
        var option = void 0;
        if (this.select.selectedIndex > -1) {
          var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
          option = this.select.options[this.select.selectedIndex];
          this.selectItem(item);
        } else {
          this.selectItem(null);
        }
        var isActive = option != null && option !== this.select.querySelector('option[selected]');
        this.label.classList.toggle('ql-active', isActive);
      }
    }]);

    return Picker;
  }();

  exports.default = Picker;

  /***/ }),
  /* 29 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  var _cursor = __webpack_require__(24);

  var _cursor2 = _interopRequireDefault(_cursor);

  var _embed = __webpack_require__(35);

  var _embed2 = _interopRequireDefault(_embed);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _scroll = __webpack_require__(22);

  var _scroll2 = _interopRequireDefault(_scroll);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  var _clipboard = __webpack_require__(55);

  var _clipboard2 = _interopRequireDefault(_clipboard);

  var _history = __webpack_require__(42);

  var _history2 = _interopRequireDefault(_history);

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _quill2.default.register({
    'blots/block': _block2.default,
    'blots/block/embed': _block.BlockEmbed,
    'blots/break': _break2.default,
    'blots/container': _container2.default,
    'blots/cursor': _cursor2.default,
    'blots/embed': _embed2.default,
    'blots/inline': _inline2.default,
    'blots/scroll': _scroll2.default,
    'blots/text': _text2.default,

    'modules/clipboard': _clipboard2.default,
    'modules/history': _history2.default,
    'modules/keyboard': _keyboard2.default
  });

  _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

  exports.default = _quill2.default;

  /***/ }),
  /* 30 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var Registry = __webpack_require__(1);
  var ShadowBlot = /** @class */ (function () {
      function ShadowBlot(domNode) {
          this.domNode = domNode;
          // @ts-ignore
          this.domNode[Registry.DATA_KEY] = { blot: this };
      }
      Object.defineProperty(ShadowBlot.prototype, "statics", {
          // Hack for accessing inherited static methods
          get: function () {
              return this.constructor;
          },
          enumerable: true,
          configurable: true
      });
      ShadowBlot.create = function (value) {
          if (this.tagName == null) {
              throw new Registry.ParchmentError('Blot definition missing tagName');
          }
          var node;
          if (Array.isArray(this.tagName)) {
              if (typeof value === 'string') {
                  value = value.toUpperCase();
                  if (parseInt(value).toString() === value) {
                      value = parseInt(value);
                  }
              }
              if (typeof value === 'number') {
                  node = document.createElement(this.tagName[value - 1]);
              }
              else if (this.tagName.indexOf(value) > -1) {
                  node = document.createElement(value);
              }
              else {
                  node = document.createElement(this.tagName[0]);
              }
          }
          else {
              node = document.createElement(this.tagName);
          }
          if (this.className) {
              node.classList.add(this.className);
          }
          return node;
      };
      ShadowBlot.prototype.attach = function () {
          if (this.parent != null) {
              this.scroll = this.parent.scroll;
          }
      };
      ShadowBlot.prototype.clone = function () {
          var domNode = this.domNode.cloneNode(false);
          return Registry.create(domNode);
      };
      ShadowBlot.prototype.detach = function () {
          if (this.parent != null)
              this.parent.removeChild(this);
          // @ts-ignore
          delete this.domNode[Registry.DATA_KEY];
      };
      ShadowBlot.prototype.deleteAt = function (index, length) {
          var blot = this.isolate(index, length);
          blot.remove();
      };
      ShadowBlot.prototype.formatAt = function (index, length, name, value) {
          var blot = this.isolate(index, length);
          if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
              blot.wrap(name, value);
          }
          else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
              var parent = Registry.create(this.statics.scope);
              blot.wrap(parent);
              parent.format(name, value);
          }
      };
      ShadowBlot.prototype.insertAt = function (index, value, def) {
          var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
          var ref = this.split(index);
          this.parent.insertBefore(blot, ref);
      };
      ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
          if (refBlot === void 0) { refBlot = null; }
          if (this.parent != null) {
              this.parent.children.remove(this);
          }
          var refDomNode = null;
          parentBlot.children.insertBefore(this, refBlot);
          if (refBlot != null) {
              refDomNode = refBlot.domNode;
          }
          if (this.domNode.parentNode != parentBlot.domNode ||
              this.domNode.nextSibling != refDomNode) {
              parentBlot.domNode.insertBefore(this.domNode, refDomNode);
          }
          this.parent = parentBlot;
          this.attach();
      };
      ShadowBlot.prototype.isolate = function (index, length) {
          var target = this.split(index);
          target.split(length);
          return target;
      };
      ShadowBlot.prototype.length = function () {
          return 1;
      };
      ShadowBlot.prototype.offset = function (root) {
          if (root === void 0) { root = this.parent; }
          if (this.parent == null || this == root)
              return 0;
          return this.parent.children.offset(this) + this.parent.offset(root);
      };
      ShadowBlot.prototype.optimize = function (context) {
          // TODO clean up once we use WeakMap
          // @ts-ignore
          if (this.domNode[Registry.DATA_KEY] != null) {
              // @ts-ignore
              delete this.domNode[Registry.DATA_KEY].mutations;
          }
      };
      ShadowBlot.prototype.remove = function () {
          if (this.domNode.parentNode != null) {
              this.domNode.parentNode.removeChild(this.domNode);
          }
          this.detach();
      };
      ShadowBlot.prototype.replace = function (target) {
          if (target.parent == null)
              return;
          target.parent.insertBefore(this, target.next);
          target.remove();
      };
      ShadowBlot.prototype.replaceWith = function (name, value) {
          var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
          replacement.replace(this);
          return replacement;
      };
      ShadowBlot.prototype.split = function (index, force) {
          return index === 0 ? this : this.next;
      };
      ShadowBlot.prototype.update = function (mutations, context) {
          // Nothing to do by default
      };
      ShadowBlot.prototype.wrap = function (name, value) {
          var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
          if (this.parent != null) {
              this.parent.insertBefore(wrapper, this.next);
          }
          wrapper.appendChild(this);
          return wrapper;
      };
      ShadowBlot.blotName = 'abstract';
      return ShadowBlot;
  }());
  exports.default = ShadowBlot;


  /***/ }),
  /* 31 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  var class_1 = __webpack_require__(32);
  var style_1 = __webpack_require__(33);
  var Registry = __webpack_require__(1);
  var AttributorStore = /** @class */ (function () {
      function AttributorStore(domNode) {
          this.attributes = {};
          this.domNode = domNode;
          this.build();
      }
      AttributorStore.prototype.attribute = function (attribute, value) {
          // verb
          if (value) {
              if (attribute.add(this.domNode, value)) {
                  if (attribute.value(this.domNode) != null) {
                      this.attributes[attribute.attrName] = attribute;
                  }
                  else {
                      delete this.attributes[attribute.attrName];
                  }
              }
          }
          else {
              attribute.remove(this.domNode);
              delete this.attributes[attribute.attrName];
          }
      };
      AttributorStore.prototype.build = function () {
          var _this = this;
          this.attributes = {};
          var attributes = attributor_1.default.keys(this.domNode);
          var classes = class_1.default.keys(this.domNode);
          var styles = style_1.default.keys(this.domNode);
          attributes
              .concat(classes)
              .concat(styles)
              .forEach(function (name) {
              var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
              if (attr instanceof attributor_1.default) {
                  _this.attributes[attr.attrName] = attr;
              }
          });
      };
      AttributorStore.prototype.copy = function (target) {
          var _this = this;
          Object.keys(this.attributes).forEach(function (key) {
              var value = _this.attributes[key].value(_this.domNode);
              target.format(key, value);
          });
      };
      AttributorStore.prototype.move = function (target) {
          var _this = this;
          this.copy(target);
          Object.keys(this.attributes).forEach(function (key) {
              _this.attributes[key].remove(_this.domNode);
          });
          this.attributes = {};
      };
      AttributorStore.prototype.values = function () {
          var _this = this;
          return Object.keys(this.attributes).reduce(function (attributes, name) {
              attributes[name] = _this.attributes[name].value(_this.domNode);
              return attributes;
          }, {});
      };
      return AttributorStore;
  }());
  exports.default = AttributorStore;


  /***/ }),
  /* 32 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  function match(node, prefix) {
      var className = node.getAttribute('class') || '';
      return className.split(/\s+/).filter(function (name) {
          return name.indexOf(prefix + "-") === 0;
      });
  }
  var ClassAttributor = /** @class */ (function (_super) {
      __extends(ClassAttributor, _super);
      function ClassAttributor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ClassAttributor.keys = function (node) {
          return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
              return name
                  .split('-')
                  .slice(0, -1)
                  .join('-');
          });
      };
      ClassAttributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          this.remove(node);
          node.classList.add(this.keyName + "-" + value);
          return true;
      };
      ClassAttributor.prototype.remove = function (node) {
          var matches = match(node, this.keyName);
          matches.forEach(function (name) {
              node.classList.remove(name);
          });
          if (node.classList.length === 0) {
              node.removeAttribute('class');
          }
      };
      ClassAttributor.prototype.value = function (node) {
          var result = match(node, this.keyName)[0] || '';
          var value = result.slice(this.keyName.length + 1); // +1 for hyphen
          return this.canAdd(node, value) ? value : '';
      };
      return ClassAttributor;
  }(attributor_1.default));
  exports.default = ClassAttributor;


  /***/ }),
  /* 33 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  function camelize(name) {
      var parts = name.split('-');
      var rest = parts
          .slice(1)
          .map(function (part) {
          return part[0].toUpperCase() + part.slice(1);
      })
          .join('');
      return parts[0] + rest;
  }
  var StyleAttributor = /** @class */ (function (_super) {
      __extends(StyleAttributor, _super);
      function StyleAttributor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      StyleAttributor.keys = function (node) {
          return (node.getAttribute('style') || '').split(';').map(function (value) {
              var arr = value.split(':');
              return arr[0].trim();
          });
      };
      StyleAttributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          // @ts-ignore
          node.style[camelize(this.keyName)] = value;
          return true;
      };
      StyleAttributor.prototype.remove = function (node) {
          // @ts-ignore
          node.style[camelize(this.keyName)] = '';
          if (!node.getAttribute('style')) {
              node.removeAttribute('style');
          }
      };
      StyleAttributor.prototype.value = function (node) {
          // @ts-ignore
          var value = node.style[camelize(this.keyName)];
          return this.canAdd(node, value) ? value : '';
      };
      return StyleAttributor;
  }(attributor_1.default));
  exports.default = StyleAttributor;


  /***/ }),
  /* 34 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Theme = function () {
    function Theme(quill, options) {
      _classCallCheck(this, Theme);

      this.quill = quill;
      this.options = options;
      this.modules = {};
    }

    _createClass(Theme, [{
      key: 'init',
      value: function init() {
        var _this = this;

        Object.keys(this.options.modules).forEach(function (name) {
          if (_this.modules[name] == null) {
            _this.addModule(name);
          }
        });
      }
    }, {
      key: 'addModule',
      value: function addModule(name) {
        var moduleClass = this.quill.constructor.import('modules/' + name);
        this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
        return this.modules[name];
      }
    }]);

    return Theme;
  }();

  Theme.DEFAULTS = {
    modules: {}
  };
  Theme.themes = {
    'default': Theme
  };

  exports.default = Theme;

  /***/ }),
  /* 35 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var GUARD_TEXT = '\uFEFF';

  var Embed = function (_Parchment$Embed) {
    _inherits(Embed, _Parchment$Embed);

    function Embed(node) {
      _classCallCheck(this, Embed);

      var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

      _this.contentNode = document.createElement('span');
      _this.contentNode.setAttribute('contenteditable', false);
      [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
        _this.contentNode.appendChild(childNode);
      });
      _this.leftGuard = document.createTextNode(GUARD_TEXT);
      _this.rightGuard = document.createTextNode(GUARD_TEXT);
      _this.domNode.appendChild(_this.leftGuard);
      _this.domNode.appendChild(_this.contentNode);
      _this.domNode.appendChild(_this.rightGuard);
      return _this;
    }

    _createClass(Embed, [{
      key: 'index',
      value: function index(node, offset) {
        if (node === this.leftGuard) return 0;
        if (node === this.rightGuard) return 1;
        return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
      }
    }, {
      key: 'restore',
      value: function restore(node) {
        var range = void 0,
            textNode = void 0;
        var text = node.data.split(GUARD_TEXT).join('');
        if (node === this.leftGuard) {
          if (this.prev instanceof _text2.default) {
            var prevLength = this.prev.length();
            this.prev.insertAt(prevLength, text);
            range = {
              startNode: this.prev.domNode,
              startOffset: prevLength + text.length
            };
          } else {
            textNode = document.createTextNode(text);
            this.parent.insertBefore(_parchment2.default.create(textNode), this);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        } else if (node === this.rightGuard) {
          if (this.next instanceof _text2.default) {
            this.next.insertAt(0, text);
            range = {
              startNode: this.next.domNode,
              startOffset: text.length
            };
          } else {
            textNode = document.createTextNode(text);
            this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        }
        node.data = GUARD_TEXT;
        return range;
      }
    }, {
      key: 'update',
      value: function update(mutations, context) {
        var _this2 = this;

        mutations.forEach(function (mutation) {
          if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
            var range = _this2.restore(mutation.target);
            if (range) context.range = range;
          }
        });
      }
    }]);

    return Embed;
  }(_parchment2.default.Embed);

  exports.default = Embed;

  /***/ }),
  /* 36 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var config = {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: ['right', 'center', 'justify']
  };

  var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
  var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
  var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

  exports.AlignAttribute = AlignAttribute;
  exports.AlignClass = AlignClass;
  exports.AlignStyle = AlignStyle;

  /***/ }),
  /* 37 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BackgroundStyle = exports.BackgroundClass = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _color = __webpack_require__(26);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
    scope: _parchment2.default.Scope.INLINE
  });
  var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
    scope: _parchment2.default.Scope.INLINE
  });

  exports.BackgroundClass = BackgroundClass;
  exports.BackgroundStyle = BackgroundStyle;

  /***/ }),
  /* 38 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var config = {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: ['rtl']
  };

  var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
  var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
  var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

  exports.DirectionAttribute = DirectionAttribute;
  exports.DirectionClass = DirectionClass;
  exports.DirectionStyle = DirectionStyle;

  /***/ }),
  /* 39 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FontClass = exports.FontStyle = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var config = {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['serif', 'monospace']
  };

  var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

  var FontStyleAttributor = function (_Parchment$Attributor) {
    _inherits(FontStyleAttributor, _Parchment$Attributor);

    function FontStyleAttributor() {
      _classCallCheck(this, FontStyleAttributor);

      return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
    }

    _createClass(FontStyleAttributor, [{
      key: 'value',
      value: function value(node) {
        return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
      }
    }]);

    return FontStyleAttributor;
  }(_parchment2.default.Attributor.Style);

  var FontStyle = new FontStyleAttributor('font', 'font-family', config);

  exports.FontStyle = FontStyle;
  exports.FontClass = FontClass;

  /***/ }),
  /* 40 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SizeStyle = exports.SizeClass = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['small', 'large', 'huge']
  });
  var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['10px', '18px', '32px']
  });

  exports.SizeClass = SizeClass;
  exports.SizeStyle = SizeStyle;

  /***/ }),
  /* 41 */
  /***/ (function(module, exports, __webpack_require__) {


  module.exports = {
    'align': {
      '': __webpack_require__(76),
      'center': __webpack_require__(77),
      'right': __webpack_require__(78),
      'justify': __webpack_require__(79)
    },
    'background': __webpack_require__(80),
    'blockquote': __webpack_require__(81),
    'bold': __webpack_require__(82),
    'clean': __webpack_require__(83),
    'code': __webpack_require__(58),
    'code-block': __webpack_require__(58),
    'color': __webpack_require__(84),
    'direction': {
      '': __webpack_require__(85),
      'rtl': __webpack_require__(86)
    },
    'float': {
      'center': __webpack_require__(87),
      'full': __webpack_require__(88),
      'left': __webpack_require__(89),
      'right': __webpack_require__(90)
    },
    'formula': __webpack_require__(91),
    'header': {
      '1': __webpack_require__(92),
      '2': __webpack_require__(93)
    },
    'italic': __webpack_require__(94),
    'image': __webpack_require__(95),
    'indent': {
      '+1': __webpack_require__(96),
      '-1': __webpack_require__(97)
    },
    'link': __webpack_require__(98),
    'list': {
      'ordered': __webpack_require__(99),
      'bullet': __webpack_require__(100),
      'check': __webpack_require__(101)
    },
    'script': {
      'sub': __webpack_require__(102),
      'super': __webpack_require__(103)
    },
    'strike': __webpack_require__(104),
    'underline': __webpack_require__(105),
    'video': __webpack_require__(106)
  };

  /***/ }),
  /* 42 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLastChangeIndex = exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var History = function (_Module) {
    _inherits(History, _Module);

    function History(quill, options) {
      _classCallCheck(this, History);

      var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

      _this.lastRecorded = 0;
      _this.ignoreChange = false;
      _this.clear();
      _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
        if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
        if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
          _this.record(delta, oldDelta);
        } else {
          _this.transform(delta);
        }
      });
      _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
      _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
      if (/Win/i.test(navigator.platform)) {
        _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
      }
      return _this;
    }

    _createClass(History, [{
      key: 'change',
      value: function change(source, dest) {
        if (this.stack[source].length === 0) return;
        var delta = this.stack[source].pop();
        this.stack[dest].push(delta);
        this.lastRecorded = 0;
        this.ignoreChange = true;
        this.quill.updateContents(delta[source], _quill2.default.sources.USER);
        this.ignoreChange = false;
        var index = getLastChangeIndex(delta[source]);
        this.quill.setSelection(index);
      }
    }, {
      key: 'clear',
      value: function clear() {
        this.stack = { undo: [], redo: [] };
      }
    }, {
      key: 'cutoff',
      value: function cutoff() {
        this.lastRecorded = 0;
      }
    }, {
      key: 'record',
      value: function record(changeDelta, oldDelta) {
        if (changeDelta.ops.length === 0) return;
        this.stack.redo = [];
        var undoDelta = this.quill.getContents().diff(oldDelta);
        var timestamp = Date.now();
        if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
          var delta = this.stack.undo.pop();
          undoDelta = undoDelta.compose(delta.undo);
          changeDelta = delta.redo.compose(changeDelta);
        } else {
          this.lastRecorded = timestamp;
        }
        this.stack.undo.push({
          redo: changeDelta,
          undo: undoDelta
        });
        if (this.stack.undo.length > this.options.maxStack) {
          this.stack.undo.shift();
        }
      }
    }, {
      key: 'redo',
      value: function redo() {
        this.change('redo', 'undo');
      }
    }, {
      key: 'transform',
      value: function transform(delta) {
        this.stack.undo.forEach(function (change) {
          change.undo = delta.transform(change.undo, true);
          change.redo = delta.transform(change.redo, true);
        });
        this.stack.redo.forEach(function (change) {
          change.undo = delta.transform(change.undo, true);
          change.redo = delta.transform(change.redo, true);
        });
      }
    }, {
      key: 'undo',
      value: function undo() {
        this.change('undo', 'redo');
      }
    }]);

    return History;
  }(_module2.default);

  History.DEFAULTS = {
    delay: 1000,
    maxStack: 100,
    userOnly: false
  };

  function endsWithNewlineChange(delta) {
    var lastOp = delta.ops[delta.ops.length - 1];
    if (lastOp == null) return false;
    if (lastOp.insert != null) {
      return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    }
    if (lastOp.attributes != null) {
      return Object.keys(lastOp.attributes).some(function (attr) {
        return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
      });
    }
    return false;
  }

  function getLastChangeIndex(delta) {
    var deleteLength = delta.reduce(function (length, op) {
      length += op.delete || 0;
      return length;
    }, 0);
    var changeIndex = delta.length() - deleteLength;
    if (endsWithNewlineChange(delta)) {
      changeIndex -= 1;
    }
    return changeIndex;
  }

  exports.default = History;
  exports.getLastChangeIndex = getLastChangeIndex;

  /***/ }),
  /* 43 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BaseTooltip = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  var _theme = __webpack_require__(34);

  var _theme2 = _interopRequireDefault(_theme);

  var _colorPicker = __webpack_require__(59);

  var _colorPicker2 = _interopRequireDefault(_colorPicker);

  var _iconPicker = __webpack_require__(60);

  var _iconPicker2 = _interopRequireDefault(_iconPicker);

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  var _tooltip = __webpack_require__(61);

  var _tooltip2 = _interopRequireDefault(_tooltip);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ALIGNS = [false, 'center', 'right', 'justify'];

  var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

  var FONTS = [false, 'serif', 'monospace'];

  var HEADERS = ['1', '2', '3', false];

  var SIZES = ['small', false, 'large', 'huge'];

  var BaseTheme = function (_Theme) {
    _inherits(BaseTheme, _Theme);

    function BaseTheme(quill, options) {
      _classCallCheck(this, BaseTheme);

      var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

      var listener = function listener(e) {
        if (!document.body.contains(quill.root)) {
          return document.body.removeEventListener('click', listener);
        }
        if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
          _this.tooltip.hide();
        }
        if (_this.pickers != null) {
          _this.pickers.forEach(function (picker) {
            if (!picker.container.contains(e.target)) {
              picker.close();
            }
          });
        }
      };
      quill.emitter.listenDOM('click', document.body, listener);
      return _this;
    }

    _createClass(BaseTheme, [{
      key: 'addModule',
      value: function addModule(name) {
        var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
        if (name === 'toolbar') {
          this.extendToolbar(module);
        }
        return module;
      }
    }, {
      key: 'buildButtons',
      value: function buildButtons(buttons, icons) {
        buttons.forEach(function (button) {
          var className = button.getAttribute('class') || '';
          className.split(/\s+/).forEach(function (name) {
            if (!name.startsWith('ql-')) return;
            name = name.slice('ql-'.length);
            if (icons[name] == null) return;
            if (name === 'direction') {
              button.innerHTML = icons[name][''] + icons[name]['rtl'];
            } else if (typeof icons[name] === 'string') {
              button.innerHTML = icons[name];
            } else {
              var value = button.value || '';
              if (value != null && icons[name][value]) {
                button.innerHTML = icons[name][value];
              }
            }
          });
        });
      }
    }, {
      key: 'buildPickers',
      value: function buildPickers(selects, icons) {
        var _this2 = this;

        this.pickers = selects.map(function (select) {
          if (select.classList.contains('ql-align')) {
            if (select.querySelector('option') == null) {
              fillSelect(select, ALIGNS);
            }
            return new _iconPicker2.default(select, icons.align);
          } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
            var format = select.classList.contains('ql-background') ? 'background' : 'color';
            if (select.querySelector('option') == null) {
              fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
            }
            return new _colorPicker2.default(select, icons[format]);
          } else {
            if (select.querySelector('option') == null) {
              if (select.classList.contains('ql-font')) {
                fillSelect(select, FONTS);
              } else if (select.classList.contains('ql-header')) {
                fillSelect(select, HEADERS);
              } else if (select.classList.contains('ql-size')) {
                fillSelect(select, SIZES);
              }
            }
            return new _picker2.default(select);
          }
        });
        var update = function update() {
          _this2.pickers.forEach(function (picker) {
            picker.update();
          });
        };
        this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
      }
    }]);

    return BaseTheme;
  }(_theme2.default);

  BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          formula: function formula() {
            this.quill.theme.tooltip.edit('formula');
          },
          image: function image() {
            var _this3 = this;

            var fileInput = this.container.querySelector('input.ql-image[type=file]');
            if (fileInput == null) {
              fileInput = document.createElement('input');
              fileInput.setAttribute('type', 'file');
              fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
              fileInput.classList.add('ql-image');
              fileInput.addEventListener('change', function () {
                if (fileInput.files != null && fileInput.files[0] != null) {
                  var reader = new FileReader();
                  reader.onload = function (e) {
                    var range = _this3.quill.getSelection(true);
                    _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
                    _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                    fileInput.value = "";
                  };
                  reader.readAsDataURL(fileInput.files[0]);
                }
              });
              this.container.appendChild(fileInput);
            }
            fileInput.click();
          },
          video: function video() {
            this.quill.theme.tooltip.edit('video');
          }
        }
      }
    }
  });

  var BaseTooltip = function (_Tooltip) {
    _inherits(BaseTooltip, _Tooltip);

    function BaseTooltip(quill, boundsContainer) {
      _classCallCheck(this, BaseTooltip);

      var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

      _this4.textbox = _this4.root.querySelector('input[type="text"]');
      _this4.listen();
      return _this4;
    }

    _createClass(BaseTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this5 = this;

        this.textbox.addEventListener('keydown', function (event) {
          if (_keyboard2.default.match(event, 'enter')) {
            _this5.save();
            event.preventDefault();
          } else if (_keyboard2.default.match(event, 'escape')) {
            _this5.cancel();
            event.preventDefault();
          }
        });
      }
    }, {
      key: 'cancel',
      value: function cancel() {
        this.hide();
      }
    }, {
      key: 'edit',
      value: function edit() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
        var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        this.root.classList.remove('ql-hidden');
        this.root.classList.add('ql-editing');
        if (preview != null) {
          this.textbox.value = preview;
        } else if (mode !== this.root.getAttribute('data-mode')) {
          this.textbox.value = '';
        }
        this.position(this.quill.getBounds(this.quill.selection.savedRange));
        this.textbox.select();
        this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
        this.root.setAttribute('data-mode', mode);
      }
    }, {
      key: 'restoreFocus',
      value: function restoreFocus() {
        var scrollTop = this.quill.scrollingContainer.scrollTop;
        this.quill.focus();
        this.quill.scrollingContainer.scrollTop = scrollTop;
      }
    }, {
      key: 'save',
      value: function save() {
        var value = this.textbox.value;
        switch (this.root.getAttribute('data-mode')) {
          case 'link':
            {
              var scrollTop = this.quill.root.scrollTop;
              if (this.linkRange) {
                this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                delete this.linkRange;
              } else {
                this.restoreFocus();
                this.quill.format('link', value, _emitter2.default.sources.USER);
              }
              this.quill.root.scrollTop = scrollTop;
              break;
            }
          case 'video':
            {
              value = extractVideoUrl(value);
            } // eslint-disable-next-line no-fallthrough
          case 'formula':
            {
              if (!value) break;
              var range = this.quill.getSelection(true);
              if (range != null) {
                var index = range.index + range.length;
                this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
                if (this.root.getAttribute('data-mode') === 'formula') {
                  this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                }
                this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
              }
              break;
            }
        }
        this.textbox.value = '';
        this.hide();
      }
    }]);

    return BaseTooltip;
  }(_tooltip2.default);

  function extractVideoUrl(url) {
    var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    if (match) {
      return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
    }
    if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
      // eslint-disable-line no-cond-assign
      return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
    }
    return url;
  }

  function fillSelect(select, values) {
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    values.forEach(function (value) {
      var option = document.createElement('option');
      if (value === defaultValue) {
        option.setAttribute('selected', 'selected');
      } else {
        option.setAttribute('value', value);
      }
      select.appendChild(option);
    });
  }

  exports.BaseTooltip = BaseTooltip;
  exports.default = BaseTheme;

  /***/ }),
  /* 44 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var LinkedList = /** @class */ (function () {
      function LinkedList() {
          this.head = this.tail = null;
          this.length = 0;
      }
      LinkedList.prototype.append = function () {
          var nodes = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              nodes[_i] = arguments[_i];
          }
          this.insertBefore(nodes[0], null);
          if (nodes.length > 1) {
              this.append.apply(this, nodes.slice(1));
          }
      };
      LinkedList.prototype.contains = function (node) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              if (cur === node)
                  return true;
          }
          return false;
      };
      LinkedList.prototype.insertBefore = function (node, refNode) {
          if (!node)
              return;
          node.next = refNode;
          if (refNode != null) {
              node.prev = refNode.prev;
              if (refNode.prev != null) {
                  refNode.prev.next = node;
              }
              refNode.prev = node;
              if (refNode === this.head) {
                  this.head = node;
              }
          }
          else if (this.tail != null) {
              this.tail.next = node;
              node.prev = this.tail;
              this.tail = node;
          }
          else {
              node.prev = null;
              this.head = this.tail = node;
          }
          this.length += 1;
      };
      LinkedList.prototype.offset = function (target) {
          var index = 0, cur = this.head;
          while (cur != null) {
              if (cur === target)
                  return index;
              index += cur.length();
              cur = cur.next;
          }
          return -1;
      };
      LinkedList.prototype.remove = function (node) {
          if (!this.contains(node))
              return;
          if (node.prev != null)
              node.prev.next = node.next;
          if (node.next != null)
              node.next.prev = node.prev;
          if (node === this.head)
              this.head = node.next;
          if (node === this.tail)
              this.tail = node.prev;
          this.length -= 1;
      };
      LinkedList.prototype.iterator = function (curNode) {
          if (curNode === void 0) { curNode = this.head; }
          // TODO use yield when we can
          return function () {
              var ret = curNode;
              if (curNode != null)
                  curNode = curNode.next;
              return ret;
          };
      };
      LinkedList.prototype.find = function (index, inclusive) {
          if (inclusive === void 0) { inclusive = false; }
          var cur, next = this.iterator();
          while ((cur = next())) {
              var length = cur.length();
              if (index < length ||
                  (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
                  return [cur, index];
              }
              index -= length;
          }
          return [null, 0];
      };
      LinkedList.prototype.forEach = function (callback) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              callback(cur);
          }
      };
      LinkedList.prototype.forEachAt = function (index, length, callback) {
          if (length <= 0)
              return;
          var _a = this.find(index), startNode = _a[0], offset = _a[1];
          var cur, curIndex = index - offset, next = this.iterator(startNode);
          while ((cur = next()) && curIndex < index + length) {
              var curLength = cur.length();
              if (index > curIndex) {
                  callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
              }
              else {
                  callback(cur, 0, Math.min(curLength, index + length - curIndex));
              }
              curIndex += curLength;
          }
      };
      LinkedList.prototype.map = function (callback) {
          return this.reduce(function (memo, cur) {
              memo.push(callback(cur));
              return memo;
          }, []);
      };
      LinkedList.prototype.reduce = function (callback, memo) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              memo = callback(memo, cur);
          }
          return memo;
      };
      return LinkedList;
  }());
  exports.default = LinkedList;


  /***/ }),
  /* 45 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var container_1 = __webpack_require__(17);
  var Registry = __webpack_require__(1);
  var OBSERVER_CONFIG = {
      attributes: true,
      characterData: true,
      characterDataOldValue: true,
      childList: true,
      subtree: true,
  };
  var MAX_OPTIMIZE_ITERATIONS = 100;
  var ScrollBlot = /** @class */ (function (_super) {
      __extends(ScrollBlot, _super);
      function ScrollBlot(node) {
          var _this = _super.call(this, node) || this;
          _this.scroll = _this;
          _this.observer = new MutationObserver(function (mutations) {
              _this.update(mutations);
          });
          _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
          _this.attach();
          return _this;
      }
      ScrollBlot.prototype.detach = function () {
          _super.prototype.detach.call(this);
          this.observer.disconnect();
      };
      ScrollBlot.prototype.deleteAt = function (index, length) {
          this.update();
          if (index === 0 && length === this.length()) {
              this.children.forEach(function (child) {
                  child.remove();
              });
          }
          else {
              _super.prototype.deleteAt.call(this, index, length);
          }
      };
      ScrollBlot.prototype.formatAt = function (index, length, name, value) {
          this.update();
          _super.prototype.formatAt.call(this, index, length, name, value);
      };
      ScrollBlot.prototype.insertAt = function (index, value, def) {
          this.update();
          _super.prototype.insertAt.call(this, index, value, def);
      };
      ScrollBlot.prototype.optimize = function (mutations, context) {
          var _this = this;
          if (mutations === void 0) { mutations = []; }
          if (context === void 0) { context = {}; }
          _super.prototype.optimize.call(this, context);
          // We must modify mutations directly, cannot make copy and then modify
          var records = [].slice.call(this.observer.takeRecords());
          // Array.push currently seems to be implemented by a non-tail recursive function
          // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
          while (records.length > 0)
              mutations.push(records.pop());
          // TODO use WeakMap
          var mark = function (blot, markParent) {
              if (markParent === void 0) { markParent = true; }
              if (blot == null || blot === _this)
                  return;
              if (blot.domNode.parentNode == null)
                  return;
              // @ts-ignore
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [];
              }
              if (markParent)
                  mark(blot.parent);
          };
          var optimize = function (blot) {
              // Post-order traversal
              if (
              // @ts-ignore
              blot.domNode[Registry.DATA_KEY] == null ||
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations == null) {
                  return;
              }
              if (blot instanceof container_1.default) {
                  blot.children.forEach(optimize);
              }
              blot.optimize(context);
          };
          var remaining = mutations;
          for (var i = 0; remaining.length > 0; i += 1) {
              if (i >= MAX_OPTIMIZE_ITERATIONS) {
                  throw new Error('[Parchment] Maximum optimize iterations reached');
              }
              remaining.forEach(function (mutation) {
                  var blot = Registry.find(mutation.target, true);
                  if (blot == null)
                      return;
                  if (blot.domNode === mutation.target) {
                      if (mutation.type === 'childList') {
                          mark(Registry.find(mutation.previousSibling, false));
                          [].forEach.call(mutation.addedNodes, function (node) {
                              var child = Registry.find(node, false);
                              mark(child, false);
                              if (child instanceof container_1.default) {
                                  child.children.forEach(function (grandChild) {
                                      mark(grandChild, false);
                                  });
                              }
                          });
                      }
                      else if (mutation.type === 'attributes') {
                          mark(blot.prev);
                      }
                  }
                  mark(blot);
              });
              this.children.forEach(optimize);
              remaining = [].slice.call(this.observer.takeRecords());
              records = remaining.slice();
              while (records.length > 0)
                  mutations.push(records.pop());
          }
      };
      ScrollBlot.prototype.update = function (mutations, context) {
          var _this = this;
          if (context === void 0) { context = {}; }
          mutations = mutations || this.observer.takeRecords();
          // TODO use WeakMap
          mutations
              .map(function (mutation) {
              var blot = Registry.find(mutation.target, true);
              if (blot == null)
                  return null;
              // @ts-ignore
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                  return blot;
              }
              else {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                  return null;
              }
          })
              .forEach(function (blot) {
              if (blot == null ||
                  blot === _this ||
                  //@ts-ignore
                  blot.domNode[Registry.DATA_KEY] == null)
                  return;
              // @ts-ignore
              blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
          });
          // @ts-ignore
          if (this.domNode[Registry.DATA_KEY].mutations != null) {
              // @ts-ignore
              _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
          }
          this.optimize(mutations, context);
      };
      ScrollBlot.blotName = 'scroll';
      ScrollBlot.defaultChild = 'block';
      ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
      ScrollBlot.tagName = 'DIV';
      return ScrollBlot;
  }(container_1.default));
  exports.default = ScrollBlot;


  /***/ }),
  /* 46 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var format_1 = __webpack_require__(18);
  var Registry = __webpack_require__(1);
  // Shallow object comparison
  function isEqual(obj1, obj2) {
      if (Object.keys(obj1).length !== Object.keys(obj2).length)
          return false;
      // @ts-ignore
      for (var prop in obj1) {
          // @ts-ignore
          if (obj1[prop] !== obj2[prop])
              return false;
      }
      return true;
  }
  var InlineBlot = /** @class */ (function (_super) {
      __extends(InlineBlot, _super);
      function InlineBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      InlineBlot.formats = function (domNode) {
          if (domNode.tagName === InlineBlot.tagName)
              return undefined;
          return _super.formats.call(this, domNode);
      };
      InlineBlot.prototype.format = function (name, value) {
          var _this = this;
          if (name === this.statics.blotName && !value) {
              this.children.forEach(function (child) {
                  if (!(child instanceof format_1.default)) {
                      child = child.wrap(InlineBlot.blotName, true);
                  }
                  _this.attributes.copy(child);
              });
              this.unwrap();
          }
          else {
              _super.prototype.format.call(this, name, value);
          }
      };
      InlineBlot.prototype.formatAt = function (index, length, name, value) {
          if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
              var blot = this.isolate(index, length);
              blot.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      InlineBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          var formats = this.formats();
          if (Object.keys(formats).length === 0) {
              return this.unwrap(); // unformatted span
          }
          var next = this.next;
          if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
              next.moveChildren(this);
              next.remove();
          }
      };
      InlineBlot.blotName = 'inline';
      InlineBlot.scope = Registry.Scope.INLINE_BLOT;
      InlineBlot.tagName = 'SPAN';
      return InlineBlot;
  }(format_1.default));
  exports.default = InlineBlot;


  /***/ }),
  /* 47 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var format_1 = __webpack_require__(18);
  var Registry = __webpack_require__(1);
  var BlockBlot = /** @class */ (function (_super) {
      __extends(BlockBlot, _super);
      function BlockBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      BlockBlot.formats = function (domNode) {
          var tagName = Registry.query(BlockBlot.blotName).tagName;
          if (domNode.tagName === tagName)
              return undefined;
          return _super.formats.call(this, domNode);
      };
      BlockBlot.prototype.format = function (name, value) {
          if (Registry.query(name, Registry.Scope.BLOCK) == null) {
              return;
          }
          else if (name === this.statics.blotName && !value) {
              this.replaceWith(BlockBlot.blotName);
          }
          else {
              _super.prototype.format.call(this, name, value);
          }
      };
      BlockBlot.prototype.formatAt = function (index, length, name, value) {
          if (Registry.query(name, Registry.Scope.BLOCK) != null) {
              this.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      BlockBlot.prototype.insertAt = function (index, value, def) {
          if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
              // Insert text or inline
              _super.prototype.insertAt.call(this, index, value, def);
          }
          else {
              var after = this.split(index);
              var blot = Registry.create(value, def);
              after.parent.insertBefore(blot, after);
          }
      };
      BlockBlot.prototype.update = function (mutations, context) {
          if (navigator.userAgent.match(/Trident/)) {
              this.build();
          }
          else {
              _super.prototype.update.call(this, mutations, context);
          }
      };
      BlockBlot.blotName = 'block';
      BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
      BlockBlot.tagName = 'P';
      return BlockBlot;
  }(format_1.default));
  exports.default = BlockBlot;


  /***/ }),
  /* 48 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var leaf_1 = __webpack_require__(19);
  var EmbedBlot = /** @class */ (function (_super) {
      __extends(EmbedBlot, _super);
      function EmbedBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EmbedBlot.formats = function (domNode) {
          return undefined;
      };
      EmbedBlot.prototype.format = function (name, value) {
          // super.formatAt wraps, which is what we want in general,
          // but this allows subclasses to overwrite for formats
          // that just apply to particular embeds
          _super.prototype.formatAt.call(this, 0, this.length(), name, value);
      };
      EmbedBlot.prototype.formatAt = function (index, length, name, value) {
          if (index === 0 && length === this.length()) {
              this.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      EmbedBlot.prototype.formats = function () {
          return this.statics.formats(this.domNode);
      };
      return EmbedBlot;
  }(leaf_1.default));
  exports.default = EmbedBlot;


  /***/ }),
  /* 49 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var leaf_1 = __webpack_require__(19);
  var Registry = __webpack_require__(1);
  var TextBlot = /** @class */ (function (_super) {
      __extends(TextBlot, _super);
      function TextBlot(node) {
          var _this = _super.call(this, node) || this;
          _this.text = _this.statics.value(_this.domNode);
          return _this;
      }
      TextBlot.create = function (value) {
          return document.createTextNode(value);
      };
      TextBlot.value = function (domNode) {
          var text = domNode.data;
          // @ts-ignore
          if (text['normalize'])
              text = text['normalize']();
          return text;
      };
      TextBlot.prototype.deleteAt = function (index, length) {
          this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
      };
      TextBlot.prototype.index = function (node, offset) {
          if (this.domNode === node) {
              return offset;
          }
          return -1;
      };
      TextBlot.prototype.insertAt = function (index, value, def) {
          if (def == null) {
              this.text = this.text.slice(0, index) + value + this.text.slice(index);
              this.domNode.data = this.text;
          }
          else {
              _super.prototype.insertAt.call(this, index, value, def);
          }
      };
      TextBlot.prototype.length = function () {
          return this.text.length;
      };
      TextBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          this.text = this.statics.value(this.domNode);
          if (this.text.length === 0) {
              this.remove();
          }
          else if (this.next instanceof TextBlot && this.next.prev === this) {
              this.insertAt(this.length(), this.next.value());
              this.next.remove();
          }
      };
      TextBlot.prototype.position = function (index, inclusive) {
          return [this.domNode, index];
      };
      TextBlot.prototype.split = function (index, force) {
          if (force === void 0) { force = false; }
          if (!force) {
              if (index === 0)
                  return this;
              if (index === this.length())
                  return this.next;
          }
          var after = Registry.create(this.domNode.splitText(index));
          this.parent.insertBefore(after, this.next);
          this.text = this.statics.value(this.domNode);
          return after;
      };
      TextBlot.prototype.update = function (mutations, context) {
          var _this = this;
          if (mutations.some(function (mutation) {
              return mutation.type === 'characterData' && mutation.target === _this.domNode;
          })) {
              this.text = this.statics.value(this.domNode);
          }
      };
      TextBlot.prototype.value = function () {
          return this.text;
      };
      TextBlot.blotName = 'text';
      TextBlot.scope = Registry.Scope.INLINE_BLOT;
      return TextBlot;
  }(leaf_1.default));
  exports.default = TextBlot;


  /***/ }),
  /* 50 */
  /***/ (function(module, exports, __webpack_require__) {


  var elem = document.createElement('div');
  elem.classList.toggle('test-class', false);
  if (elem.classList.contains('test-class')) {
    var _toggle = DOMTokenList.prototype.toggle;
    DOMTokenList.prototype.toggle = function (token, force) {
      if (arguments.length > 1 && !this.contains(token) === !force) {
        return force;
      } else {
        return _toggle.call(this, token);
      }
    };
  }

  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (searchString, position) {
      var subjectString = this.toString();
      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return value;
          }
        }
        return undefined;
      }
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Disable resizing in Firefox
    document.execCommand("enableObjectResizing", false, false);
    // Disable automatic linkifying in IE11
    document.execCommand("autoUrlDetect", false, false);
  });

  /***/ }),
  /* 51 */
  /***/ (function(module, exports) {

  /**
   * This library modifies the diff-patch-match library by Neil Fraser
   * by removing the patch and match functionality and certain advanced
   * options in the diff function. The original license is as follows:
   *
   * ===
   *
   * Diff Match and Patch
   *
   * Copyright 2006 Google Inc.
   * http://code.google.com/p/google-diff-match-patch/
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  /**
   * The data structure representing a diff is an array of tuples:
   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
   */
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;


  /**
   * Find the differences between two texts.  Simplifies the problem by stripping
   * any common prefix or suffix off the texts before diffing.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {Int} cursor_pos Expected edit position in text1 (optional)
   * @return {Array} Array of diff tuples.
   */
  function diff_main(text1, text2, cursor_pos) {
    // Check for equality (speedup).
    if (text1 == text2) {
      if (text1) {
        return [[DIFF_EQUAL, text1]];
      }
      return [];
    }

    // Check cursor_pos within bounds
    if (cursor_pos < 0 || text1.length < cursor_pos) {
      cursor_pos = null;
    }

    // Trim off common prefix (speedup).
    var commonlength = diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);

    // Trim off common suffix (speedup).
    commonlength = diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);

    // Compute the diff on the middle block.
    var diffs = diff_compute_(text1, text2);

    // Restore the prefix and suffix.
    if (commonprefix) {
      diffs.unshift([DIFF_EQUAL, commonprefix]);
    }
    if (commonsuffix) {
      diffs.push([DIFF_EQUAL, commonsuffix]);
    }
    diff_cleanupMerge(diffs);
    if (cursor_pos != null) {
      diffs = fix_cursor(diffs, cursor_pos);
    }
    diffs = fix_emoji(diffs);
    return diffs;
  }

  /**
   * Find the differences between two texts.  Assumes that the texts do not
   * have any common prefix or suffix.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   */
  function diff_compute_(text1, text2) {
    var diffs;

    if (!text1) {
      // Just add some text (speedup).
      return [[DIFF_INSERT, text2]];
    }

    if (!text2) {
      // Just delete some text (speedup).
      return [[DIFF_DELETE, text1]];
    }

    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i != -1) {
      // Shorter text is inside the longer text (speedup).
      diffs = [[DIFF_INSERT, longtext.substring(0, i)],
               [DIFF_EQUAL, shorttext],
               [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
      // Swap insertions for deletions if diff is reversed.
      if (text1.length > text2.length) {
        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
      }
      return diffs;
    }

    if (shorttext.length == 1) {
      // Single character string.
      // After the previous speedup, the character can't be an equality.
      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    // Check to see if the problem can be split in two.
    var hm = diff_halfMatch_(text1, text2);
    if (hm) {
      // A half-match was found, sort out the return data.
      var text1_a = hm[0];
      var text1_b = hm[1];
      var text2_a = hm[2];
      var text2_b = hm[3];
      var mid_common = hm[4];
      // Send both pairs off for separate processing.
      var diffs_a = diff_main(text1_a, text2_a);
      var diffs_b = diff_main(text1_b, text2_b);
      // Merge the results.
      return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    }

    return diff_bisect_(text1, text2);
  }

  /**
   * Find the 'middle snake' of a diff, split the problem in two
   * and return the recursively constructed diff.
   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   * @private
   */
  function diff_bisect_(text1, text2) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    // integers and undefined.
    for (var x = 0; x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    // If the total number of characters is odd, then the front path will collide
    // with the reverse path.
    var front = (delta % 2 != 0);
    // Offsets for start and end of k loop.
    // Prevents mapping of space beyond the grid.
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0; d < max_d; d++) {
      // Walk the front path one step.
      for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
        var k1_offset = v_offset + k1;
        var x1;
        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        var y1 = x1 - k1;
        while (x1 < text1_length && y1 < text2_length &&
               text1.charAt(x1) == text2.charAt(y1)) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          // Ran off the right of the graph.
          k1end += 2;
        } else if (y1 > text2_length) {
          // Ran off the bottom of the graph.
          k1start += 2;
        } else if (front) {
          var k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
            // Mirror x2 onto top-left coordinate system.
            var x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }

      // Walk the reverse path one step.
      for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
        var k2_offset = v_offset + k2;
        var x2;
        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        var y2 = x2 - k2;
        while (x2 < text1_length && y2 < text2_length &&
               text1.charAt(text1_length - x2 - 1) ==
               text2.charAt(text2_length - y2 - 1)) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          // Ran off the left of the graph.
          k2end += 2;
        } else if (y2 > text2_length) {
          // Ran off the top of the graph.
          k2start += 2;
        } else if (!front) {
          var k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
            var x1 = v1[k1_offset];
            var y1 = v_offset + x1 - k1_offset;
            // Mirror x2 onto top-left coordinate system.
            x2 = text1_length - x2;
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }
    }
    // Diff took too long and hit the deadline or
    // number of diffs equals number of characters, no commonality at all.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }

  /**
   * Given the location of the 'middle snake', split the diff in two parts
   * and recurse.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {number} x Index of split point in text1.
   * @param {number} y Index of split point in text2.
   * @return {Array} Array of diff tuples.
   */
  function diff_bisectSplit_(text1, text2, x, y) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);

    // Compute both diffs serially.
    var diffs = diff_main(text1a, text2a);
    var diffsb = diff_main(text1b, text2b);

    return diffs.concat(diffsb);
  }

  /**
   * Determine the common prefix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the start of each
   *     string.
   */
  function diff_commonPrefix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
      if (text1.substring(pointerstart, pointermid) ==
          text2.substring(pointerstart, pointermid)) {
        pointermin = pointermid;
        pointerstart = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  }

  /**
   * Determine the common suffix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the end of each string.
   */
  function diff_commonSuffix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 ||
        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
          text2.substring(text2.length - pointermid, text2.length - pointerend)) {
        pointermin = pointermid;
        pointerend = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  }

  /**
   * Do the two texts share a substring which is at least half the length of the
   * longer text?
   * This speedup can produce non-minimal diffs.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     text1, the suffix of text1, the prefix of text2, the suffix of
   *     text2 and the common middle.  Or null if there was no match.
   */
  function diff_halfMatch_(text1, text2) {
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
      return null;  // Pointless.
    }

    /**
     * Does a substring of shorttext exist within longtext such that the substring
     * is at least half the length of longtext?
     * Closure, but does not reference any external variables.
     * @param {string} longtext Longer string.
     * @param {string} shorttext Shorter string.
     * @param {number} i Start index of quarter length substring within longtext.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
     *     of shorttext and the common middle.  Or null if there was no match.
     * @private
     */
    function diff_halfMatchI_(longtext, shorttext, i) {
      // Start with a 1/4 length substring at position i as a seed.
      var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
      var j = -1;
      var best_common = '';
      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
      while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
        var prefixLength = diff_commonPrefix(longtext.substring(i),
                                             shorttext.substring(j));
        var suffixLength = diff_commonSuffix(longtext.substring(0, i),
                                             shorttext.substring(0, j));
        if (best_common.length < suffixLength + prefixLength) {
          best_common = shorttext.substring(j - suffixLength, j) +
              shorttext.substring(j, j + prefixLength);
          best_longtext_a = longtext.substring(0, i - suffixLength);
          best_longtext_b = longtext.substring(i + prefixLength);
          best_shorttext_a = shorttext.substring(0, j - suffixLength);
          best_shorttext_b = shorttext.substring(j + prefixLength);
        }
      }
      if (best_common.length * 2 >= longtext.length) {
        return [best_longtext_a, best_longtext_b,
                best_shorttext_a, best_shorttext_b, best_common];
      } else {
        return null;
      }
    }

    // First check if the second quarter is the seed for a half-match.
    var hm1 = diff_halfMatchI_(longtext, shorttext,
                               Math.ceil(longtext.length / 4));
    // Check again based on the third quarter.
    var hm2 = diff_halfMatchI_(longtext, shorttext,
                               Math.ceil(longtext.length / 2));
    var hm;
    if (!hm1 && !hm2) {
      return null;
    } else if (!hm2) {
      hm = hm1;
    } else if (!hm1) {
      hm = hm2;
    } else {
      // Both matched.  Select the longest.
      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }

    // A half-match was found, sort out the return data.
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
      text1_a = hm[0];
      text1_b = hm[1];
      text2_a = hm[2];
      text2_b = hm[3];
    } else {
      text2_a = hm[0];
      text2_b = hm[1];
      text1_a = hm[2];
      text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
  }

  /**
   * Reorder and merge like edit sections.  Merge equalities.
   * Any edit section can move as long as it doesn't cross an equality.
   * @param {Array} diffs Array of diff tuples.
   */
  function diff_cleanupMerge(diffs) {
    diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    var commonlength;
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_EQUAL:
          // Upon reaching an equality, check for prior redundancies.
          if (count_delete + count_insert > 1) {
            if (count_delete !== 0 && count_insert !== 0) {
              // Factor out any common prefixies.
              commonlength = diff_commonPrefix(text_insert, text_delete);
              if (commonlength !== 0) {
                if ((pointer - count_delete - count_insert) > 0 &&
                    diffs[pointer - count_delete - count_insert - 1][0] ==
                    DIFF_EQUAL) {
                  diffs[pointer - count_delete - count_insert - 1][1] +=
                      text_insert.substring(0, commonlength);
                } else {
                  diffs.splice(0, 0, [DIFF_EQUAL,
                                      text_insert.substring(0, commonlength)]);
                  pointer++;
                }
                text_insert = text_insert.substring(commonlength);
                text_delete = text_delete.substring(commonlength);
              }
              // Factor out any common suffixies.
              commonlength = diff_commonSuffix(text_insert, text_delete);
              if (commonlength !== 0) {
                diffs[pointer][1] = text_insert.substring(text_insert.length -
                    commonlength) + diffs[pointer][1];
                text_insert = text_insert.substring(0, text_insert.length -
                    commonlength);
                text_delete = text_delete.substring(0, text_delete.length -
                    commonlength);
              }
            }
            // Delete the offending records and add the merged ones.
            if (count_delete === 0) {
              diffs.splice(pointer - count_insert,
                  count_delete + count_insert, [DIFF_INSERT, text_insert]);
            } else if (count_insert === 0) {
              diffs.splice(pointer - count_delete,
                  count_delete + count_insert, [DIFF_DELETE, text_delete]);
            } else {
              diffs.splice(pointer - count_delete - count_insert,
                  count_delete + count_insert, [DIFF_DELETE, text_delete],
                  [DIFF_INSERT, text_insert]);
            }
            pointer = pointer - count_delete - count_insert +
                      (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
            // Merge this equality with the previous one.
            diffs[pointer - 1][1] += diffs[pointer][1];
            diffs.splice(pointer, 1);
          } else {
            pointer++;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = '';
          text_insert = '';
          break;
      }
    }
    if (diffs[diffs.length - 1][1] === '') {
      diffs.pop();  // Remove the dummy entry at the end.
    }

    // Second pass: look for single edits surrounded on both sides by equalities
    // which can be shifted sideways to eliminate an equality.
    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    var changes = false;
    pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL &&
          diffs[pointer + 1][0] == DIFF_EQUAL) {
        // This is a single edit surrounded by equalities.
        if (diffs[pointer][1].substring(diffs[pointer][1].length -
            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
          // Shift the edit over the previous equality.
          diffs[pointer][1] = diffs[pointer - 1][1] +
              diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                          diffs[pointer - 1][1].length);
          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
          diffs.splice(pointer - 1, 1);
          changes = true;
        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
            diffs[pointer + 1][1]) {
          // Shift the edit over the next equality.
          diffs[pointer - 1][1] += diffs[pointer + 1][1];
          diffs[pointer][1] =
              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
              diffs[pointer + 1][1];
          diffs.splice(pointer + 1, 1);
          changes = true;
        }
      }
      pointer++;
    }
    // If shifts were made, the diff needs reordering and another shift sweep.
    if (changes) {
      diff_cleanupMerge(diffs);
    }
  }

  var diff = diff_main;
  diff.INSERT = DIFF_INSERT;
  diff.DELETE = DIFF_DELETE;
  diff.EQUAL = DIFF_EQUAL;

  module.exports = diff;

  /*
   * Modify a diff such that the cursor position points to the start of a change:
   * E.g.
   *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
   *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
   *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
   *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
   *
   * @param {Array} diffs Array of diff tuples
   * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
   * @return {Array} A tuple [cursor location in the modified diff, modified diff]
   */
  function cursor_normalize_diff (diffs, cursor_pos) {
    if (cursor_pos === 0) {
      return [DIFF_EQUAL, diffs];
    }
    for (var current_pos = 0, i = 0; i < diffs.length; i++) {
      var d = diffs[i];
      if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
        var next_pos = current_pos + d[1].length;
        if (cursor_pos === next_pos) {
          return [i + 1, diffs];
        } else if (cursor_pos < next_pos) {
          // copy to prevent side effects
          diffs = diffs.slice();
          // split d into two diff changes
          var split_pos = cursor_pos - current_pos;
          var d_left = [d[0], d[1].slice(0, split_pos)];
          var d_right = [d[0], d[1].slice(split_pos)];
          diffs.splice(i, 1, d_left, d_right);
          return [i + 1, diffs];
        } else {
          current_pos = next_pos;
        }
      }
    }
    throw new Error('cursor_pos is out of bounds!')
  }

  /*
   * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
   *
   * Case 1)
   *   Check if a naive shift is possible:
   *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
   *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
   * Case 2)
   *   Check if the following shifts are possible:
   *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
   *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
   *         ^            ^
   *         d          d_next
   *
   * @param {Array} diffs Array of diff tuples
   * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
   * @return {Array} Array of diff tuples
   */
  function fix_cursor (diffs, cursor_pos) {
    var norm = cursor_normalize_diff(diffs, cursor_pos);
    var ndiffs = norm[1];
    var cursor_pointer = norm[0];
    var d = ndiffs[cursor_pointer];
    var d_next = ndiffs[cursor_pointer + 1];

    if (d == null) {
      // Text was deleted from end of original string,
      // cursor is now out of bounds in new string
      return diffs;
    } else if (d[0] !== DIFF_EQUAL) {
      // A modification happened at the cursor location.
      // This is the expected outcome, so we can return the original diff.
      return diffs;
    } else {
      if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
        // Case 1)
        // It is possible to perform a naive shift
        ndiffs.splice(cursor_pointer, 2, d_next, d);
        return merge_tuples(ndiffs, cursor_pointer, 2)
      } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
        // Case 2)
        // d[1] is a prefix of d_next[1]
        // We can assume that d_next[0] !== 0, since d[0] === 0
        // Shift edit locations..
        ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
        var suffix = d_next[1].slice(d[1].length);
        if (suffix.length > 0) {
          ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
        }
        return merge_tuples(ndiffs, cursor_pointer, 3)
      } else {
        // Not possible to perform any modification
        return diffs;
      }
    }
  }

  /*
   * Check diff did not split surrogate pairs.
   * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
   *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
   *
   * @param {Array} diffs Array of diff tuples
   * @return {Array} Array of diff tuples
   */
  function fix_emoji (diffs) {
    var compact = false;
    var starts_with_pair_end = function(str) {
      return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
    };
    var ends_with_pair_start = function(str) {
      return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
    };
    for (var i = 2; i < diffs.length; i += 1) {
      if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
          diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
          diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
        compact = true;

        diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
        diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

        diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
      }
    }
    if (!compact) {
      return diffs;
    }
    var fixed_diffs = [];
    for (var i = 0; i < diffs.length; i += 1) {
      if (diffs[i][1].length > 0) {
        fixed_diffs.push(diffs[i]);
      }
    }
    return fixed_diffs;
  }

  /*
   * Try to merge tuples with their neigbors in a given range.
   * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
   *
   * @param {Array} diffs Array of diff tuples.
   * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
   * @param {Int} length Number of consecutive elements to check.
   * @return {Array} Array of merged diff tuples.
   */
  function merge_tuples (diffs, start, length) {
    // Check from (start-1) to (start+length).
    for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
      if (i + 1 < diffs.length) {
        var left_d = diffs[i];
        var right_d = diffs[i+1];
        if (left_d[0] === right_d[1]) {
          diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
        }
      }
    }
    return diffs;
  }


  /***/ }),
  /* 52 */
  /***/ (function(module, exports) {

  exports = module.exports = typeof Object.keys === 'function'
    ? Object.keys : shim;

  exports.shim = shim;
  function shim (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }


  /***/ }),
  /* 53 */
  /***/ (function(module, exports) {

  var supportsArgumentsClass = (function(){
    return Object.prototype.toString.call(arguments)
  })() == '[object Arguments]';

  exports = module.exports = supportsArgumentsClass ? supported : unsupported;

  exports.supported = supported;
  function supported(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }
  exports.unsupported = unsupported;
  function unsupported(object){
    return object &&
      typeof object == 'object' &&
      typeof object.length == 'number' &&
      Object.prototype.hasOwnProperty.call(object, 'callee') &&
      !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
      false;
  }

  /***/ }),
  /* 54 */
  /***/ (function(module, exports) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @api private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {Mixed} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @api public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Boolean} exists Only check if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event
      , available = this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn The listener function.
   * @param {Mixed} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this)
      , evt = prefix ? prefix + event : event;

    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    else if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [this._events[evt], listener];

    return this;
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn The listener function.
   * @param {Mixed} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true)
      , evt = prefix ? prefix + event : event;

    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    else if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [this._events[evt], listener];

    return this;
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {Mixed} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
           listeners.fn === fn
        && (!once || listeners.once)
        && (!context || listeners.context === context)
      ) {
        if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
             listeners[i].fn !== fn
          || (once && !listeners[i].once)
          || (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {String|Symbol} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) {
        if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
      }
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }


  /***/ }),
  /* 55 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend2 = __webpack_require__(3);

  var _extend3 = _interopRequireDefault(_extend2);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _align = __webpack_require__(36);

  var _background = __webpack_require__(37);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _color = __webpack_require__(26);

  var _direction = __webpack_require__(38);

  var _font = __webpack_require__(39);

  var _size = __webpack_require__(40);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:clipboard');

  var DOM_KEY = '__ql-matcher';

  var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

  var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
    memo[attr.keyName] = attr;
    return memo;
  }, {});

  var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
    memo[attr.keyName] = attr;
    return memo;
  }, {});

  var Clipboard = function (_Module) {
    _inherits(Clipboard, _Module);

    function Clipboard(quill, options) {
      _classCallCheck(this, Clipboard);

      var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

      _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
      _this.container = _this.quill.addContainer('ql-clipboard');
      _this.container.setAttribute('contenteditable', true);
      _this.container.setAttribute('tabindex', -1);
      _this.matchers = [];
      CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            selector = _ref2[0],
            matcher = _ref2[1];

        if (!options.matchVisual && matcher === matchSpacing) return;
        _this.addMatcher(selector, matcher);
      });
      return _this;
    }

    _createClass(Clipboard, [{
      key: 'addMatcher',
      value: function addMatcher(selector, matcher) {
        this.matchers.push([selector, matcher]);
      }
    }, {
      key: 'convert',
      value: function convert(html) {
        if (typeof html === 'string') {
          this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
          return this.convert();
        }
        var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
        if (formats[_code2.default.blotName]) {
          var text = this.container.innerText;
          this.container.innerHTML = '';
          return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
        }

        var _prepareMatching = this.prepareMatching(),
            _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
            elementMatchers = _prepareMatching2[0],
            textMatchers = _prepareMatching2[1];

        var delta = traverse(this.container, elementMatchers, textMatchers);
        // Remove trailing newline
        if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
          delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
        }
        debug.log('convert', this.container.innerHTML, delta);
        this.container.innerHTML = '';
        return delta;
      }
    }, {
      key: 'dangerouslyPasteHTML',
      value: function dangerouslyPasteHTML(index, html) {
        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

        if (typeof index === 'string') {
          this.quill.setContents(this.convert(index), html);
          this.quill.setSelection(0, _quill2.default.sources.SILENT);
        } else {
          var paste = this.convert(html);
          this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
          this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
        }
      }
    }, {
      key: 'onPaste',
      value: function onPaste(e) {
        var _this2 = this;

        if (e.defaultPrevented || !this.quill.isEnabled()) return;
        var range = this.quill.getSelection();
        var delta = new _quillDelta2.default().retain(range.index);
        var scrollTop = this.quill.scrollingContainer.scrollTop;
        this.container.focus();
        this.quill.selection.update(_quill2.default.sources.SILENT);
        setTimeout(function () {
          delta = delta.concat(_this2.convert()).delete(range.length);
          _this2.quill.updateContents(delta, _quill2.default.sources.USER);
          // range.length contributes to delta.length()
          _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
          _this2.quill.scrollingContainer.scrollTop = scrollTop;
          _this2.quill.focus();
        }, 1);
      }
    }, {
      key: 'prepareMatching',
      value: function prepareMatching() {
        var _this3 = this;

        var elementMatchers = [],
            textMatchers = [];
        this.matchers.forEach(function (pair) {
          var _pair = _slicedToArray(pair, 2),
              selector = _pair[0],
              matcher = _pair[1];

          switch (selector) {
            case Node.TEXT_NODE:
              textMatchers.push(matcher);
              break;
            case Node.ELEMENT_NODE:
              elementMatchers.push(matcher);
              break;
            default:
              [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
                // TODO use weakmap
                node[DOM_KEY] = node[DOM_KEY] || [];
                node[DOM_KEY].push(matcher);
              });
              break;
          }
        });
        return [elementMatchers, textMatchers];
      }
    }]);

    return Clipboard;
  }(_module2.default);

  Clipboard.DEFAULTS = {
    matchers: [],
    matchVisual: true
  };

  function applyFormat(delta, format, value) {
    if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
      return Object.keys(format).reduce(function (delta, key) {
        return applyFormat(delta, key, format[key]);
      }, delta);
    } else {
      return delta.reduce(function (delta, op) {
        if (op.attributes && op.attributes[format]) {
          return delta.push(op);
        } else {
          return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
        }
      }, new _quillDelta2.default());
    }
  }

  function computeStyle(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) return {};
    var DOM_KEY = '__ql-computed-style';
    return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
  }

  function deltaEndsWith(delta, text) {
    var endText = "";
    for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
      var op = delta.ops[i];
      if (typeof op.insert !== 'string') break;
      endText = op.insert + endText;
    }
    return endText.slice(-1 * text.length) === text;
  }

  function isLine(node) {
    if (node.childNodes.length === 0) return false; // Exclude embed blocks
    var style = computeStyle(node);
    return ['block', 'list-item'].indexOf(style.display) > -1;
  }

  function traverse(node, elementMatchers, textMatchers) {
    // Post-order
    if (node.nodeType === node.TEXT_NODE) {
      return textMatchers.reduce(function (delta, matcher) {
        return matcher(node, delta);
      }, new _quillDelta2.default());
    } else if (node.nodeType === node.ELEMENT_NODE) {
      return [].reduce.call(node.childNodes || [], function (delta, childNode) {
        var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
        if (childNode.nodeType === node.ELEMENT_NODE) {
          childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
            return matcher(childNode, childrenDelta);
          }, childrenDelta);
          childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
            return matcher(childNode, childrenDelta);
          }, childrenDelta);
        }
        return delta.concat(childrenDelta);
      }, new _quillDelta2.default());
    } else {
      return new _quillDelta2.default();
    }
  }

  function matchAlias(format, node, delta) {
    return applyFormat(delta, format, true);
  }

  function matchAttributor(node, delta) {
    var attributes = _parchment2.default.Attributor.Attribute.keys(node);
    var classes = _parchment2.default.Attributor.Class.keys(node);
    var styles = _parchment2.default.Attributor.Style.keys(node);
    var formats = {};
    attributes.concat(classes).concat(styles).forEach(function (name) {
      var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
      if (attr != null) {
        formats[attr.attrName] = attr.value(node);
        if (formats[attr.attrName]) return;
      }
      attr = ATTRIBUTE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        formats[attr.attrName] = attr.value(node) || undefined;
      }
      attr = STYLE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        attr = STYLE_ATTRIBUTORS[name];
        formats[attr.attrName] = attr.value(node) || undefined;
      }
    });
    if (Object.keys(formats).length > 0) {
      delta = applyFormat(delta, formats);
    }
    return delta;
  }

  function matchBlot(node, delta) {
    var match = _parchment2.default.query(node);
    if (match == null) return delta;
    if (match.prototype instanceof _parchment2.default.Embed) {
      var embed = {};
      var value = match.value(node);
      if (value != null) {
        embed[match.blotName] = value;
        delta = new _quillDelta2.default().insert(embed, match.formats(node));
      }
    } else if (typeof match.formats === 'function') {
      delta = applyFormat(delta, match.blotName, match.formats(node));
    }
    return delta;
  }

  function matchBreak(node, delta) {
    if (!deltaEndsWith(delta, '\n')) {
      delta.insert('\n');
    }
    return delta;
  }

  function matchIgnore() {
    return new _quillDelta2.default();
  }

  function matchIndent(node, delta) {
    var match = _parchment2.default.query(node);
    if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
      return delta;
    }
    var indent = -1,
        parent = node.parentNode;
    while (!parent.classList.contains('ql-clipboard')) {
      if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
        indent += 1;
      }
      parent = parent.parentNode;
    }
    if (indent <= 0) return delta;
    return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
  }

  function matchNewline(node, delta) {
    if (!deltaEndsWith(delta, '\n')) {
      if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
        delta.insert('\n');
      }
    }
    return delta;
  }

  function matchSpacing(node, delta) {
    if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
      var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
      if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
        delta.insert('\n');
      }
    }
    return delta;
  }

  function matchStyles(node, delta) {
    var formats = {};
    var style = node.style || {};
    if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
      formats.italic = true;
    }
    if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
      formats.bold = true;
    }
    if (Object.keys(formats).length > 0) {
      delta = applyFormat(delta, formats);
    }
    if (parseFloat(style.textIndent || 0) > 0) {
      // Could be 0.5in
      delta = new _quillDelta2.default().insert('\t').concat(delta);
    }
    return delta;
  }

  function matchText(node, delta) {
    var text = node.data;
    // Word represents empty line with <o:p>&nbsp;</o:p>
    if (node.parentNode.tagName === 'O:P') {
      return delta.insert(text.trim());
    }
    if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
      return delta;
    }
    if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
      // eslint-disable-next-line func-style
      var replacer = function replacer(collapse, match) {
        match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
        return match.length < 1 && collapse ? ' ' : match;
      };
      text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
      text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
      if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
        text = text.replace(/^\s+/, replacer.bind(replacer, false));
      }
      if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
        text = text.replace(/\s+$/, replacer.bind(replacer, false));
      }
    }
    return delta.insert(text);
  }

  exports.default = Clipboard;
  exports.matchAttributor = matchAttributor;
  exports.matchBlot = matchBlot;
  exports.matchNewline = matchNewline;
  exports.matchSpacing = matchSpacing;
  exports.matchText = matchText;

  /***/ }),
  /* 56 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Bold = function (_Inline) {
    _inherits(Bold, _Inline);

    function Bold() {
      _classCallCheck(this, Bold);

      return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
    }

    _createClass(Bold, [{
      key: 'optimize',
      value: function optimize(context) {
        _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
        if (this.domNode.tagName !== this.statics.tagName[0]) {
          this.replaceWith(this.statics.blotName);
        }
      }
    }], [{
      key: 'create',
      value: function create() {
        return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
      }
    }, {
      key: 'formats',
      value: function formats() {
        return true;
      }
    }]);

    return Bold;
  }(_inline2.default);

  Bold.blotName = 'bold';
  Bold.tagName = ['STRONG', 'B'];

  exports.default = Bold;

  /***/ }),
  /* 57 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addControls = exports.default = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:toolbar');

  var Toolbar = function (_Module) {
    _inherits(Toolbar, _Module);

    function Toolbar(quill, options) {
      _classCallCheck(this, Toolbar);

      var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

      if (Array.isArray(_this.options.container)) {
        var container = document.createElement('div');
        addControls(container, _this.options.container);
        quill.container.parentNode.insertBefore(container, quill.container);
        _this.container = container;
      } else if (typeof _this.options.container === 'string') {
        _this.container = document.querySelector(_this.options.container);
      } else {
        _this.container = _this.options.container;
      }
      if (!(_this.container instanceof HTMLElement)) {
        var _ret;

        return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
      }
      _this.container.classList.add('ql-toolbar');
      _this.controls = [];
      _this.handlers = {};
      Object.keys(_this.options.handlers).forEach(function (format) {
        _this.addHandler(format, _this.options.handlers[format]);
      });
      [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
        _this.attach(input);
      });
      _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
        if (type === _quill2.default.events.SELECTION_CHANGE) {
          _this.update(range);
        }
      });
      _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
        var _this$quill$selection = _this.quill.selection.getRange(),
            _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
            range = _this$quill$selection2[0]; // quill.getSelection triggers update


        _this.update(range);
      });
      return _this;
    }

    _createClass(Toolbar, [{
      key: 'addHandler',
      value: function addHandler(format, handler) {
        this.handlers[format] = handler;
      }
    }, {
      key: 'attach',
      value: function attach(input) {
        var _this2 = this;

        var format = [].find.call(input.classList, function (className) {
          return className.indexOf('ql-') === 0;
        });
        if (!format) return;
        format = format.slice('ql-'.length);
        if (input.tagName === 'BUTTON') {
          input.setAttribute('type', 'button');
        }
        if (this.handlers[format] == null) {
          if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
            debug.warn('ignoring attaching to disabled format', format, input);
            return;
          }
          if (_parchment2.default.query(format) == null) {
            debug.warn('ignoring attaching to nonexistent format', format, input);
            return;
          }
        }
        var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
        input.addEventListener(eventName, function (e) {
          var value = void 0;
          if (input.tagName === 'SELECT') {
            if (input.selectedIndex < 0) return;
            var selected = input.options[input.selectedIndex];
            if (selected.hasAttribute('selected')) {
              value = false;
            } else {
              value = selected.value || false;
            }
          } else {
            if (input.classList.contains('ql-active')) {
              value = false;
            } else {
              value = input.value || !input.hasAttribute('value');
            }
            e.preventDefault();
          }
          _this2.quill.focus();

          var _quill$selection$getR = _this2.quill.selection.getRange(),
              _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
              range = _quill$selection$getR2[0];

          if (_this2.handlers[format] != null) {
            _this2.handlers[format].call(_this2, value);
          } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
            value = prompt('Enter ' + format);
            if (!value) return;
            _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
          } else {
            _this2.quill.format(format, value, _quill2.default.sources.USER);
          }
          _this2.update(range);
        });
        // TODO use weakmap
        this.controls.push([format, input]);
      }
    }, {
      key: 'update',
      value: function update(range) {
        var formats = range == null ? {} : this.quill.getFormat(range);
        this.controls.forEach(function (pair) {
          var _pair = _slicedToArray(pair, 2),
              format = _pair[0],
              input = _pair[1];

          if (input.tagName === 'SELECT') {
            var option = void 0;
            if (range == null) {
              option = null;
            } else if (formats[format] == null) {
              option = input.querySelector('option[selected]');
            } else if (!Array.isArray(formats[format])) {
              var value = formats[format];
              if (typeof value === 'string') {
                value = value.replace(/\"/g, '\\"');
              }
              option = input.querySelector('option[value="' + value + '"]');
            }
            if (option == null) {
              input.value = ''; // TODO make configurable?
              input.selectedIndex = -1;
            } else {
              option.selected = true;
            }
          } else {
            if (range == null) {
              input.classList.remove('ql-active');
            } else if (input.hasAttribute('value')) {
              // both being null should match (default values)
              // '1' should match with 1 (headers)
              var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
              input.classList.toggle('ql-active', isActive);
            } else {
              input.classList.toggle('ql-active', formats[format] != null);
            }
          }
        });
      }
    }]);

    return Toolbar;
  }(_module2.default);

  Toolbar.DEFAULTS = {};

  function addButton(container, format, value) {
    var input = document.createElement('button');
    input.setAttribute('type', 'button');
    input.classList.add('ql-' + format);
    if (value != null) {
      input.value = value;
    }
    container.appendChild(input);
  }

  function addControls(container, groups) {
    if (!Array.isArray(groups[0])) {
      groups = [groups];
    }
    groups.forEach(function (controls) {
      var group = document.createElement('span');
      group.classList.add('ql-formats');
      controls.forEach(function (control) {
        if (typeof control === 'string') {
          addButton(group, control);
        } else {
          var format = Object.keys(control)[0];
          var value = control[format];
          if (Array.isArray(value)) {
            addSelect(group, format, value);
          } else {
            addButton(group, format, value);
          }
        }
      });
      container.appendChild(group);
    });
  }

  function addSelect(container, format, values) {
    var input = document.createElement('select');
    input.classList.add('ql-' + format);
    values.forEach(function (value) {
      var option = document.createElement('option');
      if (value !== false) {
        option.setAttribute('value', value);
      } else {
        option.setAttribute('selected', 'selected');
      }
      input.appendChild(option);
    });
    container.appendChild(input);
  }

  Toolbar.DEFAULTS = {
    container: null,
    handlers: {
      clean: function clean() {
        var _this3 = this;

        var range = this.quill.getSelection();
        if (range == null) return;
        if (range.length == 0) {
          var formats = this.quill.getFormat();
          Object.keys(formats).forEach(function (name) {
            // Clean functionality in existing apps only clean inline formats
            if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
              _this3.quill.format(name, false);
            }
          });
        } else {
          this.quill.removeFormat(range, _quill2.default.sources.USER);
        }
      },
      direction: function direction(value) {
        var align = this.quill.getFormat()['align'];
        if (value === 'rtl' && align == null) {
          this.quill.format('align', 'right', _quill2.default.sources.USER);
        } else if (!value && align === 'right') {
          this.quill.format('align', false, _quill2.default.sources.USER);
        }
        this.quill.format('direction', value, _quill2.default.sources.USER);
      },
      indent: function indent(value) {
        var range = this.quill.getSelection();
        var formats = this.quill.getFormat(range);
        var indent = parseInt(formats.indent || 0);
        if (value === '+1' || value === '-1') {
          var modifier = value === '+1' ? 1 : -1;
          if (formats.direction === 'rtl') modifier *= -1;
          this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
        }
      },
      link: function link(value) {
        if (value === true) {
          value = prompt('Enter link URL:');
        }
        this.quill.format('link', value, _quill2.default.sources.USER);
      },
      list: function list(value) {
        var range = this.quill.getSelection();
        var formats = this.quill.getFormat(range);
        if (value === 'check') {
          if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
            this.quill.format('list', false, _quill2.default.sources.USER);
          } else {
            this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
          }
        } else {
          this.quill.format('list', value, _quill2.default.sources.USER);
        }
      }
    }
  };

  exports.default = Toolbar;
  exports.addControls = addControls;

  /***/ }),
  /* 58 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

  /***/ }),
  /* 59 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorPicker = function (_Picker) {
    _inherits(ColorPicker, _Picker);

    function ColorPicker(select, label) {
      _classCallCheck(this, ColorPicker);

      var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

      _this.label.innerHTML = label;
      _this.container.classList.add('ql-color-picker');
      [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
        item.classList.add('ql-primary');
      });
      return _this;
    }

    _createClass(ColorPicker, [{
      key: 'buildItem',
      value: function buildItem(option) {
        var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
        item.style.backgroundColor = option.getAttribute('value') || '';
        return item;
      }
    }, {
      key: 'selectItem',
      value: function selectItem(item, trigger) {
        _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
        var colorLabel = this.label.querySelector('.ql-color-label');
        var value = item ? item.getAttribute('data-value') || '' : '';
        if (colorLabel) {
          if (colorLabel.tagName === 'line') {
            colorLabel.style.stroke = value;
          } else {
            colorLabel.style.fill = value;
          }
        }
      }
    }]);

    return ColorPicker;
  }(_picker2.default);

  exports.default = ColorPicker;

  /***/ }),
  /* 60 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IconPicker = function (_Picker) {
    _inherits(IconPicker, _Picker);

    function IconPicker(select, icons) {
      _classCallCheck(this, IconPicker);

      var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

      _this.container.classList.add('ql-icon-picker');
      [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
        item.innerHTML = icons[item.getAttribute('data-value') || ''];
      });
      _this.defaultItem = _this.container.querySelector('.ql-selected');
      _this.selectItem(_this.defaultItem);
      return _this;
    }

    _createClass(IconPicker, [{
      key: 'selectItem',
      value: function selectItem(item, trigger) {
        _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
        item = item || this.defaultItem;
        this.label.innerHTML = item.innerHTML;
      }
    }]);

    return IconPicker;
  }(_picker2.default);

  exports.default = IconPicker;

  /***/ }),
  /* 61 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Tooltip = function () {
    function Tooltip(quill, boundsContainer) {
      var _this = this;

      _classCallCheck(this, Tooltip);

      this.quill = quill;
      this.boundsContainer = boundsContainer || document.body;
      this.root = quill.addContainer('ql-tooltip');
      this.root.innerHTML = this.constructor.TEMPLATE;
      if (this.quill.root === this.quill.scrollingContainer) {
        this.quill.root.addEventListener('scroll', function () {
          _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
        });
      }
      this.hide();
    }

    _createClass(Tooltip, [{
      key: 'hide',
      value: function hide() {
        this.root.classList.add('ql-hidden');
      }
    }, {
      key: 'position',
      value: function position(reference) {
        var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
        // root.scrollTop should be 0 if scrollContainer !== root
        var top = reference.bottom + this.quill.root.scrollTop;
        this.root.style.left = left + 'px';
        this.root.style.top = top + 'px';
        this.root.classList.remove('ql-flip');
        var containerBounds = this.boundsContainer.getBoundingClientRect();
        var rootBounds = this.root.getBoundingClientRect();
        var shift = 0;
        if (rootBounds.right > containerBounds.right) {
          shift = containerBounds.right - rootBounds.right;
          this.root.style.left = left + shift + 'px';
        }
        if (rootBounds.left < containerBounds.left) {
          shift = containerBounds.left - rootBounds.left;
          this.root.style.left = left + shift + 'px';
        }
        if (rootBounds.bottom > containerBounds.bottom) {
          var height = rootBounds.bottom - rootBounds.top;
          var verticalShift = reference.bottom - reference.top + height;
          this.root.style.top = top - verticalShift + 'px';
          this.root.classList.add('ql-flip');
        }
        return shift;
      }
    }, {
      key: 'show',
      value: function show() {
        this.root.classList.remove('ql-editing');
        this.root.classList.remove('ql-hidden');
      }
    }]);

    return Tooltip;
  }();

  exports.default = Tooltip;

  /***/ }),
  /* 62 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _base = __webpack_require__(43);

  var _base2 = _interopRequireDefault(_base);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  var _selection = __webpack_require__(15);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

  var SnowTheme = function (_BaseTheme) {
    _inherits(SnowTheme, _BaseTheme);

    function SnowTheme(quill, options) {
      _classCallCheck(this, SnowTheme);

      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG;
      }

      var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

      _this.quill.container.classList.add('ql-snow');
      return _this;
    }

    _createClass(SnowTheme, [{
      key: 'extendToolbar',
      value: function extendToolbar(toolbar) {
        toolbar.container.classList.add('ql-snow');
        this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
        this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
        this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
        if (toolbar.container.querySelector('.ql-link')) {
          this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
            toolbar.handlers['link'].call(toolbar, !context.format.link);
          });
        }
      }
    }]);

    return SnowTheme;
  }(_base2.default);

  SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link: function link(value) {
            if (value) {
              var range = this.quill.getSelection();
              if (range == null || range.length == 0) return;
              var preview = this.quill.getText(range);
              if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                preview = 'mailto:' + preview;
              }
              var tooltip = this.quill.theme.tooltip;
              tooltip.edit('link', preview);
            } else {
              this.quill.format('link', false);
            }
          }
        }
      }
    }
  });

  var SnowTooltip = function (_BaseTooltip) {
    _inherits(SnowTooltip, _BaseTooltip);

    function SnowTooltip(quill, bounds) {
      _classCallCheck(this, SnowTooltip);

      var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

      _this2.preview = _this2.root.querySelector('a.ql-preview');
      return _this2;
    }

    _createClass(SnowTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this3 = this;

        _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
        this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
          if (_this3.root.classList.contains('ql-editing')) {
            _this3.save();
          } else {
            _this3.edit('link', _this3.preview.textContent);
          }
          event.preventDefault();
        });
        this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
          if (_this3.linkRange != null) {
            var range = _this3.linkRange;
            _this3.restoreFocus();
            _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
            delete _this3.linkRange;
          }
          event.preventDefault();
          _this3.hide();
        });
        this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
          if (range == null) return;
          if (range.length === 0 && source === _emitter2.default.sources.USER) {
            var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
                _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                link = _quill$scroll$descend2[0],
                offset = _quill$scroll$descend2[1];

            if (link != null) {
              _this3.linkRange = new _selection.Range(range.index - offset, link.length());
              var preview = _link2.default.formats(link.domNode);
              _this3.preview.textContent = preview;
              _this3.preview.setAttribute('href', preview);
              _this3.show();
              _this3.position(_this3.quill.getBounds(_this3.linkRange));
              return;
            }
          } else {
            delete _this3.linkRange;
          }
          _this3.hide();
        });
      }
    }, {
      key: 'show',
      value: function show() {
        _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
        this.root.removeAttribute('data-mode');
      }
    }]);

    return SnowTooltip;
  }(_base.BaseTooltip);

  SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

  exports.default = SnowTheme;

  /***/ }),
  /* 63 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _core = __webpack_require__(29);

  var _core2 = _interopRequireDefault(_core);

  var _align = __webpack_require__(36);

  var _direction = __webpack_require__(38);

  var _indent = __webpack_require__(64);

  var _blockquote = __webpack_require__(65);

  var _blockquote2 = _interopRequireDefault(_blockquote);

  var _header = __webpack_require__(66);

  var _header2 = _interopRequireDefault(_header);

  var _list = __webpack_require__(67);

  var _list2 = _interopRequireDefault(_list);

  var _background = __webpack_require__(37);

  var _color = __webpack_require__(26);

  var _font = __webpack_require__(39);

  var _size = __webpack_require__(40);

  var _bold = __webpack_require__(56);

  var _bold2 = _interopRequireDefault(_bold);

  var _italic = __webpack_require__(68);

  var _italic2 = _interopRequireDefault(_italic);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  var _script = __webpack_require__(69);

  var _script2 = _interopRequireDefault(_script);

  var _strike = __webpack_require__(70);

  var _strike2 = _interopRequireDefault(_strike);

  var _underline = __webpack_require__(71);

  var _underline2 = _interopRequireDefault(_underline);

  var _image = __webpack_require__(72);

  var _image2 = _interopRequireDefault(_image);

  var _video = __webpack_require__(73);

  var _video2 = _interopRequireDefault(_video);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _formula = __webpack_require__(74);

  var _formula2 = _interopRequireDefault(_formula);

  var _syntax = __webpack_require__(75);

  var _syntax2 = _interopRequireDefault(_syntax);

  var _toolbar = __webpack_require__(57);

  var _toolbar2 = _interopRequireDefault(_toolbar);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  var _colorPicker = __webpack_require__(59);

  var _colorPicker2 = _interopRequireDefault(_colorPicker);

  var _iconPicker = __webpack_require__(60);

  var _iconPicker2 = _interopRequireDefault(_iconPicker);

  var _tooltip = __webpack_require__(61);

  var _tooltip2 = _interopRequireDefault(_tooltip);

  var _bubble = __webpack_require__(108);

  var _bubble2 = _interopRequireDefault(_bubble);

  var _snow = __webpack_require__(62);

  var _snow2 = _interopRequireDefault(_snow);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _core2.default.register({
    'attributors/attribute/direction': _direction.DirectionAttribute,

    'attributors/class/align': _align.AlignClass,
    'attributors/class/background': _background.BackgroundClass,
    'attributors/class/color': _color.ColorClass,
    'attributors/class/direction': _direction.DirectionClass,
    'attributors/class/font': _font.FontClass,
    'attributors/class/size': _size.SizeClass,

    'attributors/style/align': _align.AlignStyle,
    'attributors/style/background': _background.BackgroundStyle,
    'attributors/style/color': _color.ColorStyle,
    'attributors/style/direction': _direction.DirectionStyle,
    'attributors/style/font': _font.FontStyle,
    'attributors/style/size': _size.SizeStyle
  }, true);

  _core2.default.register({
    'formats/align': _align.AlignClass,
    'formats/direction': _direction.DirectionClass,
    'formats/indent': _indent.IndentClass,

    'formats/background': _background.BackgroundStyle,
    'formats/color': _color.ColorStyle,
    'formats/font': _font.FontClass,
    'formats/size': _size.SizeClass,

    'formats/blockquote': _blockquote2.default,
    'formats/code-block': _code2.default,
    'formats/header': _header2.default,
    'formats/list': _list2.default,

    'formats/bold': _bold2.default,
    'formats/code': _code.Code,
    'formats/italic': _italic2.default,
    'formats/link': _link2.default,
    'formats/script': _script2.default,
    'formats/strike': _strike2.default,
    'formats/underline': _underline2.default,

    'formats/image': _image2.default,
    'formats/video': _video2.default,

    'formats/list/item': _list.ListItem,

    'modules/formula': _formula2.default,
    'modules/syntax': _syntax2.default,
    'modules/toolbar': _toolbar2.default,

    'themes/bubble': _bubble2.default,
    'themes/snow': _snow2.default,

    'ui/icons': _icons2.default,
    'ui/picker': _picker2.default,
    'ui/icon-picker': _iconPicker2.default,
    'ui/color-picker': _colorPicker2.default,
    'ui/tooltip': _tooltip2.default
  }, true);

  exports.default = _core2.default;

  /***/ }),
  /* 64 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IndentClass = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IdentAttributor = function (_Parchment$Attributor) {
    _inherits(IdentAttributor, _Parchment$Attributor);

    function IdentAttributor() {
      _classCallCheck(this, IdentAttributor);

      return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
    }

    _createClass(IdentAttributor, [{
      key: 'add',
      value: function add(node, value) {
        if (value === '+1' || value === '-1') {
          var indent = this.value(node) || 0;
          value = value === '+1' ? indent + 1 : indent - 1;
        }
        if (value === 0) {
          this.remove(node);
          return true;
        } else {
          return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
        }
      }
    }, {
      key: 'canAdd',
      value: function canAdd(node, value) {
        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
      }
    }, {
      key: 'value',
      value: function value(node) {
        return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
      }
    }]);

    return IdentAttributor;
  }(_parchment2.default.Attributor.Class);

  var IndentClass = new IdentAttributor('indent', 'ql-indent', {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
  });

  exports.IndentClass = IndentClass;

  /***/ }),
  /* 65 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blockquote = function (_Block) {
    _inherits(Blockquote, _Block);

    function Blockquote() {
      _classCallCheck(this, Blockquote);

      return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
    }

    return Blockquote;
  }(_block2.default);

  Blockquote.blotName = 'blockquote';
  Blockquote.tagName = 'blockquote';

  exports.default = Blockquote;

  /***/ }),
  /* 66 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Header = function (_Block) {
    _inherits(Header, _Block);

    function Header() {
      _classCallCheck(this, Header);

      return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    }

    _createClass(Header, null, [{
      key: 'formats',
      value: function formats(domNode) {
        return this.tagName.indexOf(domNode.tagName) + 1;
      }
    }]);

    return Header;
  }(_block2.default);

  Header.blotName = 'header';
  Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

  exports.default = Header;

  /***/ }),
  /* 67 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ListItem = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ListItem = function (_Block) {
    _inherits(ListItem, _Block);

    function ListItem() {
      _classCallCheck(this, ListItem);

      return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    }

    _createClass(ListItem, [{
      key: 'format',
      value: function format(name, value) {
        if (name === List.blotName && !value) {
          this.replaceWith(_parchment2.default.create(this.statics.scope));
        } else {
          _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
        }
      }
    }, {
      key: 'remove',
      value: function remove() {
        if (this.prev == null && this.next == null) {
          this.parent.remove();
        } else {
          _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
        }
      }
    }, {
      key: 'replaceWith',
      value: function replaceWith(name, value) {
        this.parent.isolate(this.offset(this.parent), this.length());
        if (name === this.parent.statics.blotName) {
          this.parent.replaceWith(name, value);
          return this;
        } else {
          this.parent.unwrap();
          return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
        }
      }
    }], [{
      key: 'formats',
      value: function formats(domNode) {
        return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
      }
    }]);

    return ListItem;
  }(_block2.default);

  ListItem.blotName = 'list-item';
  ListItem.tagName = 'LI';

  var List = function (_Container) {
    _inherits(List, _Container);

    _createClass(List, null, [{
      key: 'create',
      value: function create(value) {
        var tagName = value === 'ordered' ? 'OL' : 'UL';
        var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
        if (value === 'checked' || value === 'unchecked') {
          node.setAttribute('data-checked', value === 'checked');
        }
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        if (domNode.tagName === 'OL') return 'ordered';
        if (domNode.tagName === 'UL') {
          if (domNode.hasAttribute('data-checked')) {
            return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
          } else {
            return 'bullet';
          }
        }
        return undefined;
      }
    }]);

    function List(domNode) {
      _classCallCheck(this, List);

      var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

      var listEventHandler = function listEventHandler(e) {
        if (e.target.parentNode !== domNode) return;
        var format = _this2.statics.formats(domNode);
        var blot = _parchment2.default.find(e.target);
        if (format === 'checked') {
          blot.format('list', 'unchecked');
        } else if (format === 'unchecked') {
          blot.format('list', 'checked');
        }
      };

      domNode.addEventListener('touchstart', listEventHandler);
      domNode.addEventListener('mousedown', listEventHandler);
      return _this2;
    }

    _createClass(List, [{
      key: 'format',
      value: function format(name, value) {
        if (this.children.length > 0) {
          this.children.tail.format(name, value);
        }
      }
    }, {
      key: 'formats',
      value: function formats() {
        // We don't inherit from FormatBlot
        return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        if (blot instanceof ListItem) {
          _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
        } else {
          var index = ref == null ? this.length() : ref.offset(this);
          var after = this.split(index);
          after.parent.insertBefore(blot, after);
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
        var next = this.next;
        if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
          next.moveChildren(this);
          next.remove();
        }
      }
    }, {
      key: 'replace',
      value: function replace(target) {
        if (target.statics.blotName !== this.statics.blotName) {
          var item = _parchment2.default.create(this.statics.defaultChild);
          target.moveChildren(item);
          this.appendChild(item);
        }
        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
      }
    }]);

    return List;
  }(_container2.default);

  List.blotName = 'list';
  List.scope = _parchment2.default.Scope.BLOCK_BLOT;
  List.tagName = ['OL', 'UL'];
  List.defaultChild = 'list-item';
  List.allowedChildren = [ListItem];

  exports.ListItem = ListItem;
  exports.default = List;

  /***/ }),
  /* 68 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _bold = __webpack_require__(56);

  var _bold2 = _interopRequireDefault(_bold);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Italic = function (_Bold) {
    _inherits(Italic, _Bold);

    function Italic() {
      _classCallCheck(this, Italic);

      return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
    }

    return Italic;
  }(_bold2.default);

  Italic.blotName = 'italic';
  Italic.tagName = ['EM', 'I'];

  exports.default = Italic;

  /***/ }),
  /* 69 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Script = function (_Inline) {
    _inherits(Script, _Inline);

    function Script() {
      _classCallCheck(this, Script);

      return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
    }

    _createClass(Script, null, [{
      key: 'create',
      value: function create(value) {
        if (value === 'super') {
          return document.createElement('sup');
        } else if (value === 'sub') {
          return document.createElement('sub');
        } else {
          return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
        }
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        if (domNode.tagName === 'SUB') return 'sub';
        if (domNode.tagName === 'SUP') return 'super';
        return undefined;
      }
    }]);

    return Script;
  }(_inline2.default);

  Script.blotName = 'script';
  Script.tagName = ['SUB', 'SUP'];

  exports.default = Script;

  /***/ }),
  /* 70 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Strike = function (_Inline) {
    _inherits(Strike, _Inline);

    function Strike() {
      _classCallCheck(this, Strike);

      return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
    }

    return Strike;
  }(_inline2.default);

  Strike.blotName = 'strike';
  Strike.tagName = 'S';

  exports.default = Strike;

  /***/ }),
  /* 71 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Underline = function (_Inline) {
    _inherits(Underline, _Inline);

    function Underline() {
      _classCallCheck(this, Underline);

      return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
    }

    return Underline;
  }(_inline2.default);

  Underline.blotName = 'underline';
  Underline.tagName = 'U';

  exports.default = Underline;

  /***/ }),
  /* 72 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _link = __webpack_require__(27);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ATTRIBUTES = ['alt', 'height', 'width'];

  var Image = function (_Parchment$Embed) {
    _inherits(Image, _Parchment$Embed);

    function Image() {
      _classCallCheck(this, Image);

      return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    }

    _createClass(Image, [{
      key: 'format',
      value: function format(name, value) {
        if (ATTRIBUTES.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
        }
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
        if (typeof value === 'string') {
          node.setAttribute('src', this.sanitize(value));
        }
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return ATTRIBUTES.reduce(function (formats, attribute) {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
    }, {
      key: 'match',
      value: function match(url) {
        return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
        );
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('src');
      }
    }]);

    return Image;
  }(_parchment2.default.Embed);

  Image.blotName = 'image';
  Image.tagName = 'IMG';

  exports.default = Image;

  /***/ }),
  /* 73 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _block = __webpack_require__(4);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ATTRIBUTES = ['height', 'width'];

  var Video = function (_BlockEmbed) {
    _inherits(Video, _BlockEmbed);

    function Video() {
      _classCallCheck(this, Video);

      return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    }

    _createClass(Video, [{
      key: 'format',
      value: function format(name, value) {
        if (ATTRIBUTES.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
        }
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
        node.setAttribute('frameborder', '0');
        node.setAttribute('allowfullscreen', true);
        node.setAttribute('src', this.sanitize(value));
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return ATTRIBUTES.reduce(function (formats, attribute) {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return _link2.default.sanitize(url);
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('src');
      }
    }]);

    return Video;
  }(_block.BlockEmbed);

  Video.blotName = 'video';
  Video.className = 'ql-video';
  Video.tagName = 'IFRAME';

  exports.default = Video;

  /***/ }),
  /* 74 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.FormulaBlot = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _embed = __webpack_require__(35);

  var _embed2 = _interopRequireDefault(_embed);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var FormulaBlot = function (_Embed) {
    _inherits(FormulaBlot, _Embed);

    function FormulaBlot() {
      _classCallCheck(this, FormulaBlot);

      return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
    }

    _createClass(FormulaBlot, null, [{
      key: 'create',
      value: function create(value) {
        var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
        if (typeof value === 'string') {
          window.katex.render(value, node, {
            throwOnError: false,
            errorColor: '#f00'
          });
          node.setAttribute('data-value', value);
        }
        return node;
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('data-value');
      }
    }]);

    return FormulaBlot;
  }(_embed2.default);

  FormulaBlot.blotName = 'formula';
  FormulaBlot.className = 'ql-formula';
  FormulaBlot.tagName = 'SPAN';

  var Formula = function (_Module) {
    _inherits(Formula, _Module);

    _createClass(Formula, null, [{
      key: 'register',
      value: function register() {
        _quill2.default.register(FormulaBlot, true);
      }
    }]);

    function Formula() {
      _classCallCheck(this, Formula);

      var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

      if (window.katex == null) {
        throw new Error('Formula module requires KaTeX.');
      }
      return _this2;
    }

    return Formula;
  }(_module2.default);

  exports.FormulaBlot = FormulaBlot;
  exports.default = Formula;

  /***/ }),
  /* 75 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CodeToken = exports.CodeBlock = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var SyntaxCodeBlock = function (_CodeBlock) {
    _inherits(SyntaxCodeBlock, _CodeBlock);

    function SyntaxCodeBlock() {
      _classCallCheck(this, SyntaxCodeBlock);

      return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
    }

    _createClass(SyntaxCodeBlock, [{
      key: 'replaceWith',
      value: function replaceWith(block) {
        this.domNode.textContent = this.domNode.textContent;
        this.attach();
        _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
      }
    }, {
      key: 'highlight',
      value: function highlight(_highlight) {
        var text = this.domNode.textContent;
        if (this.cachedText !== text) {
          if (text.trim().length > 0 || this.cachedText == null) {
            this.domNode.innerHTML = _highlight(text);
            this.domNode.normalize();
            this.attach();
          }
          this.cachedText = text;
        }
      }
    }]);

    return SyntaxCodeBlock;
  }(_code2.default);

  SyntaxCodeBlock.className = 'ql-syntax';

  var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
    scope: _parchment2.default.Scope.INLINE
  });

  var Syntax = function (_Module) {
    _inherits(Syntax, _Module);

    _createClass(Syntax, null, [{
      key: 'register',
      value: function register() {
        _quill2.default.register(CodeToken, true);
        _quill2.default.register(SyntaxCodeBlock, true);
      }
    }]);

    function Syntax(quill, options) {
      _classCallCheck(this, Syntax);

      var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

      if (typeof _this2.options.highlight !== 'function') {
        throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
      }
      var timer = null;
      _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          _this2.highlight();
          timer = null;
        }, _this2.options.interval);
      });
      _this2.highlight();
      return _this2;
    }

    _createClass(Syntax, [{
      key: 'highlight',
      value: function highlight() {
        var _this3 = this;

        if (this.quill.selection.composing) return;
        this.quill.update(_quill2.default.sources.USER);
        var range = this.quill.getSelection();
        this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
          code.highlight(_this3.options.highlight);
        });
        this.quill.update(_quill2.default.sources.SILENT);
        if (range != null) {
          this.quill.setSelection(range, _quill2.default.sources.SILENT);
        }
      }
    }]);

    return Syntax;
  }(_module2.default);

  Syntax.DEFAULTS = {
    highlight: function () {
      if (window.hljs == null) return null;
      return function (text) {
        var result = window.hljs.highlightAuto(text);
        return result.value;
      };
    }(),
    interval: 1000
  };

  exports.CodeBlock = SyntaxCodeBlock;
  exports.CodeToken = CodeToken;
  exports.default = Syntax;

  /***/ }),
  /* 76 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 77 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 78 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 79 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 80 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

  /***/ }),
  /* 81 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

  /***/ }),
  /* 82 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

  /***/ }),
  /* 83 */
  /***/ (function(module, exports) {

  module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

  /***/ }),
  /* 84 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

  /***/ }),
  /* 85 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

  /***/ }),
  /* 86 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

  /***/ }),
  /* 87 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 88 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 89 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 90 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

  /***/ }),
  /* 91 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

  /***/ }),
  /* 92 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

  /***/ }),
  /* 93 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

  /***/ }),
  /* 94 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

  /***/ }),
  /* 95 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

  /***/ }),
  /* 96 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

  /***/ }),
  /* 97 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

  /***/ }),
  /* 98 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

  /***/ }),
  /* 99 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

  /***/ }),
  /* 100 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

  /***/ }),
  /* 101 */
  /***/ (function(module, exports) {

  module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

  /***/ }),
  /* 102 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

  /***/ }),
  /* 103 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

  /***/ }),
  /* 104 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

  /***/ }),
  /* 105 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

  /***/ }),
  /* 106 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

  /***/ }),
  /* 107 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

  /***/ }),
  /* 108 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BubbleTooltip = undefined;

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _base = __webpack_require__(43);

  var _base2 = _interopRequireDefault(_base);

  var _selection = __webpack_require__(15);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

  var BubbleTheme = function (_BaseTheme) {
    _inherits(BubbleTheme, _BaseTheme);

    function BubbleTheme(quill, options) {
      _classCallCheck(this, BubbleTheme);

      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG;
      }

      var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

      _this.quill.container.classList.add('ql-bubble');
      return _this;
    }

    _createClass(BubbleTheme, [{
      key: 'extendToolbar',
      value: function extendToolbar(toolbar) {
        this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
        this.tooltip.root.appendChild(toolbar.container);
        this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
        this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
      }
    }]);

    return BubbleTheme;
  }(_base2.default);

  BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link: function link(value) {
            if (!value) {
              this.quill.format('link', false);
            } else {
              this.quill.theme.tooltip.edit();
            }
          }
        }
      }
    }
  });

  var BubbleTooltip = function (_BaseTooltip) {
    _inherits(BubbleTooltip, _BaseTooltip);

    function BubbleTooltip(quill, bounds) {
      _classCallCheck(this, BubbleTooltip);

      var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

      _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
        if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
        if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
          _this2.show();
          // Lock our width so we will expand beyond our offsetParent boundaries
          _this2.root.style.left = '0px';
          _this2.root.style.width = '';
          _this2.root.style.width = _this2.root.offsetWidth + 'px';
          var lines = _this2.quill.getLines(range.index, range.length);
          if (lines.length === 1) {
            _this2.position(_this2.quill.getBounds(range));
          } else {
            var lastLine = lines[lines.length - 1];
            var index = _this2.quill.getIndex(lastLine);
            var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
            var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
            _this2.position(_bounds);
          }
        } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
          _this2.hide();
        }
      });
      return _this2;
    }

    _createClass(BubbleTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this3 = this;

        _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
        this.root.querySelector('.ql-close').addEventListener('click', function () {
          _this3.root.classList.remove('ql-editing');
        });
        this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
          // Let selection be restored by toolbar handlers before repositioning
          setTimeout(function () {
            if (_this3.root.classList.contains('ql-hidden')) return;
            var range = _this3.quill.getSelection();
            if (range != null) {
              _this3.position(_this3.quill.getBounds(range));
            }
          }, 1);
        });
      }
    }, {
      key: 'cancel',
      value: function cancel() {
        this.show();
      }
    }, {
      key: 'position',
      value: function position(reference) {
        var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
        var arrow = this.root.querySelector('.ql-tooltip-arrow');
        arrow.style.marginLeft = '';
        if (shift === 0) return shift;
        arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
      }
    }]);

    return BubbleTooltip;
  }(_base.BaseTooltip);

  BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

  exports.BubbleTooltip = BubbleTooltip;
  exports.default = BubbleTheme;

  /***/ }),
  /* 109 */
  /***/ (function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(63);


  /***/ })
  /******/ ])["default"];
  });
  });

  var Quill = unwrapExports(quill);

  var defaultToolbar = [[{
    header: [false, 1, 2, 3, 4, 5, 6]
  }], ["bold", "italic", "underline", "strike"], // toggled buttons
  [{
    align: ""
  }, {
    align: "center"
  }, {
    align: "right"
  }, {
    align: "justify"
  }], ["blockquote", "code-block"], [{
    list: "ordered"
  }, {
    list: "bullet"
  }, {
    list: "check"
  }], [{
    indent: "-1"
  }, {
    indent: "+1"
  }], // outdent/indent
  [{
    color: []
  }, {
    background: []
  }], // dropdown with defaults from theme
  ["link", "image", "video"], ["clean"] // remove formatting button
  ];

  var oldApi = {
    props: {
      customModules: Array
    },
    methods: {
      registerCustomModules: function registerCustomModules(Quill) {
        if (this.customModules !== undefined) {
          this.customModules.forEach(function (customModule) {
            Quill.register("modules/" + customModule.alias, customModule.module);
          });
        }
      }
    }
  };

  function _typeof$1(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$1 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$1 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$1(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits$1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf$1(subClass, superClass);
  }

  function _getPrototypeOf$1(o) {
    _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf$1(o);
  }

  function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf$1(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$1();
  }

  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit$1(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /**
   * Performs a deep merge of `source` into `target`.
   * Mutates `target` only but not its objects and arrays.
   *
   */
  function mergeDeep(target, source) {
    var isObject = function isObject(obj) {
      return obj && _typeof$1(obj) === "object";
    };

    if (!isObject(target) || !isObject(source)) {
      return source;
    }

    Object.keys(source).forEach(function (key) {
      var targetValue = target[key];
      var sourceValue = source[key];

      if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
        target[key] = targetValue.concat(sourceValue);
      } else if (isObject(targetValue) && isObject(sourceValue)) {
        target[key] = mergeDeep(Object.assign({}, targetValue), sourceValue);
      } else {
        target[key] = sourceValue;
      }
    });
    return target;
  }

  var BlockEmbed = Quill.import("blots/block/embed");

  var HorizontalRule =
  /*#__PURE__*/
  function (_BlockEmbed) {
    _inherits$1(HorizontalRule, _BlockEmbed);

    function HorizontalRule() {
      _classCallCheck(this, HorizontalRule);

      return _possibleConstructorReturn(this, _getPrototypeOf$1(HorizontalRule).apply(this, arguments));
    }

    return HorizontalRule;
  }(BlockEmbed);

  HorizontalRule.blotName = "hr";
  HorizontalRule.tagName = "hr";
  Quill.register("formats/horizontal", HorizontalRule);

  var MarkdownShortcuts =
  /*#__PURE__*/
  function () {
    function MarkdownShortcuts(quill, options) {
      var _this = this;

      _classCallCheck(this, MarkdownShortcuts);

      this.quill = quill;
      this.options = options;
      this.ignoreTags = ["PRE"];
      this.matches = [{
        name: "header",
        pattern: /^(#){1,6}\s/g,
        action: function action(text, selection, pattern) {
          var match = pattern.exec(text);
          if (!match) return;
          var size = match[0].length; // Need to defer this action https://github.com/quilljs/quill/issues/1134

          setTimeout(function () {
            _this.quill.formatLine(selection.index, 0, "header", size - 1);

            _this.quill.deleteText(selection.index - size, size);
          }, 0);
        }
      }, {
        name: "blockquote",
        pattern: /^(>)\s/g,
        action: function action(_text, selection) {
          // Need to defer this action https://github.com/quilljs/quill/issues/1134
          setTimeout(function () {
            _this.quill.formatLine(selection.index, 1, "blockquote", true);

            _this.quill.deleteText(selection.index - 2, 2);
          }, 0);
        }
      }, {
        name: "code-block",
        pattern: /^`{3}(?:\s|\n)/g,
        action: function action(_text, selection) {
          // Need to defer this action https://github.com/quilljs/quill/issues/1134
          setTimeout(function () {
            _this.quill.formatLine(selection.index, 1, "code-block", true);

            _this.quill.deleteText(selection.index - 4, 4);
          }, 0);
        }
      }, {
        name: "bolditalic",
        pattern: /(?:\*|_){3}(.+?)(?:\*|_){3}/g,
        action: function action(text, _selection, pattern, lineStart) {
          var match = pattern.exec(text);
          var annotatedText = match[0];
          var matchedText = match[1];
          var startIndex = lineStart + match.index;
          if (text.match(/^([*_ \n]+)$/g)) return;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, annotatedText.length);

            _this.quill.insertText(startIndex, matchedText, {
              bold: true,
              italic: true
            });

            _this.quill.format("bold", false);
          }, 0);
        }
      }, {
        name: "bold",
        pattern: /(?:\*|_){2}(.+?)(?:\*|_){2}/g,
        action: function action(text, _selection, pattern, lineStart) {
          var match = pattern.exec(text);
          var annotatedText = match[0];
          var matchedText = match[1];
          var startIndex = lineStart + match.index;
          if (text.match(/^([*_ \n]+)$/g)) return;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, annotatedText.length);

            _this.quill.insertText(startIndex, matchedText, {
              bold: true
            });

            _this.quill.format("bold", false);
          }, 0);
        }
      }, {
        name: "italic",
        pattern: /(?:\*|_){1}(.+?)(?:\*|_){1}/g,
        action: function action(text, _selection, pattern, lineStart) {
          var match = pattern.exec(text);
          var annotatedText = match[0];
          var matchedText = match[1];
          var startIndex = lineStart + match.index;
          if (text.match(/^([*_ \n]+)$/g)) return;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, annotatedText.length);

            _this.quill.insertText(startIndex, matchedText, {
              italic: true
            });

            _this.quill.format("italic", false);
          }, 0);
        }
      }, {
        name: "strikethrough",
        pattern: /(?:~~)(.+?)(?:~~)/g,
        action: function action(text, _selection, pattern, lineStart) {
          var match = pattern.exec(text);
          var annotatedText = match[0];
          var matchedText = match[1];
          var startIndex = lineStart + match.index;
          if (text.match(/^([*_ \n]+)$/g)) return;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, annotatedText.length);

            _this.quill.insertText(startIndex, matchedText, {
              strike: true
            });

            _this.quill.format("strike", false);
          }, 0);
        }
      }, {
        name: "code",
        pattern: /(?:`)(.+?)(?:`)/g,
        action: function action(text, _selection, pattern, lineStart) {
          var match = pattern.exec(text);
          var annotatedText = match[0];
          var matchedText = match[1];
          var startIndex = lineStart + match.index;
          if (text.match(/^([*_ \n]+)$/g)) return;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, annotatedText.length);

            _this.quill.insertText(startIndex, matchedText, {
              code: true
            });

            _this.quill.format("code", false);

            _this.quill.insertText(_this.quill.getSelection(), " ");
          }, 0);
        }
      }, {
        name: "hr",
        pattern: /^([-*]\s?){3}/g,
        action: function action(text, selection) {
          var startIndex = selection.index - text.length;
          setTimeout(function () {
            _this.quill.deleteText(startIndex, text.length);

            _this.quill.insertEmbed(startIndex + 1, "hr", true, Quill.sources.USER);

            _this.quill.insertText(startIndex + 2, "\n", Quill.sources.SILENT);

            _this.quill.setSelection(startIndex + 2, Quill.sources.SILENT);
          }, 0);
        }
      }, {
        name: "asterisk-ul",
        pattern: /^(\*|\+)\s$/g,
        action: function action(_text, selection, _pattern) {
          setTimeout(function () {
            _this.quill.formatLine(selection.index, 1, "list", "unordered");

            _this.quill.deleteText(selection.index - 2, 2);
          }, 0);
        }
      }, {
        name: "image",
        pattern: /(?:!\[(.+?)\])(?:\((.+?)\))/g,
        action: function action(text, selection, pattern) {
          var startIndex = text.search(pattern);
          var matchedText = text.match(pattern)[0]; // const hrefText = text.match(/(?:!\[(.*?)\])/g)[0]

          var hrefLink = text.match(/(?:\((.*?)\))/g)[0];
          var start = selection.index - matchedText.length - 1;

          if (startIndex !== -1) {
            setTimeout(function () {
              _this.quill.deleteText(start, matchedText.length);

              _this.quill.insertEmbed(start, "image", hrefLink.slice(1, hrefLink.length - 1));
            }, 0);
          }
        }
      }, {
        name: "link",
        pattern: /(?:\[(.+?)\])(?:\((.+?)\))/g,
        action: function action(text, selection, pattern) {
          var startIndex = text.search(pattern);
          var matchedText = text.match(pattern)[0];
          var hrefText = text.match(/(?:\[(.*?)\])/g)[0];
          var hrefLink = text.match(/(?:\((.*?)\))/g)[0];
          var start = selection.index - matchedText.length - 1;

          if (startIndex !== -1) {
            setTimeout(function () {
              _this.quill.deleteText(start, matchedText.length);

              _this.quill.insertText(start, hrefText.slice(1, hrefText.length - 1), "link", hrefLink.slice(1, hrefLink.length - 1));
            }, 0);
          }
        }
      }]; // Handler that looks for insert deltas that match specific characters

      this.quill.on("text-change", function (delta, _oldContents, _source) {
        for (var i = 0; i < delta.ops.length; i++) {
          if (delta.ops[i].hasOwnProperty("insert")) {
            if (delta.ops[i].insert === " ") {
              _this.onSpace();
            } else if (delta.ops[i].insert === "\n") {
              _this.onEnter();
            }
          }
        }
      });
    }

    _createClass(MarkdownShortcuts, [{
      key: "isValid",
      value: function isValid(text, tagName) {
        return typeof text !== "undefined" && text && this.ignoreTags.indexOf(tagName) === -1;
      }
    }, {
      key: "onSpace",
      value: function onSpace() {
        var selection = this.quill.getSelection();
        if (!selection) return;

        var _this$quill$getLine = this.quill.getLine(selection.index),
            _this$quill$getLine2 = _slicedToArray$1(_this$quill$getLine, 2),
            line = _this$quill$getLine2[0],
            offset = _this$quill$getLine2[1];

        var text = line.domNode.textContent;
        var lineStart = selection.index - offset;

        if (this.isValid(text, line.domNode.tagName)) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var match = _step.value;
              var matchedText = text.match(match.pattern);

              if (matchedText) {
                // We need to replace only matched text not the whole line
                console.log("matched:", match.name, text);
                match.action(text, selection, match.pattern, lineStart);
                return;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }, {
      key: "onEnter",
      value: function onEnter() {
        var selection = this.quill.getSelection();
        if (!selection) return;

        var _this$quill$getLine3 = this.quill.getLine(selection.index),
            _this$quill$getLine4 = _slicedToArray$1(_this$quill$getLine3, 2),
            line = _this$quill$getLine4[0],
            offset = _this$quill$getLine4[1];

        var text = line.domNode.textContent + " ";
        var lineStart = selection.index - offset;
        selection.length = selection.index++;

        if (this.isValid(text, line.domNode.tagName)) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = this.matches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var match = _step2.value;
              var matchedText = text.match(match.pattern);

              if (matchedText) {
                console.log("matched", match.name, text);
                match.action(text, selection, match.pattern, lineStart);
                return;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      }
    }]);

    return MarkdownShortcuts;
  }(); // module.exports = MarkdownShortcuts;

  //
  var script$I = {
    name: "VueEditor",
    mixins: [oldApi],
    props: {
      id: {
        type: String,
        default: "quill-container"
      },
      placeholder: {
        type: String,
        default: ""
      },
      value: {
        type: String,
        default: ""
      },
      disabled: {
        type: Boolean
      },
      editorToolbar: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      editorOptions: {
        type: Object,
        required: false,
        default: function _default() {
          return {};
        }
      },
      useCustomImageHandler: {
        type: Boolean,
        default: false
      },
      useMarkdownShortcuts: {
        type: Boolean,
        default: false
      }
    },
    data: function data() {
      return {
        quill: null
      };
    },
    watch: {
      value: function value(val) {
        if (val != this.quill.root.innerHTML && !this.quill.hasFocus()) {
          this.quill.root.innerHTML = val;
        }
      },
      disabled: function disabled(status) {
        this.quill.enable(!status);
      }
    },
    mounted: function mounted() {
      this.registerCustomModules(Quill);
      this.registerPrototypes();
      this.initializeEditor();
    },
    beforeDestroy: function beforeDestroy() {
      this.quill = null;
      delete this.quill;
    },
    methods: {
      initializeEditor: function initializeEditor() {
        this.setupQuillEditor();
        this.checkForCustomImageHandler();
        this.handleInitialContent();
        this.registerEditorEventListeners();
        this.$emit("ready", this.quill);
      },
      setupQuillEditor: function setupQuillEditor() {
        var editorConfig = {
          debug: false,
          modules: this.setModules(),
          theme: "snow",
          placeholder: this.placeholder ? this.placeholder : "",
          readOnly: this.disabled ? this.disabled : false
        };
        this.prepareEditorConfig(editorConfig);
        this.quill = new Quill(this.$refs.quillContainer, editorConfig);
      },
      setModules: function setModules() {
        var modules = {
          toolbar: this.editorToolbar.length ? this.editorToolbar : defaultToolbar
        };

        if (this.useMarkdownShortcuts) {
          Quill.register("modules/markdownShortcuts", MarkdownShortcuts, true);
          modules["markdownShortcuts"] = {};
        }

        return modules;
      },
      prepareEditorConfig: function prepareEditorConfig(editorConfig) {
        if (Object.keys(this.editorOptions).length > 0 && this.editorOptions.constructor === Object) {
          if (this.editorOptions.modules && typeof this.editorOptions.modules.toolbar !== "undefined") {
            // We don't want to merge default toolbar with provided toolbar.
            delete editorConfig.modules.toolbar;
          }

          mergeDeep(editorConfig, this.editorOptions);
        }
      },
      registerPrototypes: function registerPrototypes() {
        Quill.prototype.getHTML = function () {
          return this.container.querySelector(".ql-editor").innerHTML;
        };

        Quill.prototype.getWordCount = function () {
          return this.container.querySelector(".ql-editor").innerText.length;
        };
      },
      registerEditorEventListeners: function registerEditorEventListeners() {
        this.quill.on("text-change", this.handleTextChange);
        this.quill.on("selection-change", this.handleSelectionChange);
        this.listenForEditorEvent("text-change");
        this.listenForEditorEvent("selection-change");
        this.listenForEditorEvent("editor-change");
      },
      listenForEditorEvent: function listenForEditorEvent(type) {
        var _this = this;

        this.quill.on(type, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.$emit.apply(_this, [type].concat(args));
        });
      },
      handleInitialContent: function handleInitialContent() {
        if (this.value) this.quill.root.innerHTML = this.value; // Set initial editor content
      },
      handleSelectionChange: function handleSelectionChange(range, oldRange) {
        if (!range && oldRange) this.$emit("blur", this.quill);else if (range && !oldRange) this.$emit("focus", this.quill);
      },
      handleTextChange: function handleTextChange(delta, oldContents) {
        var editorContent = this.quill.getHTML() === "<p><br></p>" ? "" : this.quill.getHTML();
        this.$emit("input", editorContent);
        if (this.useCustomImageHandler) this.handleImageRemoved(delta, oldContents);
      },
      handleImageRemoved: function handleImageRemoved(delta, oldContents) {
        var _this2 = this;

        var currrentContents = this.quill.getContents();
        var deletedContents = currrentContents.diff(oldContents);
        var operations = deletedContents.ops;
        operations.map(function (operation) {
          if (operation.insert && operation.insert.hasOwnProperty("image")) {
            var image = operation.insert.image;

            _this2.$emit("image-removed", image);
          }
        });
      },
      checkForCustomImageHandler: function checkForCustomImageHandler() {
        this.useCustomImageHandler === true ? this.setupCustomImageHandler() : "";
      },
      setupCustomImageHandler: function setupCustomImageHandler() {
        var toolbar = this.quill.getModule("toolbar");
        toolbar.addHandler("image", this.customImageHandler);
      },
      customImageHandler: function customImageHandler(image, callback) {
        this.$refs.fileInput.click();
      },
      emitImageInfo: function emitImageInfo($event) {
        var resetUploader = function resetUploader() {
          var uploader = document.getElementById("file-upload");
          uploader.value = "";
        };

        var file = $event.target.files[0];
        var Editor = this.quill;
        var range = Editor.getSelection();
        var cursorLocation = range.index;
        this.$emit("image-added", file, Editor, cursorLocation, resetUploader);
      }
    }
  };

  function normalizeComponent$1(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent$1;

  var isOldIE$1 = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

  function createInjector$1(context) {
    return function (id, style) {
      return addStyle$1(id, style);
    };
  }

  var HEAD$1;
  var styles$1 = {};

  function addStyle$1(id, css) {
    var group = isOldIE$1 ? css.media || 'default' : id;
    var style = styles$1[group] || (styles$1[group] = {
      ids: new Set(),
      styles: []
    });

    if (!style.ids.has(id)) {
      style.ids.add(id);
      var code = css.source;

      if (css.map) {
        // https://developer.chrome.com/devtools/docs/javascript-debugging
        // this makes source maps inside style tags work properly in Chrome
        code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

        code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
      }

      if (!style.element) {
        style.element = document.createElement('style');
        style.element.type = 'text/css';
        if (css.media) style.element.setAttribute('media', css.media);

        if (HEAD$1 === undefined) {
          HEAD$1 = document.head || document.getElementsByTagName('head')[0];
        }

        HEAD$1.appendChild(style.element);
      }

      if ('styleSheet' in style.element) {
        style.styles.push(code);
        style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
      } else {
        var index = style.ids.size - 1;
        var textNode = document.createTextNode(code);
        var nodes = style.element.childNodes;
        if (nodes[index]) style.element.removeChild(nodes[index]);
        if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
      }
    }
  }

  var browser = createInjector$1;

  /* script */
  const __vue_script__$J = script$I;

  /* template */
  var __vue_render__$C = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"quillWrapper"},[_vm._t("toolbar"),_vm._v(" "),_c('div',{ref:"quillContainer",attrs:{"id":_vm.id}}),_vm._v(" "),(_vm.useCustomImageHandler)?_c('input',{ref:"fileInput",staticStyle:{"display":"none"},attrs:{"id":"file-upload","type":"file","accept":"image/*"},on:{"change":function($event){return _vm.emitImageInfo($event)}}}):_vm._e()],2)};
  var __vue_staticRenderFns__$C = [];

    /* style */
    const __vue_inject_styles__$J = function (inject) {
      if (!inject) return
      inject("data-v-59392418_0", { source: "/*!\n * Quill Editor v1.3.6\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */.ql-container{box-sizing:border-box;font-family:Helvetica,Arial,sans-serif;font-size:13px;height:100%;margin:0;position:relative}.ql-container.ql-disabled .ql-tooltip{visibility:hidden}.ql-container.ql-disabled .ql-editor ul[data-checked]>li::before{pointer-events:none}.ql-clipboard{left:-100000px;height:1px;overflow-y:hidden;position:absolute;top:50%}.ql-clipboard p{margin:0;padding:0}.ql-editor{box-sizing:border-box;line-height:1.42;height:100%;outline:0;overflow-y:auto;padding:12px 15px;tab-size:4;-moz-tab-size:4;text-align:left;white-space:pre-wrap;word-wrap:break-word}.ql-editor>*{cursor:text}.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6,.ql-editor ol,.ql-editor p,.ql-editor pre,.ql-editor ul{margin:0;padding:0;counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol,.ql-editor ul{padding-left:1.5em}.ql-editor ol>li,.ql-editor ul>li{list-style-type:none}.ql-editor ul>li::before{content:'\\2022'}.ql-editor ul[data-checked=false],.ql-editor ul[data-checked=true]{pointer-events:none}.ql-editor ul[data-checked=false]>li *,.ql-editor ul[data-checked=true]>li *{pointer-events:all}.ql-editor ul[data-checked=false]>li::before,.ql-editor ul[data-checked=true]>li::before{color:#777;cursor:pointer;pointer-events:all}.ql-editor ul[data-checked=true]>li::before{content:'\\2611'}.ql-editor ul[data-checked=false]>li::before{content:'\\2610'}.ql-editor li::before{display:inline-block;white-space:nowrap;width:1.2em}.ql-editor li:not(.ql-direction-rtl)::before{margin-left:-1.5em;margin-right:.3em;text-align:right}.ql-editor li.ql-direction-rtl::before{margin-left:.3em;margin-right:-1.5em}.ql-editor ol li:not(.ql-direction-rtl),.ql-editor ul li:not(.ql-direction-rtl){padding-left:1.5em}.ql-editor ol li.ql-direction-rtl,.ql-editor ul li.ql-direction-rtl{padding-right:1.5em}.ql-editor ol li{counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;counter-increment:list-0}.ql-editor ol li:before{content:counter(list-0,decimal) '. '}.ql-editor ol li.ql-indent-1{counter-increment:list-1}.ql-editor ol li.ql-indent-1:before{content:counter(list-1,lower-alpha) '. '}.ql-editor ol li.ql-indent-1{counter-reset:list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-2{counter-increment:list-2}.ql-editor ol li.ql-indent-2:before{content:counter(list-2,lower-roman) '. '}.ql-editor ol li.ql-indent-2{counter-reset:list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-3{counter-increment:list-3}.ql-editor ol li.ql-indent-3:before{content:counter(list-3,decimal) '. '}.ql-editor ol li.ql-indent-3{counter-reset:list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-4{counter-increment:list-4}.ql-editor ol li.ql-indent-4:before{content:counter(list-4,lower-alpha) '. '}.ql-editor ol li.ql-indent-4{counter-reset:list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-5{counter-increment:list-5}.ql-editor ol li.ql-indent-5:before{content:counter(list-5,lower-roman) '. '}.ql-editor ol li.ql-indent-5{counter-reset:list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-6{counter-increment:list-6}.ql-editor ol li.ql-indent-6:before{content:counter(list-6,decimal) '. '}.ql-editor ol li.ql-indent-6{counter-reset:list-7 list-8 list-9}.ql-editor ol li.ql-indent-7{counter-increment:list-7}.ql-editor ol li.ql-indent-7:before{content:counter(list-7,lower-alpha) '. '}.ql-editor ol li.ql-indent-7{counter-reset:list-8 list-9}.ql-editor ol li.ql-indent-8{counter-increment:list-8}.ql-editor ol li.ql-indent-8:before{content:counter(list-8,lower-roman) '. '}.ql-editor ol li.ql-indent-8{counter-reset:list-9}.ql-editor ol li.ql-indent-9{counter-increment:list-9}.ql-editor ol li.ql-indent-9:before{content:counter(list-9,decimal) '. '}.ql-editor .ql-indent-1:not(.ql-direction-rtl){padding-left:3em}.ql-editor li.ql-indent-1:not(.ql-direction-rtl){padding-left:4.5em}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:3em}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:4.5em}.ql-editor .ql-indent-2:not(.ql-direction-rtl){padding-left:6em}.ql-editor li.ql-indent-2:not(.ql-direction-rtl){padding-left:7.5em}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:6em}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:7.5em}.ql-editor .ql-indent-3:not(.ql-direction-rtl){padding-left:9em}.ql-editor li.ql-indent-3:not(.ql-direction-rtl){padding-left:10.5em}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:9em}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:10.5em}.ql-editor .ql-indent-4:not(.ql-direction-rtl){padding-left:12em}.ql-editor li.ql-indent-4:not(.ql-direction-rtl){padding-left:13.5em}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:12em}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:13.5em}.ql-editor .ql-indent-5:not(.ql-direction-rtl){padding-left:15em}.ql-editor li.ql-indent-5:not(.ql-direction-rtl){padding-left:16.5em}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:15em}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:16.5em}.ql-editor .ql-indent-6:not(.ql-direction-rtl){padding-left:18em}.ql-editor li.ql-indent-6:not(.ql-direction-rtl){padding-left:19.5em}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:18em}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:19.5em}.ql-editor .ql-indent-7:not(.ql-direction-rtl){padding-left:21em}.ql-editor li.ql-indent-7:not(.ql-direction-rtl){padding-left:22.5em}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:21em}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:22.5em}.ql-editor .ql-indent-8:not(.ql-direction-rtl){padding-left:24em}.ql-editor li.ql-indent-8:not(.ql-direction-rtl){padding-left:25.5em}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:24em}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:25.5em}.ql-editor .ql-indent-9:not(.ql-direction-rtl){padding-left:27em}.ql-editor li.ql-indent-9:not(.ql-direction-rtl){padding-left:28.5em}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:27em}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:28.5em}.ql-editor .ql-video{display:block;max-width:100%}.ql-editor .ql-video.ql-align-center{margin:0 auto}.ql-editor .ql-video.ql-align-right{margin:0 0 0 auto}.ql-editor .ql-bg-black{background-color:#000}.ql-editor .ql-bg-red{background-color:#e60000}.ql-editor .ql-bg-orange{background-color:#f90}.ql-editor .ql-bg-yellow{background-color:#ff0}.ql-editor .ql-bg-green{background-color:#008a00}.ql-editor .ql-bg-blue{background-color:#06c}.ql-editor .ql-bg-purple{background-color:#93f}.ql-editor .ql-color-white{color:#fff}.ql-editor .ql-color-red{color:#e60000}.ql-editor .ql-color-orange{color:#f90}.ql-editor .ql-color-yellow{color:#ff0}.ql-editor .ql-color-green{color:#008a00}.ql-editor .ql-color-blue{color:#06c}.ql-editor .ql-color-purple{color:#93f}.ql-editor .ql-font-serif{font-family:Georgia,Times New Roman,serif}.ql-editor .ql-font-monospace{font-family:Monaco,Courier New,monospace}.ql-editor .ql-size-small{font-size:.75em}.ql-editor .ql-size-large{font-size:1.5em}.ql-editor .ql-size-huge{font-size:2.5em}.ql-editor .ql-direction-rtl{direction:rtl;text-align:inherit}.ql-editor .ql-align-center{text-align:center}.ql-editor .ql-align-justify{text-align:justify}.ql-editor .ql-align-right{text-align:right}.ql-editor.ql-blank::before{color:rgba(0,0,0,.6);content:attr(data-placeholder);font-style:italic;left:15px;pointer-events:none;position:absolute;right:15px}.ql-snow .ql-toolbar:after,.ql-snow.ql-toolbar:after{clear:both;content:'';display:table}.ql-snow .ql-toolbar button,.ql-snow.ql-toolbar button{background:0 0;border:none;cursor:pointer;display:inline-block;float:left;height:24px;padding:3px 5px;width:28px}.ql-snow .ql-toolbar button svg,.ql-snow.ql-toolbar button svg{float:left;height:100%}.ql-snow .ql-toolbar button:active:hover,.ql-snow.ql-toolbar button:active:hover{outline:0}.ql-snow .ql-toolbar input.ql-image[type=file],.ql-snow.ql-toolbar input.ql-image[type=file]{display:none}.ql-snow .ql-toolbar .ql-picker-item.ql-selected,.ql-snow .ql-toolbar .ql-picker-item:hover,.ql-snow .ql-toolbar .ql-picker-label.ql-active,.ql-snow .ql-toolbar .ql-picker-label:hover,.ql-snow .ql-toolbar button.ql-active,.ql-snow .ql-toolbar button:focus,.ql-snow .ql-toolbar button:hover,.ql-snow.ql-toolbar .ql-picker-item.ql-selected,.ql-snow.ql-toolbar .ql-picker-item:hover,.ql-snow.ql-toolbar .ql-picker-label.ql-active,.ql-snow.ql-toolbar .ql-picker-label:hover,.ql-snow.ql-toolbar button.ql-active,.ql-snow.ql-toolbar button:focus,.ql-snow.ql-toolbar button:hover{color:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:focus .ql-fill,.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover .ql-fill,.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:focus .ql-fill,.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover .ql-fill,.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill{fill:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow .ql-toolbar button.ql-active .ql-stroke,.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar button:focus .ql-stroke,.ql-snow .ql-toolbar button:focus .ql-stroke-miter,.ql-snow .ql-toolbar button:hover .ql-stroke,.ql-snow .ql-toolbar button:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow.ql-toolbar button.ql-active .ql-stroke,.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar button:focus .ql-stroke,.ql-snow.ql-toolbar button:focus .ql-stroke-miter,.ql-snow.ql-toolbar button:hover .ql-stroke,.ql-snow.ql-toolbar button:hover .ql-stroke-miter{stroke:#06c}@media (pointer:coarse){.ql-snow .ql-toolbar button:hover:not(.ql-active),.ql-snow.ql-toolbar button:hover:not(.ql-active){color:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter{stroke:#444}}.ql-snow{box-sizing:border-box}.ql-snow *{box-sizing:border-box}.ql-snow .ql-hidden{display:none}.ql-snow .ql-out-bottom,.ql-snow .ql-out-top{visibility:hidden}.ql-snow .ql-tooltip{position:absolute;transform:translateY(10px)}.ql-snow .ql-tooltip a{cursor:pointer;text-decoration:none}.ql-snow .ql-tooltip.ql-flip{transform:translateY(-10px)}.ql-snow .ql-formats{display:inline-block;vertical-align:middle}.ql-snow .ql-formats:after{clear:both;content:'';display:table}.ql-snow .ql-stroke{fill:none;stroke:#444;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}.ql-snow .ql-stroke-miter{fill:none;stroke:#444;stroke-miterlimit:10;stroke-width:2}.ql-snow .ql-fill,.ql-snow .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-empty{fill:none}.ql-snow .ql-even{fill-rule:evenodd}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1}.ql-snow .ql-transparent{opacity:.4}.ql-snow .ql-direction svg:last-child{display:none}.ql-snow .ql-direction.ql-active svg:last-child{display:inline}.ql-snow .ql-direction.ql-active svg:first-child{display:none}.ql-snow .ql-editor h1{font-size:2em}.ql-snow .ql-editor h2{font-size:1.5em}.ql-snow .ql-editor h3{font-size:1.17em}.ql-snow .ql-editor h4{font-size:1em}.ql-snow .ql-editor h5{font-size:.83em}.ql-snow .ql-editor h6{font-size:.67em}.ql-snow .ql-editor a{text-decoration:underline}.ql-snow .ql-editor blockquote{border-left:4px solid #ccc;margin-bottom:5px;margin-top:5px;padding-left:16px}.ql-snow .ql-editor code,.ql-snow .ql-editor pre{background-color:#f0f0f0;border-radius:3px}.ql-snow .ql-editor pre{white-space:pre-wrap;margin-bottom:5px;margin-top:5px;padding:5px 10px}.ql-snow .ql-editor code{font-size:85%;padding:2px 4px}.ql-snow .ql-editor pre.ql-syntax{background-color:#23241f;color:#f8f8f2;overflow:visible}.ql-snow .ql-editor img{max-width:100%}.ql-snow .ql-picker{color:#444;display:inline-block;float:left;font-size:14px;font-weight:500;height:24px;position:relative;vertical-align:middle}.ql-snow .ql-picker-label{cursor:pointer;display:inline-block;height:100%;padding-left:8px;padding-right:2px;position:relative;width:100%}.ql-snow .ql-picker-label::before{display:inline-block;line-height:22px}.ql-snow .ql-picker-options{background-color:#fff;display:none;min-width:100%;padding:4px 8px;position:absolute;white-space:nowrap}.ql-snow .ql-picker-options .ql-picker-item{cursor:pointer;display:block;padding-bottom:5px;padding-top:5px}.ql-snow .ql-picker.ql-expanded .ql-picker-label{color:#ccc;z-index:2}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill{fill:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke{stroke:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-options{display:block;margin-top:-1px;top:100%;z-index:1}.ql-snow .ql-color-picker,.ql-snow .ql-icon-picker{width:28px}.ql-snow .ql-color-picker .ql-picker-label,.ql-snow .ql-icon-picker .ql-picker-label{padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-label svg,.ql-snow .ql-icon-picker .ql-picker-label svg{right:4px}.ql-snow .ql-icon-picker .ql-picker-options{padding:4px 0}.ql-snow .ql-icon-picker .ql-picker-item{height:24px;width:24px;padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-options{padding:3px 5px;width:152px}.ql-snow .ql-color-picker .ql-picker-item{border:1px solid transparent;float:left;height:16px;margin:2px;padding:0;width:16px}.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg{position:absolute;margin-top:-9px;right:0;top:50%;width:18px}.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before{content:attr(data-label)}.ql-snow .ql-picker.ql-header{width:98px}.ql-snow .ql-picker.ql-header .ql-picker-item::before,.ql-snow .ql-picker.ql-header .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before{content:'Heading 1'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before{content:'Heading 2'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before{content:'Heading 3'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before{content:'Heading 4'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before{content:'Heading 5'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before{content:'Heading 6'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before{font-size:2em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before{font-size:1.5em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before{font-size:1.17em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before{font-size:1em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before{font-size:.83em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before{font-size:.67em}.ql-snow .ql-picker.ql-font{width:108px}.ql-snow .ql-picker.ql-font .ql-picker-item::before,.ql-snow .ql-picker.ql-font .ql-picker-label::before{content:'Sans Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before{content:'Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before{content:'Monospace'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before{font-family:Georgia,Times New Roman,serif}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before{font-family:Monaco,Courier New,monospace}.ql-snow .ql-picker.ql-size{width:98px}.ql-snow .ql-picker.ql-size .ql-picker-item::before,.ql-snow .ql-picker.ql-size .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before{content:'Small'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before{content:'Large'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before{content:'Huge'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before{font-size:10px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before{font-size:18px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before{font-size:32px}.ql-snow .ql-color-picker.ql-background .ql-picker-item{background-color:#fff}.ql-snow .ql-color-picker.ql-color .ql-picker-item{background-color:#000}.ql-toolbar.ql-snow{border:1px solid #ccc;box-sizing:border-box;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;padding:8px}.ql-toolbar.ql-snow .ql-formats{margin-right:15px}.ql-toolbar.ql-snow .ql-picker-label{border:1px solid transparent}.ql-toolbar.ql-snow .ql-picker-options{border:1px solid transparent;box-shadow:rgba(0,0,0,.2) 0 2px 8px}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label{border-color:#ccc}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options{border-color:#ccc}.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover{border-color:#000}.ql-toolbar.ql-snow+.ql-container.ql-snow{border-top:0}.ql-snow .ql-tooltip{background-color:#fff;border:1px solid #ccc;box-shadow:0 0 5px #ddd;color:#444;padding:5px 12px;white-space:nowrap}.ql-snow .ql-tooltip::before{content:\"Visit URL:\";line-height:26px;margin-right:8px}.ql-snow .ql-tooltip input[type=text]{display:none;border:1px solid #ccc;font-size:13px;height:26px;margin:0;padding:3px 5px;width:170px}.ql-snow .ql-tooltip a.ql-preview{display:inline-block;max-width:200px;overflow-x:hidden;text-overflow:ellipsis;vertical-align:top}.ql-snow .ql-tooltip a.ql-action::after{border-right:1px solid #ccc;content:'Edit';margin-left:16px;padding-right:8px}.ql-snow .ql-tooltip a.ql-remove::before{content:'Remove';margin-left:8px}.ql-snow .ql-tooltip a{line-height:26px}.ql-snow .ql-tooltip.ql-editing a.ql-preview,.ql-snow .ql-tooltip.ql-editing a.ql-remove{display:none}.ql-snow .ql-tooltip.ql-editing input[type=text]{display:inline-block}.ql-snow .ql-tooltip.ql-editing a.ql-action::after{border-right:0;content:'Save';padding-right:0}.ql-snow .ql-tooltip[data-mode=link]::before{content:\"Enter link:\"}.ql-snow .ql-tooltip[data-mode=formula]::before{content:\"Enter formula:\"}.ql-snow .ql-tooltip[data-mode=video]::before{content:\"Enter video:\"}.ql-snow a{color:#06c}.ql-container.ql-snow{border:1px solid #ccc}", map: undefined, media: undefined })
  ,inject("data-v-59392418_1", { source: ".ql-editor{min-height:200px;font-size:16px}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1px!important}.quillWrapper .ql-snow.ql-toolbar{padding-top:8px;padding-bottom:4px}.quillWrapper .ql-snow.ql-toolbar .ql-formats{margin-bottom:10px}.ql-snow .ql-toolbar button svg,.quillWrapper .ql-snow.ql-toolbar button svg{width:22px;height:22px}.quillWrapper .ql-editor ul[data-checked=false]>li::before,.quillWrapper .ql-editor ul[data-checked=true]>li::before{font-size:1.35em;vertical-align:baseline;bottom:-.065em;font-weight:900;color:#222}.quillWrapper .ql-snow .ql-stroke{stroke:rgba(63,63,63,.95);stroke-linecap:square;stroke-linejoin:initial;stroke-width:1.7px}.quillWrapper .ql-picker-label{font-size:15px}.quillWrapper .ql-snow .ql-active .ql-stroke{stroke-width:2.25px}.quillWrapper .ql-toolbar.ql-snow .ql-formats{vertical-align:top}.ql-picker:not(.ql-background){position:relative;top:2px}.ql-picker.ql-color-picker svg{width:22px!important;height:22px!important}.quillWrapper .imageResizeActive img{display:block;cursor:pointer}.quillWrapper .imageResizeActive~div svg{cursor:pointer}", map: undefined, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__$J = undefined;
    /* module identifier */
    const __vue_module_identifier__$J = undefined;
    /* functional template */
    const __vue_is_functional_template__$J = false;
    /* style inject SSR */
    

    
    var VueEditor = normalizeComponent_1(
      { render: __vue_render__$C, staticRenderFns: __vue_staticRenderFns__$C },
      __vue_inject_styles__$J,
      __vue_script__$J,
      __vue_scope_id__$J,
      __vue_is_functional_template__$J,
      __vue_module_identifier__$J,
      browser,
      undefined
    );

  var version = "2.10.2"; // Declare install function executed by Vue.use()

  function install(Vue) {
    if (install.installed) return;
    install.installed = true;
    Vue.component("VueEditor", VueEditor);
  }
  var VPlugin = {
    install: install,
    version: version,
    Quill: Quill,
    VueEditor: VueEditor
  }; // Auto-install when vue is found (eg. in browser via <script> tag)

  var GlobalVue = null;

  if (typeof window !== "undefined") {
    GlobalVue = window.Vue;
  } else if (typeof global$1 !== "undefined") {
    GlobalVue = global$1.Vue;
  }

  if (GlobalVue) {
    GlobalVue.use(VPlugin);
  }

  var script$J = Vue.mgComponent('mgWysiwyg', {
    meta: {
      title: 'WYSIWYG editor',
      icon: 'far fa-atlas',
      category: 'Complex Inputs',
      preferId: true,
      shorthand: ['content']
    },
    components: {
      VueEditor: VueEditor
    },
    props: {
      placeholder: {
        type: 'mgText',
        help: 'Ghost text to display when there is no value'
      },
      required: {
        type: 'mgToggle',
        "default": false
      }
    },
    created: function created() {
      var _this = this;

      this.$on('mgValidate', function (reply) {
        if (_this.$props.required && !_this.data) return reply("".concat(_this.$props.title, " is required"));
      });
    }
  });

  /* script */
  const __vue_script__$K = script$J;

  /* template */
  var __vue_render__$D = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("vue-editor", {
      staticClass: "mg-wysiwyg",
      attrs: { placeholder: _vm.$props.placeholder },
      model: {
        value: _vm.data,
        callback: function($$v) {
          _vm.data = $$v;
        },
        expression: "data"
      }
    })
  };
  var __vue_staticRenderFns__$D = [];
  __vue_render__$D._withStripped = true;

    /* style */
    const __vue_inject_styles__$K = undefined;
    /* scoped */
    const __vue_scope_id__$K = undefined;
    /* module identifier */
    const __vue_module_identifier__$K = undefined;
    /* functional template */
    const __vue_is_functional_template__$K = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    const __vue_component__$J = normalizeComponent(
      { render: __vue_render__$D, staticRenderFns: __vue_staticRenderFns__$D },
      __vue_inject_styles__$K,
      __vue_script__$K,
      __vue_scope_id__$K,
      __vue_is_functional_template__$K,
      __vue_module_identifier__$K,
      false,
      undefined,
      undefined,
      undefined
    );

  var mgWysiwyg = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': __vue_component__$J
  });

}(Vue, $));
//# sourceMappingURL=macgyver.js.map
